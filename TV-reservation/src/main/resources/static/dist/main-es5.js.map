{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///app.module.ts","webpack:///environments/environment.ts","webpack:///js/chessRules.js","webpack:///js/services/auth.guard.ts","webpack:///js/services/jwtAuthenticationService.ts","webpack:///js/services/websocketService.ts","webpack:///main.ts","webpack:///views/homepage/homepage.html","webpack:///views/lobby/lobby.component.html","webpack:///views/login/login.component.html","webpack:///views/playingHall/playingHall.html","webpack:///views/playingHall/subcomponents/moveVariationTree/move-variation-tree/move-variation-tree.component.html","webpack:///views/homepage/homepage.ts","webpack:///views/lobby/lobby.component.css","webpack:///views/lobby/lobby.component.ts","webpack:///views/login/login.component.css","webpack:///views/login/login.component.ts","webpack:///views/playingHall/playingHall.ts","webpack:///views/playingHall/subcomponents/moveVariationTree/move-variation-tree/move-variation-tree.component.css","webpack:///views/playingHall/subcomponents/moveVariationTree/move-variation-tree/move-variation-tree.component.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","appRoutes","path","component","canActivate","redirectTo","tokenGetter","user","localStorage","getItem","console","log","jwtToken","AppModule","imports","forRoot","config","providers","declarations","bootstrap","environment","production","Chess","fen","BLACK","WHITE","EMPTY","PAWN","KNIGHT","BISHOP","ROOK","QUEEN","KING","SYMBOLS","DEFAULT_POSITION","POSSIBLE_RESULTS","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","r","q","k","ATTACKS","RAYS","SHIFTS","p","FLAGS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","BITS","RANK_1","RANK_2","RANK_3","RANK_4","RANK_5","RANK_6","RANK_7","RANK_8","SQUARES","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","ROOKS","square","flag","board","Array","kings","turn","castling","ep_square","half_moves","move_number","history","header","load","clear","update_setup","generate_fen","reset","tokens","split","position","validate_fen","valid","i","length","piece","charAt","is_digit","parseInt","color","put","type","toLowerCase","algebraic","indexOf","errors","error_number","error","isNaN","test","rows","sum_fields","previous_was_number","empty","toUpperCase","cflags","epflags","join","set_header","args","get","sq","remove","build_move","from","to","flags","promotion","move","captured","generate_moves","options","add_move","moves","rank","pieces","len","push","us","them","swap_color","second_rank","first_sq","last_sq","single_square","legal","j","offset","castling_from","castling_to","attacked","legal_moves","make_move","king_attacked","undo_move","move_to_san","sloppy","output","disambiguator","get_disambiguator","in_check","in_checkmate","stripped_san","replace","difference","index","blocked","in_stalemate","insufficient_material","bishops","num_pieces","sq_color","sum","in_threefold_repetition","positions","repetition","slice","pop","old","ambiguities","same_rank","same_file","ambig_from","ambig_to","ambig_piece","file","ascii","s","symbol","move_from_san","clean_move","matches","match","f","substring","c","make_pretty","ugly_move","clone","san","obj","dupe","property","trim","str","perft","depth","nodes","child_nodes","ugly_moves","verbose","in_draw","game_over","pgn","newline","newline_char","max_width","result","header_exists","reversed_history","move_string","Result","current_width","load_pgn","mask","has_keys","object","key","parse_pgn_header","header_obj","headers","RegExp","value","regex","header_string","ms","rav_regex","half_move","arguments","move_obj","pretty_move","undo","square_color","sq_0x88","move_history","movenotation","AuthGuard","router","authService","tokenDecoder","route","state","token","JSON","parse","authenticatedUser","username","isTokenExpired","removeItem","navigate","queryParams","returnUrl","url","JwtAuthenticationService","http","credentials","post","observe","pipe","response","setItem","stringify","WebSocketService","authenticationService","socket","readyState","OPEN","getJwtToken","WebSocket","close","providedIn","bootstrapModule","HomePageComponent","navbarCollapsed","selector","template","LobbyComponent","websocketService","formBuilder","chatMessage","action","author","message","time","increment","messages","gamesInProgress","playersOnline","seekingOponent","autoHideScrollbar","setHeight","scrollInertia","axis","advanced","updateOnContentResize","scrollButtons","scrollAmount","enable","theme","showSeekForm","gameTimeFormShown","gameTimeForm","group","required","gameTimeFormSubmitted","initWebSockets","onmessage","onMessage","onclose","cancelIntervals","queryPlayersInterval","setInterval","queryPlayersOnline","send","date","Date","unshift","invalid","seekDetails","gameTimeFormFields","initialtime","initialtimepermove","seekOponentInterval","playername","clearInterval","event","data","displayChatMessage","players","countOfPlayersOnline","gameId","controls","LoginComponent","submitted","loading","authenticationData","loginForm","password","snapshot","authenticate","subscribe","PlayingHall","$http","webSocketService","moveToHighlight","variationId","moveNumber","whiteMove","chessboardUsageModes","PLAYING","OBSERVING","ANALYZING","root","resignButtonPressed","MAIN_LINE","chessRules","svgChessboard","pawnPromotionMove","lastMove","startPosition","endPosition","positionOccurrencesMap","Map","mode","squareSize","playingGame","oponent","whitePlayer","whiteClock","blackClock","myMove","whitePlayerName","whitePlayerElo","blackPlayerName","blackPlayerElo","whitePlayerEloChange","blackPlayerEloChange","gameResult","showPawnPromotionDiv","seekFormShown","annotatedMoves","scrollbarconfig","chessboardProps","style","cssClass","showCoordinates","showBorder","responsive","animationDuration","moveInputMode","dragPiece","sprite","grid","currentVariation","drawOfferReceived","variations","moveInputHandler","convertSquareToCoordinates","squareFrom","squareTo","moveStart","getPiece","moveDone","validMove","chess","currentPositionAsFEN","setTimeout","processValidMove","pawnReachedPromotionSquare","warn","params","observedPlayer","initialiseWebSockets","initialiseChessboard","determineInitialModeOfUsage","requestGameInfo","goToPreviousMove","goToNextMove","$event","redrawChessboard","componentReference","anyFunction","searchItem","square_SAN","columns","rowString","substr","row","column","chessboard","squares","findIndexOfSquare","startsquare","endsquare","pieceOnStartSquare","pieceOnEndSquare","moveNotation","sendMoveToOponent","setPosition","disableMoveInput","addAnnotation","highlightLastMoveInNotation","white","enableMoveInput","black","sendMove","pressClock","getGameResult","endGame","document","getElementById","element","getElementsByName","coordinates","pieceIndex","x","y","getGameInfoMessage","game","observeGame","clearTimeout","clockTimer","stopObservingGame","stopClocks","toPromise","isItMyMove","top","offsetParent","offsetTop","left","getBoundingClientRect","right","bottom","Math","floor","blackMove","chessboardAfterBlackMove","chessboardAfterWhiteMove","lastMoveNumber","kingInCheck","isLegal","abs","findSquare","isSquareEmpty","isPieceOnSquare","initialPositionOfPiece","getInitialPositionOfPiece","pieceTakenEnPassant","squaresMovedForward","enPassant","kingPosition","checkingPiecePosition","matePreventionPossible","canAnyOponentsPieceMoveToSquare","canBishopMateBePrevented","canRookMateBePrevented","isKingInCheck","isWhitePieceOnSquare","isBlackPieceOnSquare","hasKingAlreadyMoved","isPawnMoveLegal","isKingMoveLegal","isBishopMoveLegal","isRookMoveLegal","ignoreKings","pieceFound","targetSquare","colour","getSquareAsString","initialSquare","checkLegalityOfMove","numberOfLegalSquareForKingMove","targetSquareIndex","canMateBePrevented","kingInCheckOrAndMate","check","mate","forEach","isKingMated","fenParts","whiteMoveToRedraw","elementId","chessboardsize","offsetWidth","squaresize","createLine","eraseAllHighlightedSquares","highlightSquare","width","height","svgNS","rectangular","createElementNS","setAttributeNS","toString","appendChild","x1","y1","x2","y2","line","createLineElement","css","startPiece","startSquare","endSquare","ownMove","promotedPiece","printSquares","capture","movePieceOnBoard","enPassantPawnTakenRow","enPassantPawnSquare","hide","promotedPieceFullName","prop","attr","detach","appendTo","indexOfPiece","hasThreeFoldRepetitionOccurred","sendGameResult","isKingInCheckOrAndMate","drawLastMove","moveRookIfPlayerCastled","initialSquareCoordinates","printCurrentChessboard","threefoldrepetitionOccurred","chessboardAsString","numberOfOccurrences","has","set","rookMovedDueToCastling","rowIndex","columnIndex","squareIndex","movecomplete","currentchessboard","newMove","whiteMoveStartSquare","whiteMoveEndSquare","blackMoveStartSquare","blackMoveEndSquare","whiteMoveVariations","blackMoveVariations","addNewAnnotatedMove","numberOfVariations","newVariationNeedsToBeCreated","variation","moveNumberInVariation","newAnnotatedMove","String","fromCharCode","gameResultWhite","gameResultBlack","expectedOutcomeWhite","pow","expectedOutcomeBlack","newRatingWhite","round","newRatingBlack","onOpen","onError","executeReceivedMove","startGame","displayDrawOffer","acceptDraw","onerror","onopen","whiteTime","blackTime","annotatedMove","chessboardAfterMove","seconds","clockSeconds","clockSecondsString","clockMinutes","generateClockTimeFromSeconds","onTimeout","startClock","show","elo","blackPlayer","newGame","setOrientation","elem","startPos","endPos","newElos","updatePlayerElos","$modalInstance","resultMessage","offerRematch","drawOffer","player","Object","map","moveAction","MoveVariationTreeComponent","positionToRedraw","emit"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { HttpModule } from '@angular/http';\r\n\r\nimport { JwtAuthenticationService } from './js/services/jwtAuthenticationService';\r\nimport { AuthGuard } from './js/services/auth.guard';\r\nimport { LoginComponent } from './views/login/login.component';\r\nimport { HomePageComponent } from 'views/homepage/homepage';\r\nimport { PlayingHall } from './views/playingHall/playingHall';\r\nimport { NgModule }      from '@angular/core';\r\nimport { HttpClientModule, HttpClientXsrfModule}   from '@angular/common/http';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouterModule, Routes} from '@angular/router';\r\nimport { MoveVariationTreeComponent } from './views/playingHall/subcomponents/moveVariationTree/move-variation-tree/move-variation-tree.component';\r\nimport { LobbyComponent } from './views/lobby/lobby.component';\r\nimport { JwtModule } from \"@auth0/angular-jwt\";\r\nimport { FormBuilder} from '@angular/forms';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\n\r\nconst appRoutes: Routes = [\r\n    { path: 'analyzeGame', component: PlayingHall, canActivate: [AuthGuard]},\r\n    { path: 'playGame/:gameId', component: PlayingHall, canActivate: [AuthGuard]},\r\n    { path: 'observeGame/:observedPlayer', component: PlayingHall, canActivate: [AuthGuard]},\r\n    { path: 'login', component: LoginComponent},\r\n    { path: 'lobby', component: LobbyComponent, canActivate: [AuthGuard]},\r\n    { path: '*', redirectTo:'index.html'} \r\n  ];\r\n\r\nexport function tokenGetter(){\r\n  \r\n  let user:any = localStorage.getItem('currentUser');\r\n  console.log(user);\r\n  console.log(\"calling tokenGetter:\"+user.jwtToken);\r\n  return user.jwtToken;\r\n}\r\n\r\n@NgModule({\r\n  imports:      [\r\n    BrowserModule,\r\n    FormsModule,\r\n    ReactiveFormsModule, \r\n    /* HttpModule, */\r\n    HttpClientModule,\r\n  /*   HttpClientXsrfModule.withOptions({\r\n      cookieName: 'XSRF-TOKEN',\r\n      headerName: 'X-XSRF-TOKEN'\r\n    }), */\r\n    RouterModule.forRoot(appRoutes), \r\n    JwtModule.forRoot({\r\n      config: {\r\n        tokenGetter: tokenGetter,\r\n        //whitelistedDomains: [\"localhost:8082\"],\r\n       // blacklistedRoutes: [\"example.com/examplebadroute/\"]\r\n      }\r\n    })\r\n\r\n],\r\n  providers: [AuthGuard, JwtAuthenticationService, FormBuilder],\r\n  declarations: [ HomePageComponent, PlayingHall, MoveVariationTreeComponent, LobbyComponent, LoginComponent ],\r\n  exports:      [ HomePageComponent ],\r\n  bootstrap:    [ HomePageComponent ] \r\n})\r\nexport class AppModule { }","export const environment = {\r\n    production: false\r\n  };","/*\r\n * Copyright (c) 2016, Jeff Hlywa (jhlywa@gmail.com)\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *----------------------------------------------------------------------------*/\r\n\r\n/* minified license below  */\r\n\r\n/* @license\r\n * Copyright (c) 2016, Jeff Hlywa (jhlywa@gmail.com)\r\n * Released under the BSD license\r\n * https://github.com/jhlywa/chess.js/blob/master/LICENSE\r\n */\r\n\r\nvar Chess = function(fen) {\r\n\r\n    /* jshint indent: false */\r\n  \r\n    var BLACK = 'b';\r\n    var WHITE = 'w';\r\n  \r\n    var EMPTY = -1;\r\n  \r\n    var PAWN = 'p';\r\n    var KNIGHT = 'n';\r\n    var BISHOP = 'b';\r\n    var ROOK = 'r';\r\n    var QUEEN = 'q';\r\n    var KING = 'k';\r\n  \r\n    var SYMBOLS = 'pnbrqkPNBRQK';\r\n  \r\n    var DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\r\n  \r\n    var POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*'];\r\n  \r\n    var PAWN_OFFSETS = {\r\n      b: [16, 32, 17, 15],\r\n      w: [-16, -32, -17, -15]\r\n    };\r\n  \r\n    var PIECE_OFFSETS = {\r\n      n: [-18, -33, -31, -14,  18, 33, 31,  14],\r\n      b: [-17, -15,  17,  15],\r\n      r: [-16,   1,  16,  -1],\r\n      q: [-17, -16, -15,   1,  17, 16, 15,  -1],\r\n      k: [-17, -16, -15,   1,  17, 16, 15,  -1]\r\n    };\r\n  \r\n    var ATTACKS = [\r\n      20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\r\n       0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\r\n       0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\r\n       0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\r\n       0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\r\n      24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\r\n       0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\r\n       0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\r\n       0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\r\n       0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\r\n      20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\r\n    ];\r\n  \r\n    var RAYS = [\r\n       17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\r\n        0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\r\n        0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\r\n        0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\r\n        0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\r\n        1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\r\n        0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\r\n        0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\r\n        0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\r\n        0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\r\n      -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\r\n    ];\r\n  \r\n    var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 };\r\n  \r\n    var FLAGS = {\r\n      NORMAL: 'n',\r\n      CAPTURE: 'c',\r\n      BIG_PAWN: 'b',\r\n      EP_CAPTURE: 'e',\r\n      PROMOTION: 'p',\r\n      KSIDE_CASTLE: 'k',\r\n      QSIDE_CASTLE: 'q'\r\n    };\r\n  \r\n    var BITS = {\r\n      NORMAL: 1,\r\n      CAPTURE: 2,\r\n      BIG_PAWN: 4,\r\n      EP_CAPTURE: 8,\r\n      PROMOTION: 16,\r\n      KSIDE_CASTLE: 32,\r\n      QSIDE_CASTLE: 64\r\n    };\r\n  \r\n    var RANK_1 = 7;\r\n    var RANK_2 = 6;\r\n    var RANK_3 = 5;\r\n    var RANK_4 = 4;\r\n    var RANK_5 = 3;\r\n    var RANK_6 = 2;\r\n    var RANK_7 = 1;\r\n    var RANK_8 = 0;\r\n  \r\n    var SQUARES = {\r\n      a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\r\n      a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\r\n      a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\r\n      a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\r\n      a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\r\n      a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\r\n      a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\r\n      a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\r\n    };\r\n  \r\n    var ROOKS = {\r\n      w: [{square: SQUARES.a1, flag: BITS.QSIDE_CASTLE},\r\n          {square: SQUARES.h1, flag: BITS.KSIDE_CASTLE}],\r\n      b: [{square: SQUARES.a8, flag: BITS.QSIDE_CASTLE},\r\n          {square: SQUARES.h8, flag: BITS.KSIDE_CASTLE}]\r\n    };\r\n  \r\n    var board = new Array(128);\r\n    var kings = {w: EMPTY, b: EMPTY};\r\n    var turn = WHITE;\r\n    var castling = {w: 0, b: 0};\r\n    var ep_square = EMPTY;\r\n    var half_moves = 0;\r\n    var move_number = 1;\r\n    var history = [];\r\n    var header = {};\r\n  \r\n    /* if the user passes in a fen string, load it, else default to\r\n     * starting position\r\n     */\r\n    if (typeof fen === 'undefined') {\r\n      load(DEFAULT_POSITION);\r\n    } else {\r\n      load(fen);\r\n    }\r\n  \r\n    function clear() {\r\n      board = new Array(128);\r\n      kings = {w: EMPTY, b: EMPTY};\r\n      turn = WHITE;\r\n      castling = {w: 0, b: 0};\r\n      ep_square = EMPTY;\r\n      half_moves = 0;\r\n      move_number = 1;\r\n      history = [];\r\n      header = {};\r\n      update_setup(generate_fen());\r\n    }\r\n  \r\n    function reset() {\r\n      load(DEFAULT_POSITION);\r\n    }\r\n  \r\n    function load(fen) {\r\n      var tokens = fen.split(/\\s+/);\r\n      var position = tokens[0];\r\n      var square = 0;\r\n  \r\n      if (!validate_fen(fen).valid) {\r\n        return false;\r\n      }\r\n  \r\n      clear();\r\n  \r\n      for (var i = 0; i < position.length; i++) {\r\n        var piece = position.charAt(i);\r\n  \r\n        if (piece === '/') {\r\n          square += 8;\r\n        } else if (is_digit(piece)) {\r\n          square += parseInt(piece, 10);\r\n        } else {\r\n          var color = (piece < 'a') ? WHITE : BLACK;\r\n          put({type: piece.toLowerCase(), color: color}, algebraic(square));\r\n          square++;\r\n        }\r\n      }\r\n  \r\n      turn = tokens[1];\r\n  \r\n      if (tokens[2].indexOf('K') > -1) {\r\n        castling.w |= BITS.KSIDE_CASTLE;\r\n      }\r\n      if (tokens[2].indexOf('Q') > -1) {\r\n        castling.w |= BITS.QSIDE_CASTLE;\r\n      }\r\n      if (tokens[2].indexOf('k') > -1) {\r\n        castling.b |= BITS.KSIDE_CASTLE;\r\n      }\r\n      if (tokens[2].indexOf('q') > -1) {\r\n        castling.b |= BITS.QSIDE_CASTLE;\r\n      }\r\n  \r\n      ep_square = (tokens[3] === '-') ? EMPTY : SQUARES[tokens[3]];\r\n      half_moves = parseInt(tokens[4], 10);\r\n      move_number = parseInt(tokens[5], 10);\r\n  \r\n      update_setup(generate_fen());\r\n  \r\n      return true;\r\n    }\r\n  \r\n    /* TODO: this function is pretty much crap - it validates structure but\r\n     * completely ignores content (e.g. doesn't verify that each side has a king)\r\n     * ... we should rewrite this, and ditch the silly error_number field while\r\n     * we're at it\r\n     */\r\n    function validate_fen(fen) {\r\n      var errors = {\r\n         0: 'No errors.',\r\n         1: 'FEN string must contain six space-delimited fields.',\r\n         2: '6th field (move number) must be a positive integer.',\r\n         3: '5th field (half move counter) must be a non-negative integer.',\r\n         4: '4th field (en-passant square) is invalid.',\r\n         5: '3rd field (castling availability) is invalid.',\r\n         6: '2nd field (side to move) is invalid.',\r\n         7: '1st field (piece positions) does not contain 8 \\'/\\'-delimited rows.',\r\n         8: '1st field (piece positions) is invalid [consecutive numbers].',\r\n         9: '1st field (piece positions) is invalid [invalid piece].',\r\n        10: '1st field (piece positions) is invalid [row too large].',\r\n        11: 'Illegal en-passant square',\r\n      };\r\n  \r\n      /* 1st criterion: 6 space-seperated fields? */\r\n      var tokens = fen.split(/\\s+/);\r\n      if (tokens.length !== 6) {\r\n        return {valid: false, error_number: 1, error: errors[1]};\r\n      }\r\n  \r\n      /* 2nd criterion: move number field is a integer value > 0? */\r\n      if (isNaN(tokens[5]) || (parseInt(tokens[5], 10) <= 0)) {\r\n        return {valid: false, error_number: 2, error: errors[2]};\r\n      }\r\n  \r\n      /* 3rd criterion: half move counter is an integer >= 0? */\r\n      if (isNaN(tokens[4]) || (parseInt(tokens[4], 10) < 0)) {\r\n        return {valid: false, error_number: 3, error: errors[3]};\r\n      }\r\n  \r\n      /* 4th criterion: 4th field is a valid e.p.-string? */\r\n      if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\r\n        return {valid: false, error_number: 4, error: errors[4]};\r\n      }\r\n  \r\n      /* 5th criterion: 3th field is a valid castle-string? */\r\n      if( !/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\r\n        return {valid: false, error_number: 5, error: errors[5]};\r\n      }\r\n  \r\n      /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\r\n      if (!/^(w|b)$/.test(tokens[1])) {\r\n        return {valid: false, error_number: 6, error: errors[6]};\r\n      }\r\n  \r\n      /* 7th criterion: 1st field contains 8 rows? */\r\n      var rows = tokens[0].split('/');\r\n      if (rows.length !== 8) {\r\n        return {valid: false, error_number: 7, error: errors[7]};\r\n      }\r\n  \r\n      /* 8th criterion: every row is valid? */\r\n      for (var i = 0; i < rows.length; i++) {\r\n        /* check for right sum of fields AND not two numbers in succession */\r\n        var sum_fields = 0;\r\n        var previous_was_number = false;\r\n  \r\n        for (var k = 0; k < rows[i].length; k++) {\r\n          if (!isNaN(rows[i][k])) {\r\n            if (previous_was_number) {\r\n              return {valid: false, error_number: 8, error: errors[8]};\r\n            }\r\n            sum_fields += parseInt(rows[i][k], 10);\r\n            previous_was_number = true;\r\n          } else {\r\n            if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\r\n              return {valid: false, error_number: 9, error: errors[9]};\r\n            }\r\n            sum_fields += 1;\r\n            previous_was_number = false;\r\n          }\r\n        }\r\n        if (sum_fields !== 8) {\r\n          return {valid: false, error_number: 10, error: errors[10]};\r\n        }\r\n      }\r\n  \r\n      if ((tokens[3][1] == '3' && tokens[1] == 'w') ||\r\n          (tokens[3][1] == '6' && tokens[1] == 'b')) {\r\n            return {valid: false, error_number: 11, error: errors[11]};\r\n      }\r\n  \r\n      /* everything's okay! */\r\n      return {valid: true, error_number: 0, error: errors[0]};\r\n    }\r\n  \r\n    function generate_fen() {\r\n      var empty = 0;\r\n      var fen = '';\r\n  \r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        if (board[i] == null) {\r\n          empty++;\r\n        } else {\r\n          if (empty > 0) {\r\n            fen += empty;\r\n            empty = 0;\r\n          }\r\n          var color = board[i].color;\r\n          var piece = board[i].type;\r\n  \r\n          fen += (color === WHITE) ?\r\n                   piece.toUpperCase() : piece.toLowerCase();\r\n        }\r\n  \r\n        if ((i + 1) & 0x88) {\r\n          if (empty > 0) {\r\n            fen += empty;\r\n          }\r\n  \r\n          if (i !== SQUARES.h1) {\r\n            fen += '/';\r\n          }\r\n  \r\n          empty = 0;\r\n          i += 8;\r\n        }\r\n      }\r\n  \r\n      var cflags = '';\r\n      if (castling[WHITE] & BITS.KSIDE_CASTLE) { cflags += 'K'; }\r\n      if (castling[WHITE] & BITS.QSIDE_CASTLE) { cflags += 'Q'; }\r\n      if (castling[BLACK] & BITS.KSIDE_CASTLE) { cflags += 'k'; }\r\n      if (castling[BLACK] & BITS.QSIDE_CASTLE) { cflags += 'q'; }\r\n  \r\n      /* do we have an empty castling flag? */\r\n      cflags = cflags || '-';\r\n      var epflags = (ep_square === EMPTY) ? '-' : algebraic(ep_square);\r\n  \r\n      return [fen, turn, cflags, epflags, half_moves, move_number].join(' ');\r\n    }\r\n  \r\n    function set_header(args) {\r\n      for (var i = 0; i < args.length; i += 2) {\r\n        if (typeof args[i] === 'string' &&\r\n            typeof args[i + 1] === 'string') {\r\n          header[args[i]] = args[i + 1];\r\n        }\r\n      }\r\n      return header;\r\n    }\r\n  \r\n    /* called when the initial board setup is changed with put() or remove().\r\n     * modifies the SetUp and FEN properties of the header object.  if the FEN is\r\n     * equal to the default position, the SetUp and FEN are deleted\r\n     * the setup is only updated if history.length is zero, ie moves haven't been\r\n     * made.\r\n     */\r\n    function update_setup(fen) {\r\n      if (history.length > 0) return;\r\n  \r\n      if (fen !== DEFAULT_POSITION) {\r\n        header['SetUp'] = '1';\r\n        header['FEN'] = fen;\r\n      } else {\r\n        delete header['SetUp'];\r\n        delete header['FEN'];\r\n      }\r\n    }\r\n  \r\n    function get(square) {\r\n      var piece = board[SQUARES[square]];\r\n      return (piece) ? {type: piece.type, color: piece.color} : null;\r\n    }\r\n  \r\n    function put(piece, square) {\r\n      /* check for valid piece object */\r\n      if (!('type' in piece && 'color' in piece)) {\r\n        return false;\r\n      }\r\n  \r\n      /* check for piece */\r\n      if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\r\n        return false;\r\n      }\r\n  \r\n      /* check for valid square */\r\n      if (!(square in SQUARES)) {\r\n        return false;\r\n      }\r\n  \r\n      var sq = SQUARES[square];\r\n  \r\n      /* don't let the user place more than one king */\r\n      if (piece.type == KING &&\r\n          !(kings[piece.color] == EMPTY || kings[piece.color] == sq)) {\r\n        return false;\r\n      }\r\n  \r\n      board[sq] = {type: piece.type, color: piece.color};\r\n      if (piece.type === KING) {\r\n        kings[piece.color] = sq;\r\n      }\r\n  \r\n      update_setup(generate_fen());\r\n  \r\n      return true;\r\n    }\r\n  \r\n    function remove(square) {\r\n      var piece = get(square);\r\n      board[SQUARES[square]] = null;\r\n      if (piece && piece.type === KING) {\r\n        kings[piece.color] = EMPTY;\r\n      }\r\n  \r\n      update_setup(generate_fen());\r\n  \r\n      return piece;\r\n    }\r\n  \r\n    function build_move(board, from, to, flags, promotion) {\r\n      var move = {\r\n        color: turn,\r\n        from: from,\r\n        to: to,\r\n        flags: flags,\r\n        piece: board[from].type\r\n      };\r\n  \r\n      if (promotion) {\r\n        move.flags |= BITS.PROMOTION;\r\n        move.promotion = promotion;\r\n      }\r\n  \r\n      if (board[to]) {\r\n        move.captured = board[to].type;\r\n      } else if (flags & BITS.EP_CAPTURE) {\r\n          move.captured = PAWN;\r\n      }\r\n      return move;\r\n    }\r\n  \r\n    function generate_moves(options) {\r\n      function add_move(board, moves, from, to, flags) {\r\n        /* if pawn promotion */\r\n        if (board[from].type === PAWN &&\r\n           (rank(to) === RANK_8 || rank(to) === RANK_1)) {\r\n            var pieces = [QUEEN, ROOK, BISHOP, KNIGHT];\r\n            for (var i = 0, len = pieces.length; i < len; i++) {\r\n              moves.push(build_move(board, from, to, flags, pieces[i]));\r\n            }\r\n        } else {\r\n         moves.push(build_move(board, from, to, flags));\r\n        }\r\n      }\r\n  \r\n      var moves = [];\r\n      var us = turn;\r\n      var them = swap_color(us);\r\n      var second_rank = {b: RANK_7, w: RANK_2};\r\n  \r\n      var first_sq = SQUARES.a8;\r\n      var last_sq = SQUARES.h1;\r\n      var single_square = false;\r\n  \r\n      /* do we want legal moves? */\r\n      var legal = (typeof options !== 'undefined' && 'legal' in options) ?\r\n                  options.legal : true;\r\n  \r\n      /* are we generating moves for a single square? */\r\n      if (typeof options !== 'undefined' && 'square' in options) {\r\n        if (options.square in SQUARES) {\r\n          first_sq = last_sq = SQUARES[options.square];\r\n          single_square = true;\r\n        } else {\r\n          /* invalid square */\r\n          return [];\r\n        }\r\n      }\r\n  \r\n      for (var i = first_sq; i <= last_sq; i++) {\r\n        /* did we run off the end of the board */\r\n        if (i & 0x88) { i += 7; continue; }\r\n  \r\n        var piece = board[i];\r\n        if (piece == null || piece.color !== us) {\r\n          continue;\r\n        }\r\n  \r\n        if (piece.type === PAWN) {\r\n          /* single square, non-capturing */\r\n          var square = i + PAWN_OFFSETS[us][0];\r\n          if (board[square] == null) {\r\n              add_move(board, moves, i, square, BITS.NORMAL);\r\n  \r\n            /* double square */\r\n            var square = i + PAWN_OFFSETS[us][1];\r\n            if (second_rank[us] === rank(i) && board[square] == null) {\r\n              add_move(board, moves, i, square, BITS.BIG_PAWN);\r\n            }\r\n          }\r\n  \r\n          /* pawn captures */\r\n          for (j = 2; j < 4; j++) {\r\n            var square = i + PAWN_OFFSETS[us][j];\r\n            if (square & 0x88) continue;\r\n  \r\n            if (board[square] != null &&\r\n                board[square].color === them) {\r\n                add_move(board, moves, i, square, BITS.CAPTURE);\r\n            } else if (square === ep_square) {\r\n                add_move(board, moves, i, ep_square, BITS.EP_CAPTURE);\r\n            }\r\n          }\r\n        } else {\r\n          for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\r\n            var offset = PIECE_OFFSETS[piece.type][j];\r\n            var square = i;\r\n  \r\n            while (true) {\r\n              square += offset;\r\n              if (square & 0x88) break;\r\n  \r\n              if (board[square] == null) {\r\n                add_move(board, moves, i, square, BITS.NORMAL);\r\n              } else {\r\n                if (board[square].color === us) break;\r\n                add_move(board, moves, i, square, BITS.CAPTURE);\r\n                break;\r\n              }\r\n  \r\n              /* break, if knight or king */\r\n              if (piece.type === 'n' || piece.type === 'k') break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* check for castling if: a) we're generating all moves, or b) we're doing\r\n       * single square move generation on the king's square\r\n       */\r\n      if ((!single_square) || last_sq === kings[us]) {\r\n        /* king-side castling */\r\n        if (castling[us] & BITS.KSIDE_CASTLE) {\r\n          var castling_from = kings[us];\r\n          var castling_to = castling_from + 2;\r\n  \r\n          if (board[castling_from + 1] == null &&\r\n              board[castling_to]       == null &&\r\n              !attacked(them, kings[us]) &&\r\n              !attacked(them, castling_from + 1) &&\r\n              !attacked(them, castling_to)) {\r\n            add_move(board, moves, kings[us] , castling_to,\r\n                     BITS.KSIDE_CASTLE);\r\n          }\r\n        }\r\n  \r\n        /* queen-side castling */\r\n        if (castling[us] & BITS.QSIDE_CASTLE) {\r\n          var castling_from = kings[us];\r\n          var castling_to = castling_from - 2;\r\n  \r\n          if (board[castling_from - 1] == null &&\r\n              board[castling_from - 2] == null &&\r\n              board[castling_from - 3] == null &&\r\n              !attacked(them, kings[us]) &&\r\n              !attacked(them, castling_from - 1) &&\r\n              !attacked(them, castling_to)) {\r\n            add_move(board, moves, kings[us], castling_to,\r\n                     BITS.QSIDE_CASTLE);\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* return all pseudo-legal moves (this includes moves that allow the king\r\n       * to be captured)\r\n       */\r\n      if (!legal) {\r\n        return moves;\r\n      }\r\n  \r\n      /* filter out illegal moves */\r\n      var legal_moves = [];\r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        make_move(moves[i]);\r\n        if (!king_attacked(us)) {\r\n          legal_moves.push(moves[i]);\r\n        }\r\n        undo_move();\r\n      }\r\n  \r\n      return legal_moves;\r\n    }\r\n  \r\n    /* convert a move from 0x88 coordinates to Standard Algebraic Notation\r\n     * (SAN)\r\n     *\r\n     * @param {boolean} sloppy Use the sloppy SAN generator to work around over\r\n     * disambiguation bugs in Fritz and Chessbase.  See below:\r\n     *\r\n     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\r\n     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\r\n     * 4. ... Ne7 is technically the valid SAN\r\n     */\r\n    function move_to_san(move, sloppy) {\r\n  \r\n      var output = '';\r\n  \r\n      if (move.flags & BITS.KSIDE_CASTLE) {\r\n        output = 'O-O';\r\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\r\n        output = 'O-O-O';\r\n      } else {\r\n        var disambiguator = get_disambiguator(move, sloppy);\r\n  \r\n        if (move.piece !== PAWN) {\r\n          output += move.piece.toUpperCase() + disambiguator;\r\n        }\r\n  \r\n        if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\r\n          if (move.piece === PAWN) {\r\n            output += algebraic(move.from)[0];\r\n          }\r\n          output += 'x';\r\n        }\r\n  \r\n        output += algebraic(move.to);\r\n  \r\n        if (move.flags & BITS.PROMOTION) {\r\n          output += '=' + move.promotion.toUpperCase();\r\n        }\r\n      }\r\n  \r\n      make_move(move);\r\n      if (in_check()) {\r\n        if (in_checkmate()) {\r\n          output += '#';\r\n        } else {\r\n          output += '+';\r\n        }\r\n      }\r\n      undo_move();\r\n  \r\n      return output;\r\n    }\r\n  \r\n    // parses all of the decorators out of a SAN string\r\n    function stripped_san(move) {\r\n      return move.replace(/=/,'').replace(/[+#]?[?!]*$/,'');\r\n    }\r\n  \r\n    function attacked(color, square) {\r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        /* did we run off the end of the board */\r\n        if (i & 0x88) { i += 7; continue; }\r\n  \r\n        /* if empty square or wrong color */\r\n        if (board[i] == null || board[i].color !== color) continue;\r\n  \r\n        var piece = board[i];\r\n        var difference = i - square;\r\n        var index = difference + 119;\r\n  \r\n        if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {\r\n          if (piece.type === PAWN) {\r\n            if (difference > 0) {\r\n              if (piece.color === WHITE) return true;\r\n            } else {\r\n              if (piece.color === BLACK) return true;\r\n            }\r\n            continue;\r\n          }\r\n  \r\n          /* if the piece is a knight or a king */\r\n          if (piece.type === 'n' || piece.type === 'k') return true;\r\n  \r\n          var offset = RAYS[index];\r\n          var j = i + offset;\r\n  \r\n          var blocked = false;\r\n          while (j !== square) {\r\n            if (board[j] != null) { blocked = true; break; }\r\n            j += offset;\r\n          }\r\n  \r\n          if (!blocked) return true;\r\n        }\r\n      }\r\n  \r\n      return false;\r\n    }\r\n  \r\n    function king_attacked(color) {\r\n      return attacked(swap_color(color), kings[color]);\r\n    }\r\n  \r\n    function in_check() {\r\n      return king_attacked(turn);\r\n    }\r\n  \r\n    function in_checkmate() {\r\n      return in_check() && generate_moves().length === 0;\r\n    }\r\n  \r\n    function in_stalemate() {\r\n      return !in_check() && generate_moves().length === 0;\r\n    }\r\n  \r\n    function insufficient_material() {\r\n      var pieces = {};\r\n      var bishops = [];\r\n      var num_pieces = 0;\r\n      var sq_color = 0;\r\n  \r\n      for (var i = SQUARES.a8; i<= SQUARES.h1; i++) {\r\n        sq_color = (sq_color + 1) % 2;\r\n        if (i & 0x88) { i += 7; continue; }\r\n  \r\n        var piece = board[i];\r\n        if (piece) {\r\n          pieces[piece.type] = (piece.type in pieces) ?\r\n                                pieces[piece.type] + 1 : 1;\r\n          if (piece.type === BISHOP) {\r\n            bishops.push(sq_color);\r\n          }\r\n          num_pieces++;\r\n        }\r\n      }\r\n  \r\n      /* k vs. k */\r\n      if (num_pieces === 2) { return true; }\r\n  \r\n      /* k vs. kn .... or .... k vs. kb */\r\n      else if (num_pieces === 3 && (pieces[BISHOP] === 1 ||\r\n                                   pieces[KNIGHT] === 1)) { return true; }\r\n  \r\n      /* kb vs. kb where any number of bishops are all on the same color */\r\n      else if (num_pieces === pieces[BISHOP] + 2) {\r\n        var sum = 0;\r\n        var len = bishops.length;\r\n        for (var i = 0; i < len; i++) {\r\n          sum += bishops[i];\r\n        }\r\n        if (sum === 0 || sum === len) { return true; }\r\n      }\r\n  \r\n      return false;\r\n    }\r\n  \r\n    function in_threefold_repetition() {\r\n      /* TODO: while this function is fine for casual use, a better\r\n       * implementation would use a Zobrist key (instead of FEN). the\r\n       * Zobrist key would be maintained in the make_move/undo_move functions,\r\n       * avoiding the costly that we do below.\r\n       */\r\n      var moves = [];\r\n      var positions = {};\r\n      var repetition = false;\r\n  \r\n      while (true) {\r\n        var move = undo_move();\r\n        if (!move) break;\r\n        moves.push(move);\r\n      }\r\n  \r\n      while (true) {\r\n        /* remove the last two fields in the FEN string, they're not needed\r\n         * when checking for draw by rep */\r\n        var fen = generate_fen().split(' ').slice(0,4).join(' ');\r\n  \r\n        /* has the position occurred three or move times */\r\n        positions[fen] = (fen in positions) ? positions[fen] + 1 : 1;\r\n        if (positions[fen] >= 3) {\r\n          repetition = true;\r\n        }\r\n  \r\n        if (!moves.length) {\r\n          break;\r\n        }\r\n        make_move(moves.pop());\r\n      }\r\n  \r\n      return repetition;\r\n    }\r\n  \r\n    function push(move) {\r\n      history.push({\r\n        move: move,\r\n        kings: {b: kings.b, w: kings.w},\r\n        turn: turn,\r\n        castling: {b: castling.b, w: castling.w},\r\n        ep_square: ep_square,\r\n        half_moves: half_moves,\r\n        move_number: move_number\r\n      });\r\n    }\r\n  \r\n    function make_move(move) {\r\n      var us = turn;\r\n      var them = swap_color(us);\r\n      push(move);\r\n  \r\n      board[move.to] = board[move.from];\r\n      board[move.from] = null;\r\n  \r\n      /* if ep capture, remove the captured pawn */\r\n      if (move.flags & BITS.EP_CAPTURE) {\r\n        if (turn === BLACK) {\r\n          board[move.to - 16] = null;\r\n        } else {\r\n          board[move.to + 16] = null;\r\n        }\r\n      }\r\n  \r\n      /* if pawn promotion, replace with new piece */\r\n      if (move.flags & BITS.PROMOTION) {\r\n        board[move.to] = {type: move.promotion, color: us};\r\n      }\r\n  \r\n      /* if we moved the king */\r\n      if (board[move.to].type === KING) {\r\n        kings[board[move.to].color] = move.to;\r\n  \r\n        /* if we castled, move the rook next to the king */\r\n        if (move.flags & BITS.KSIDE_CASTLE) {\r\n          var castling_to = move.to - 1;\r\n          var castling_from = move.to + 1;\r\n          board[castling_to] = board[castling_from];\r\n          board[castling_from] = null;\r\n        } else if (move.flags & BITS.QSIDE_CASTLE) {\r\n          var castling_to = move.to + 1;\r\n          var castling_from = move.to - 2;\r\n          board[castling_to] = board[castling_from];\r\n          board[castling_from] = null;\r\n        }\r\n  \r\n        /* turn off castling */\r\n        castling[us] = '';\r\n      }\r\n  \r\n      /* turn off castling if we move a rook */\r\n      if (castling[us]) {\r\n        for (var i = 0, len = ROOKS[us].length; i < len; i++) {\r\n          if (move.from === ROOKS[us][i].square &&\r\n              castling[us] & ROOKS[us][i].flag) {\r\n            castling[us] ^= ROOKS[us][i].flag;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* turn off castling if we capture a rook */\r\n      if (castling[them]) {\r\n        for (var i = 0, len = ROOKS[them].length; i < len; i++) {\r\n          if (move.to === ROOKS[them][i].square &&\r\n              castling[them] & ROOKS[them][i].flag) {\r\n            castling[them] ^= ROOKS[them][i].flag;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* if big pawn move, update the en passant square */\r\n      if (move.flags & BITS.BIG_PAWN) {\r\n        if (turn === 'b') {\r\n          ep_square = move.to - 16;\r\n        } else {\r\n          ep_square = move.to + 16;\r\n        }\r\n      } else {\r\n        ep_square = EMPTY;\r\n      }\r\n  \r\n      /* reset the 50 move counter if a pawn is moved or a piece is captured */\r\n      if (move.piece === PAWN) {\r\n        half_moves = 0;\r\n      } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\r\n        half_moves = 0;\r\n      } else {\r\n        half_moves++;\r\n      }\r\n  \r\n      if (turn === BLACK) {\r\n        move_number++;\r\n      }\r\n      turn = swap_color(turn);\r\n    }\r\n  \r\n    function undo_move() {\r\n      var old = history.pop();\r\n      if (old == null) { return null; }\r\n  \r\n      var move = old.move;\r\n      kings = old.kings;\r\n      turn = old.turn;\r\n      castling = old.castling;\r\n      ep_square = old.ep_square;\r\n      half_moves = old.half_moves;\r\n      move_number = old.move_number;\r\n  \r\n      var us = turn;\r\n      var them = swap_color(turn);\r\n  \r\n      board[move.from] = board[move.to];\r\n      board[move.from].type = move.piece;  // to undo any promotions\r\n      board[move.to] = null;\r\n  \r\n      if (move.flags & BITS.CAPTURE) {\r\n        board[move.to] = {type: move.captured, color: them};\r\n      } else if (move.flags & BITS.EP_CAPTURE) {\r\n        var index;\r\n        if (us === BLACK) {\r\n          index = move.to - 16;\r\n        } else {\r\n          index = move.to + 16;\r\n        }\r\n        board[index] = {type: PAWN, color: them};\r\n      }\r\n  \r\n  \r\n      if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\r\n        var castling_to, castling_from;\r\n        if (move.flags & BITS.KSIDE_CASTLE) {\r\n          castling_to = move.to + 1;\r\n          castling_from = move.to - 1;\r\n        } else if (move.flags & BITS.QSIDE_CASTLE) {\r\n          castling_to = move.to - 2;\r\n          castling_from = move.to + 1;\r\n        }\r\n  \r\n        board[castling_to] = board[castling_from];\r\n        board[castling_from] = null;\r\n      }\r\n  \r\n      return move;\r\n    }\r\n  \r\n    /* this function is used to uniquely identify ambiguous moves */\r\n    function get_disambiguator(move, sloppy) {\r\n      var moves = generate_moves({legal: !sloppy});\r\n  \r\n      var from = move.from;\r\n      var to = move.to;\r\n      var piece = move.piece;\r\n  \r\n      var ambiguities = 0;\r\n      var same_rank = 0;\r\n      var same_file = 0;\r\n  \r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        var ambig_from = moves[i].from;\r\n        var ambig_to = moves[i].to;\r\n        var ambig_piece = moves[i].piece;\r\n  \r\n        /* if a move of the same piece type ends on the same to square, we'll\r\n         * need to add a disambiguator to the algebraic notation\r\n         */\r\n        if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\r\n          ambiguities++;\r\n  \r\n          if (rank(from) === rank(ambig_from)) {\r\n            same_rank++;\r\n          }\r\n  \r\n          if (file(from) === file(ambig_from)) {\r\n            same_file++;\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (ambiguities > 0) {\r\n        /* if there exists a similar moving piece on the same rank and file as\r\n         * the move in question, use the square as the disambiguator\r\n         */\r\n        if (same_rank > 0 && same_file > 0) {\r\n          return algebraic(from);\r\n        }\r\n        /* if the moving piece rests on the same file, use the rank symbol as the\r\n         * disambiguator\r\n         */\r\n        else if (same_file > 0) {\r\n          return algebraic(from).charAt(1);\r\n        }\r\n        /* else use the file symbol */\r\n        else {\r\n          return algebraic(from).charAt(0);\r\n        }\r\n      }\r\n  \r\n      return '';\r\n    }\r\n  \r\n    function ascii() {\r\n      var s = '   +------------------------+\\n';\r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        /* display the rank */\r\n        if (file(i) === 0) {\r\n          s += ' ' + '87654321'[rank(i)] + ' |';\r\n        }\r\n  \r\n        /* empty piece */\r\n        if (board[i] == null) {\r\n          s += ' . ';\r\n        } else {\r\n          var piece = board[i].type;\r\n          var color = board[i].color;\r\n          var symbol = (color === WHITE) ?\r\n                       piece.toUpperCase() : piece.toLowerCase();\r\n          s += ' ' + symbol + ' ';\r\n        }\r\n  \r\n        if ((i + 1) & 0x88) {\r\n          s += '|\\n';\r\n          i += 8;\r\n        }\r\n      }\r\n      s += '   +------------------------+\\n';\r\n      s += '     a  b  c  d  e  f  g  h\\n';\r\n  \r\n      return s;\r\n    }\r\n  \r\n    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\r\n    function move_from_san(move, sloppy) {\r\n      // strip off any move decorations: e.g Nf3+?!\r\n      var clean_move = stripped_san(move);\r\n  \r\n      // if we're using the sloppy parser run a regex to grab piece, to, and from\r\n      // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\r\n      if (sloppy) {\r\n        var matches = clean_move.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\r\n        if (matches) {\r\n          var piece = matches[1];\r\n          var from = matches[2];\r\n          var to = matches[3];\r\n          var promotion = matches[4];\r\n        }\r\n      }\r\n  \r\n      var moves = generate_moves();\r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        // try the strict parser first, then the sloppy parser if requested\r\n        // by the user\r\n        if ((clean_move === stripped_san(move_to_san(moves[i]))) ||\r\n            (sloppy && clean_move === stripped_san(move_to_san(moves[i], true)))) {\r\n          return moves[i];\r\n        } else {\r\n          if (matches &&\r\n              (!piece || piece.toLowerCase() == moves[i].piece) &&\r\n              SQUARES[from] == moves[i].from &&\r\n              SQUARES[to] == moves[i].to &&\r\n              (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\r\n            return moves[i];\r\n          }\r\n        }\r\n      }\r\n  \r\n      return null;\r\n    }\r\n  \r\n  \r\n    /*****************************************************************************\r\n     * UTILITY FUNCTIONS\r\n     ****************************************************************************/\r\n    function rank(i) {\r\n      return i >> 4;\r\n    }\r\n  \r\n    function file(i) {\r\n      return i & 15;\r\n    }\r\n  \r\n    function algebraic(i){\r\n      var f = file(i), r = rank(i);\r\n      return 'abcdefgh'.substring(f,f+1) + '87654321'.substring(r,r+1);\r\n    }\r\n  \r\n    function swap_color(c) {\r\n      return c === WHITE ? BLACK : WHITE;\r\n    }\r\n  \r\n    function is_digit(c) {\r\n      return '0123456789'.indexOf(c) !== -1;\r\n    }\r\n  \r\n    /* pretty = external move object */\r\n    function make_pretty(ugly_move) {\r\n      var move = clone(ugly_move);\r\n      move.san = move_to_san(move, false);\r\n      move.to = algebraic(move.to);\r\n      move.from = algebraic(move.from);\r\n  \r\n      var flags = '';\r\n  \r\n      for (var flag in BITS) {\r\n        if (BITS[flag] & move.flags) {\r\n          flags += FLAGS[flag];\r\n        }\r\n      }\r\n      move.flags = flags;\r\n  \r\n      return move;\r\n    }\r\n  \r\n    function clone(obj) {\r\n      var dupe = (obj instanceof Array) ? [] : {};\r\n  \r\n      for (var property in obj) {\r\n        if (typeof property === 'object') {\r\n          dupe[property] = clone(obj[property]);\r\n        } else {\r\n          dupe[property] = obj[property];\r\n        }\r\n      }\r\n  \r\n      return dupe;\r\n    }\r\n  \r\n    function trim(str) {\r\n      return str.replace(/^\\s+|\\s+$/g, '');\r\n    }\r\n  \r\n    /*****************************************************************************\r\n     * DEBUGGING UTILITIES\r\n     ****************************************************************************/\r\n    function perft(depth) {\r\n      var moves = generate_moves({legal: false});\r\n      var nodes = 0;\r\n      var color = turn;\r\n  \r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        make_move(moves[i]);\r\n        if (!king_attacked(color)) {\r\n          if (depth - 1 > 0) {\r\n            var child_nodes = perft(depth - 1);\r\n            nodes += child_nodes;\r\n          } else {\r\n            nodes++;\r\n          }\r\n        }\r\n        undo_move();\r\n      }\r\n  \r\n      return nodes;\r\n    }\r\n  \r\n    return {\r\n      /***************************************************************************\r\n       * PUBLIC CONSTANTS (is there a better way to do this?)\r\n       **************************************************************************/\r\n      WHITE: WHITE,\r\n      BLACK: BLACK,\r\n      PAWN: PAWN,\r\n      KNIGHT: KNIGHT,\r\n      BISHOP: BISHOP,\r\n      ROOK: ROOK,\r\n      QUEEN: QUEEN,\r\n      KING: KING,\r\n      SQUARES: (function() {\r\n                  /* from the ECMA-262 spec (section 12.6.4):\r\n                   * \"The mechanics of enumerating the properties ... is\r\n                   * implementation dependent\"\r\n                   * so: for (var sq in SQUARES) { keys.push(sq); } might not be\r\n                   * ordered correctly\r\n                   */\r\n                  var keys = [];\r\n                  for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n                    if (i & 0x88) { i += 7; continue; }\r\n                    keys.push(algebraic(i));\r\n                  }\r\n                  return keys;\r\n                })(),\r\n      FLAGS: FLAGS,\r\n  \r\n      /***************************************************************************\r\n       * PUBLIC API\r\n       **************************************************************************/\r\n      load: function(fen) {\r\n        return load(fen);\r\n      },\r\n  \r\n      reset: function() {\r\n        return reset();\r\n      },\r\n  \r\n      moves: function(options) {\r\n        /* The internal representation of a chess move is in 0x88 format, and\r\n         * not meant to be human-readable.  The code below converts the 0x88\r\n         * square coordinates to algebraic coordinates.  It also prunes an\r\n         * unnecessary move keys resulting from a verbose call.\r\n         */\r\n  \r\n        var ugly_moves = generate_moves(options);\r\n        var moves = [];\r\n  \r\n        for (var i = 0, len = ugly_moves.length; i < len; i++) {\r\n  \r\n          /* does the user want a full move object (most likely not), or just\r\n           * SAN\r\n           */\r\n          if (typeof options !== 'undefined' && 'verbose' in options &&\r\n              options.verbose) {\r\n            moves.push(make_pretty(ugly_moves[i]));\r\n          } else {\r\n            moves.push(move_to_san(ugly_moves[i], false));\r\n          }\r\n        }\r\n  \r\n        return moves;\r\n      },\r\n  \r\n      in_check: function() {\r\n        return in_check();\r\n      },\r\n  \r\n      in_checkmate: function() {\r\n        return in_checkmate();\r\n      },\r\n  \r\n      in_stalemate: function() {\r\n        return in_stalemate();\r\n      },\r\n  \r\n      in_draw: function() {\r\n        return half_moves >= 100 ||\r\n               in_stalemate() ||\r\n               insufficient_material() ||\r\n               in_threefold_repetition();\r\n      },\r\n  \r\n      insufficient_material: function() {\r\n        return insufficient_material();\r\n      },\r\n  \r\n      in_threefold_repetition: function() {\r\n        return in_threefold_repetition();\r\n      },\r\n  \r\n      game_over: function() {\r\n        return half_moves >= 100 ||\r\n               in_checkmate() ||\r\n               in_stalemate() ||\r\n               insufficient_material() ||\r\n               in_threefold_repetition();\r\n      },\r\n  \r\n      validate_fen: function(fen) {\r\n        return validate_fen(fen);\r\n      },\r\n  \r\n      fen: function() {\r\n        return generate_fen();\r\n      },\r\n  \r\n      pgn: function(options) {\r\n        /* using the specification from http://www.chessclub.com/help/PGN-spec\r\n         * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\r\n         */\r\n        var newline = (typeof options === 'object' &&\r\n                       typeof options.newline_char === 'string') ?\r\n                       options.newline_char : '\\n';\r\n        var max_width = (typeof options === 'object' &&\r\n                         typeof options.max_width === 'number') ?\r\n                         options.max_width : 0;\r\n        var result = [];\r\n        var header_exists = false;\r\n  \r\n        /* add the PGN header headerrmation */\r\n        for (var i in header) {\r\n          /* TODO: order of enumerated properties in header object is not\r\n           * guaranteed, see ECMA-262 spec (section 12.6.4)\r\n           */\r\n          result.push('[' + i + ' \\\"' + header[i] + '\\\"]' + newline);\r\n          header_exists = true;\r\n        }\r\n  \r\n        if (header_exists && history.length) {\r\n          result.push(newline);\r\n        }\r\n  \r\n        /* pop all of history onto reversed_history */\r\n        var reversed_history = [];\r\n        while (history.length > 0) {\r\n          reversed_history.push(undo_move());\r\n        }\r\n  \r\n        var moves = [];\r\n        var move_string = '';\r\n  \r\n        /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\r\n        while (reversed_history.length > 0) {\r\n          var move = reversed_history.pop();\r\n  \r\n          /* if the position started with black to move, start PGN with 1. ... */\r\n          if (!history.length && move.color === 'b') {\r\n            move_string = move_number + '. ...';\r\n          } else if (move.color === 'w') {\r\n            /* store the previous generated move_string if we have one */\r\n            if (move_string.length) {\r\n              moves.push(move_string);\r\n            }\r\n            move_string = move_number + '.';\r\n          }\r\n  \r\n          move_string = move_string + ' ' + move_to_san(move, false);\r\n          make_move(move);\r\n        }\r\n  \r\n        /* are there any other leftover moves? */\r\n        if (move_string.length) {\r\n          moves.push(move_string);\r\n        }\r\n  \r\n        /* is there a result? */\r\n        if (typeof header.Result !== 'undefined') {\r\n          moves.push(header.Result);\r\n        }\r\n  \r\n        /* history should be back to what is was before we started generating PGN,\r\n         * so join together moves\r\n         */\r\n        if (max_width === 0) {\r\n          return result.join('') + moves.join(' ');\r\n        }\r\n  \r\n        /* wrap the PGN output at max_width */\r\n        var current_width = 0;\r\n        for (var i = 0; i < moves.length; i++) {\r\n          /* if the current move will push past max_width */\r\n          if (current_width + moves[i].length > max_width && i !== 0) {\r\n  \r\n            /* don't end the line with whitespace */\r\n            if (result[result.length - 1] === ' ') {\r\n              result.pop();\r\n            }\r\n  \r\n            result.push(newline);\r\n            current_width = 0;\r\n          } else if (i !== 0) {\r\n            result.push(' ');\r\n            current_width++;\r\n          }\r\n          result.push(moves[i]);\r\n          current_width += moves[i].length;\r\n        }\r\n  \r\n        return result.join('');\r\n      },\r\n  \r\n      load_pgn: function(pgn, options) {\r\n        // allow the user to specify the sloppy move parser to work around over\r\n        // disambiguation bugs in Fritz and Chessbase\r\n        var sloppy = (typeof options !== 'undefined' && 'sloppy' in options) ?\r\n                      options.sloppy : false;\r\n  \r\n        function mask(str) {\r\n          return str.replace(/\\\\/g, '\\\\');\r\n        }\r\n  \r\n        function has_keys(object) {\r\n          for (var key in object) {\r\n            return true;\r\n          }\r\n          return false;\r\n        }\r\n  \r\n        function parse_pgn_header(header, options) {\r\n          var newline_char = (typeof options === 'object' &&\r\n                              typeof options.newline_char === 'string') ?\r\n                              options.newline_char : '\\r?\\n';\r\n          var header_obj = {};\r\n          var headers = header.split(new RegExp(mask(newline_char)));\r\n          var key = '';\r\n          var value = '';\r\n  \r\n          for (var i = 0; i < headers.length; i++) {\r\n            key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1');\r\n            value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\]$/, '$1');\r\n            if (trim(key).length > 0) {\r\n              header_obj[key] = value;\r\n            }\r\n          }\r\n  \r\n          return header_obj;\r\n        }\r\n  \r\n        var newline_char = (typeof options === 'object' &&\r\n                            typeof options.newline_char === 'string') ?\r\n                            options.newline_char : '\\r?\\n';\r\n        var regex = new RegExp('^(\\\\[(.|' + mask(newline_char) + ')*\\\\])' +\r\n                               '(' + mask(newline_char) + ')*' +\r\n                               '1.(' + mask(newline_char) + '|.)*$', 'g');\r\n  \r\n        /* get header part of the PGN file */\r\n        var header_string = pgn.replace(regex, '$1');\r\n  \r\n        /* no info part given, begins with moves */\r\n        if (header_string[0] !== '[') {\r\n          header_string = '';\r\n        }\r\n  \r\n        reset();\r\n  \r\n        /* parse PGN header */\r\n        var headers = parse_pgn_header(header_string, options);\r\n        for (var key in headers) {\r\n          set_header([key, headers[key]]);\r\n        }\r\n  \r\n        /* load the starting position indicated by [Setup '1'] and\r\n        * [FEN position] */\r\n        if (headers['SetUp'] === '1') {\r\n            if (!(('FEN' in headers) && load(headers['FEN']))) {\r\n              return false;\r\n            }\r\n        }\r\n  \r\n        /* delete header to get the moves */\r\n        var ms = pgn.replace(header_string, '').replace(new RegExp(mask(newline_char), 'g'), ' ');\r\n  \r\n        /* delete comments */\r\n        ms = ms.replace(/(\\{[^}]+\\})+?/g, '');\r\n  \r\n        /* delete recursive annotation variations */\r\n        var rav_regex = /(\\([^\\(\\)]+\\))+?/g\r\n        while (rav_regex.test(ms)) {\r\n          ms = ms.replace(rav_regex, '');\r\n        }\r\n  \r\n        /* delete move numbers */\r\n        ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\r\n  \r\n        /* delete ... indicating black to move */\r\n        ms = ms.replace(/\\.\\.\\./g, '');\r\n  \r\n        /* delete numeric annotation glyphs */\r\n        ms = ms.replace(/\\$\\d+/g, '');\r\n  \r\n        /* trim and get array of moves */\r\n        var moves = trim(ms).split(new RegExp(/\\s+/));\r\n  \r\n        /* delete empty entries */\r\n        moves = moves.join(',').replace(/,,+/g, ',').split(',');\r\n        var move = '';\r\n  \r\n        for (var half_move = 0; half_move < moves.length - 1; half_move++) {\r\n          move = move_from_san(moves[half_move], sloppy);\r\n  \r\n          /* move not possible! (don't clear the board to examine to show the\r\n           * latest valid position)\r\n           */\r\n          if (move == null) {\r\n            return false;\r\n          } else {\r\n            make_move(move);\r\n          }\r\n        }\r\n  \r\n        /* examine last move */\r\n        move = moves[moves.length - 1];\r\n        if (POSSIBLE_RESULTS.indexOf(move) > -1) {\r\n          if (has_keys(header) && typeof header.Result === 'undefined') {\r\n            set_header(['Result', move]);\r\n          }\r\n        }\r\n        else {\r\n          move = move_from_san(move, sloppy);\r\n          if (move == null) {\r\n            return false;\r\n          } else {\r\n            make_move(move);\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n  \r\n      header: function() {\r\n        return set_header(arguments);\r\n      },\r\n  \r\n      ascii: function() {\r\n        return ascii();\r\n      },\r\n  \r\n      turn: function() {\r\n        return turn;\r\n      },\r\n  \r\n      move: function(move, options) {\r\n        /* The move function can be called with in the following parameters:\r\n         *\r\n         * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\r\n         *\r\n         * .move({ from: 'h7', <- where the 'move' is a move object (additional\r\n         *         to :'h8',      fields are ignored)\r\n         *         promotion: 'q',\r\n         *      })\r\n         */\r\n  \r\n        // allow the user to specify the sloppy move parser to work around over\r\n        // disambiguation bugs in Fritz and Chessbase\r\n        var sloppy = (typeof options !== 'undefined' && 'sloppy' in options) ?\r\n                      options.sloppy : false;\r\n  \r\n        var move_obj = null;\r\n  \r\n        if (typeof move === 'string') {\r\n          move_obj = move_from_san(move, sloppy);\r\n        } else if (typeof move === 'object') {\r\n          var moves = generate_moves();\r\n  \r\n          /* convert the pretty move object to an ugly move object */\r\n          for (var i = 0, len = moves.length; i < len; i++) {\r\n            if (move.from === algebraic(moves[i].from) &&\r\n                move.to === algebraic(moves[i].to) &&\r\n                (!('promotion' in moves[i]) ||\r\n                move.promotion === moves[i].promotion)) {\r\n              move_obj = moves[i];\r\n              break;\r\n            }\r\n          }\r\n        }\r\n  \r\n        /* failed to find move */\r\n        if (!move_obj) {\r\n          return null;\r\n        }\r\n  \r\n        /* need to make a copy of move because we can't generate SAN after the\r\n         * move is made\r\n         */\r\n        var pretty_move = make_pretty(move_obj);\r\n  \r\n        make_move(move_obj);\r\n  \r\n        return pretty_move;\r\n      },\r\n  \r\n      undo: function() {\r\n        var move = undo_move();\r\n        return (move) ? make_pretty(move) : null;\r\n      },\r\n  \r\n      clear: function() {\r\n        return clear();\r\n      },\r\n  \r\n      put: function(piece, square) {\r\n        return put(piece, square);\r\n      },\r\n  \r\n      get: function(square) {\r\n        return get(square);\r\n      },\r\n  \r\n      remove: function(square) {\r\n        return remove(square);\r\n      },\r\n  \r\n      perft: function(depth) {\r\n        return perft(depth);\r\n      },\r\n  \r\n      square_color: function(square) {\r\n        if (square in SQUARES) {\r\n          var sq_0x88 = SQUARES[square];\r\n          return ((rank(sq_0x88) + file(sq_0x88)) % 2 === 0) ? 'light' : 'dark';\r\n        }\r\n  \r\n        return null;\r\n      },\r\n  \r\n      history: function(options) {\r\n        var reversed_history = [];\r\n        var move_history = [];\r\n        var verbose = (typeof options !== 'undefined' && 'verbose' in options &&\r\n                       options.verbose);\r\n  \r\n        while (history.length > 0) {\r\n          reversed_history.push(undo_move());\r\n        }\r\n  \r\n        while (reversed_history.length > 0) {\r\n          var move = reversed_history.pop();\r\n          if (verbose) {\r\n            move_history.push(make_pretty(move));\r\n          } else {\r\n            move_history.push(move_to_san(move));\r\n          }\r\n          make_move(move);\r\n        }\r\n  \r\n        return move_history;\r\n      },\r\n\r\n      movenotation: function(move){\r\n          return move_to_san(move);\r\n      },\r\n  \r\n    };\r\n  };\r\n  \r\n  /* export Chess object if using node or any other CommonJS compatible\r\n   * environment */\r\n  if (typeof exports !== 'undefined') exports.Chess = Chess;\r\n  /* export Chess object for any RequireJS compatible environment */\r\n  if (typeof define !== 'undefined') define( function () { return Chess;  });","import { JwtAuthenticationService } from './jwtAuthenticationService';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n\r\n    private tokenDecoder: JwtHelperService;\r\n    private authService: JwtAuthenticationService;\r\n\r\n    constructor(private router: Router, authService : JwtAuthenticationService) { \r\n        this.tokenDecoder = new JwtHelperService();\r\n        this.authService = authService;\r\n\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        const user = localStorage.getItem('currentUser');\r\n        if (user) {\r\n            let token:string = JSON.parse(user).jwtToken;\r\n            this.authService.authenticatedUser = JSON.parse(user).username;\r\n           // console.log(token);\r\n           // console.log(this.tokenDecoder.getTokenExpirationDate(token.substring('Bearer '.length)))\r\n            if (!this.tokenDecoder.isTokenExpired(token.substring('Bearer '.length))){\r\n                // logged in so return true\r\n                return true;\r\n            }\r\n            else {\r\n                localStorage.removeItem('currentUser');\r\n            }\r\n        }\r\n\r\n        // not logged in so redirect to login page with the return url\r\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\r\n        return false;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\n@Injectable()\r\nexport class JwtAuthenticationService {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    public authenticatedUser = {username:null, jwtToken:null}\r\n\r\n    authenticate(credentials:any) { \r\n       console.log(\"starting the post request\");\r\n       return this.http.post<any>(`http://localhost:8082/authenticate`, credentials, {observe: 'response'})\r\n            .pipe(map(response => {\r\n                console.log(response);\r\n                let jwtToken = response.headers.get('Authorization');\r\n               // let user = {};\r\n                // login successful if there's a jwt token in the response\r\n                if (jwtToken) {\r\n                    this.authenticatedUser = {username: credentials.username, jwtToken: jwtToken}\r\n                    // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                    localStorage.setItem('currentUser', JSON.stringify(this.authenticatedUser));\r\n                }\r\n                return this.authenticatedUser;\r\n            }));\r\n    }\r\n\r\n    getJwtToken(){   \r\n        \r\n        return JSON.parse(localStorage.getItem('currentUser')).jwtToken;\r\n    }\r\n\r\n    isUserAuthenticated(){\r\n        let user =  localStorage.getItem('currentUser');\r\n        console.log(user);\r\n        return user ? true : false;\r\n    }\r\n\r\n    logout() {\r\n        // remove user from local storage to log user out\r\n        localStorage.removeItem('currentUser');\r\n    }\r\n}","import { JwtAuthenticationService } from './jwtAuthenticationService';\r\nimport { Injectable } from '@angular/core';\r\n\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class WebSocketService {\r\n    constructor(private authenticationService:JwtAuthenticationService) { }\r\n\r\n    socket:WebSocket;\r\n\r\n    initWebSockets():WebSocket{\r\n\t\tif(typeof this.socket === 'undefined' || this.socket.readyState !== this.socket.OPEN){\r\n\t\t\tconst jwtToken = this.authenticationService.getJwtToken();\r\n\t\t\tthis.socket = new WebSocket(\r\n\t\t\t\t\t\"ws://localhost:8082/actions?token=\"+jwtToken);\r\n\t\t}\r\n\t\t\treturn this.socket;\r\n\t\t\r\n\t}\r\n\tcloseWebSocket(){\r\n\t\tthis.socket.close();\r\n\t}\r\n    \r\n}","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { environment } from './environments/environment';\r\nimport 'zone.js'\r\n\r\nimport { AppModule } from './app.module';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);","export default \"<nav class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\">\\r\\n    <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Slovak Chess Server</a>\\r\\n    <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" (click)=\\\"navbarCollapsed = !navbarCollapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSupportedContent\\\" \\r\\n    aria-controls=\\\"navbarSupportedContent\\\" [attr.aria-expanded]=\\\"!navbarCollapsed\\\" aria-label=\\\"Toggle navigation\\\">\\r\\n      <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n    </button>\\r\\n  \\r\\n    <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarSupportedContent\\\" [ngClass]=\\\"{'show':!navbarCollapsed}\\\">\\r\\n      <ul class=\\\"navbar-nav mr-auto\\\">\\r\\n        <li class=\\\"nav-item active\\\">\\r\\n          <a class=\\\"nav-link\\\" href=\\\"#\\\">Register <span class=\\\"sr-only\\\">(current)</span></a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLink=\\\"login\\\">Login</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLink=\\\"lobby\\\">Play</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" href=\\\"#\\\">Watch</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLink=\\\"analyzeGame\\\">Analyse</a>\\r\\n        </li>\\r\\n       \\r\\n      </ul>\\r\\n      <form class=\\\"form-inline my-2 my-lg-0\\\">\\r\\n       \\r\\n            <a ng-if=\\\"authenticated==true\\\" href=\\\"#/userProfile\\\">\\r\\n                <span class=\\\"glyphicon glyphicon-user\\\"></span> {{user}}\\r\\n            </a>\\r\\n         \\r\\n            <a ng-if=\\\"authenticated==true\\\" ng-click=\\\"logout()\\\" style=\\\"cursor:pointer\\\">\\r\\n                <span class=\\\"glyphicon glyphicon-log-out\\\"></span> Log out\\r\\n            </a>\\r\\n  \\r\\n      </form>\\r\\n    </div>\\r\\n  </nav>\\r\\n<!-- <nav class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\">\\r\\n    <div class=\\\"container\\\" style=\\\"margin-bottom: 0px\\\">\\r\\n \\r\\n        <div class=\\\"navbar-header\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\"\\r\\n                    data-toggle=\\\"collapse\\\" data-target=\\\"#bs-example-navbar-collapse-1\\\"\\r\\n                    aria-expanded=\\\"false\\\">\\r\\n                <span class=\\\"sr-only\\\">Toggle navigation</span> <span\\r\\n                    class=\\\"icon-bar\\\"></span> <span class=\\\"icon-bar\\\"></span> <span\\r\\n                    class=\\\"icon-bar\\\"></span>\\r\\n            </button>\\r\\n\\r\\n            <a class=\\\"navbar-brand\\\" href=\\\"#\\\">ChessHeaven</a>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"collapse navbar-collapse\\\"\\r\\n             id=\\\"bs-example-navbar-collapse-1\\\">\\r\\n            <ul class=\\\"nav navbar-nav\\\">\\r\\n\\r\\n                <li>\\r\\n                    <a href=\\\"#/register\\\">Register</a>\\r\\n                </li>\\r\\n                <li ng-if=\\\"authenticated!==true\\\">\\r\\n                    <a href=\\\"#/loginpage\\\">Login</a>\\r\\n                </li>\\r\\n\\r\\n                <li ng-if=\\\"authenticated==true && userHasRole('ROLE_ADMIN')\\\"><a\\r\\n                        href=\\\"#/admin\\\">Admin Section</a></li>\\r\\n\\r\\n                <li class=\\\"dropdown\\\" ng-if=\\\"authenticated==true\\\">\\r\\n                    <a href=\\\"#\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" role=\\\"button\\\" aria-haspopup=\\\"true\\\"\\r\\n                       aria-expanded=\\\"false\\\">Chess<span class=\\\"caret\\\"></span></a>\\r\\n                    <ul class=\\\"dropdown-menu\\\">\\r\\n                        <li><a href=\\\"#/playingHall\\\">Play game</a></li>\\r\\n                        <li><a href=\\\"#/lobby\\\">Lobby</a></li>\\r\\n                        <li><a routerLink=\\\"/analyzeGame\\\">Analyse game</a></li>\\r\\n                        <li role=\\\"separator\\\" class=\\\"divider\\\"></li>\\r\\n                        <li><a href=\\\"#\\\">Separated link</a></li>\\r\\n                        <li role=\\\"separator\\\" class=\\\"divider\\\"></li>\\r\\n                        <li><a href=\\\"#\\\">One more separated link</a></li>\\r\\n                    </ul>\\r\\n                </li>\\r\\n            </ul>\\r\\n            <ul class=\\\"nav navbar-nav navbar-right\\\">\\r\\n                <li ng-if=\\\"authenticated==true\\\">\\r\\n                    <a href=\\\"#/userProfile\\\">\\r\\n                        <span class=\\\"glyphicon glyphicon-user\\\"></span> {{user}}\\r\\n                    </a>\\r\\n                </li>\\r\\n\\r\\n                <li ng-if=\\\"authenticated==true\\\">\\r\\n                    <a ng-click=\\\"logout()\\\" style=\\\"cursor:pointer\\\">\\r\\n                        <span class=\\\"glyphicon glyphicon-log-out\\\"></span> Log out\\r\\n                    </a>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </div>\\r\\n    \\r\\n    </div>\\r\\n\\r\\n</nav> -->\\r\\n\\r\\n<router-outlet></router-outlet>\\r\\n\\r\\n\"","export default \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"row marginBottom\\\">\\r\\n        <div class=\\\"col\\\">Players online:\\r\\n            {{countOfPlayersOnline}} <br>\\r\\n            Games in progress: {{gamesInProgress}}\\r\\n        </div>\\r\\n        <div class=\\\"col-md-10\\\">\\r\\n\\r\\n            <div class=\\\"row marginBottom\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div>\\r\\n                        <h4>Lobby</h4>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row marginBottom\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div class=\\\"row marginBottom\\\">\\r\\n                        <div class=\\\"col-1\\\" *ngIf=\\\"seekingOponent\\\">\\r\\n                            <div class=\\\"loader\\\" id=\\\"loader-1\\\" >\\r\\n                                \\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col\\\" *ngIf=\\\"seekingOponent\\\">\\r\\n\\r\\n                            <span>Looking for an oponent - please wait...</span>\\r\\n                           \\r\\n                        </div>\\r\\n                        \\r\\n                    </div>\\r\\n                    <div class=\\\"row marginBottom\\\">\\r\\n                        <div class=\\\"col-sm-5\\\" style=\\\"display:flex;justify-content: space-between;\\\">\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"seekOponent(1,0)\\\" id=\\\"seek1\\\">1+0\\r\\n                            </button>\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"seekOponent(3,0)\\\">3+0\\r\\n                            </button>\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"seekOponent(5,0)\\\">5+0\\r\\n                            </button>\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"seekOponent(3,1)\\\">3+1\\r\\n                            </button>\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"showSeekForm()\\\" id=\\\"seek2\\\">Other time\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row marginBottom\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div *ngIf=\\\"gameTimeFormShown==true\\\">\\r\\n                        <form [formGroup]=\\\"gameTimeForm\\\" (ngSubmit)=\\\"seekOponent()\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"initialtime\\\">Initial Time</label>\\r\\n                                <input type=\\\"text\\\" formControlName=\\\"initialtime\\\" class=\\\"form-control\\\"\\r\\n                                    [ngClass]=\\\"{ 'is-invalid': gameTimeFormSubmitted && gameTimeFormFields.initialtime.errors }\\\" />\\r\\n                                <div *ngIf=\\\"gameTimeFormSubmitted && gameTimeFormFields.initialtime.errors\\\"\\r\\n                                    class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"gameTimeFormFields.initialtime.errors.required\\\">Initial time is\\r\\n                                        required\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"incrementpermove\\\">Increment per move</label>\\r\\n                                <input type=\\\"incrementpermove\\\" formControlName=\\\"incrementpermove\\\" class=\\\"form-control\\\"\\r\\n                                    [ngClass]=\\\"{ 'is-invalid': gameTimeFormSubmitted && gameTimeFormFields.incrementpermove.errors }\\\" />\\r\\n                                <div *ngIf=\\\"gameTimeFormSubmitted && gameTimeFormFields.incrementpermove.errors\\\"\\r\\n                                    class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"gameTimeFormFields.incrementpermove.errors.required\\\">Increment per\\r\\n                                        move\\r\\n                                        is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <!--      <div class=\\\"form-group\\\">\\r\\n                            <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\r\\n                                <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\r\\n                                Login\\r\\n                            </button>\\r\\n                        </div> -->\\r\\n                        </form>\\r\\n\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n\\r\\n            <div class=\\\"row marginBottom\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div *ngIf=\\\"playersOnline.length !== 0\\\">\\r\\n                        <h4>Players online</h4>\\r\\n                        <table class=\\\"table table-bordered\\\">\\r\\n                            <thead>\\r\\n                                <td>Player name</td>\\r\\n                                <td>Player elo</td>\\r\\n                                <td>Player status</td>\\r\\n                            </thead>\\r\\n                            <tbody>\\r\\n                                <tr *ngFor=\\\"let player of playersOnline\\\">\\r\\n                                    <td>{{player.name}}</td>\\r\\n                                    <td>{{player.elo}}</td>\\r\\n                                    <td>\\r\\n                                        <span *ngIf=\\\"player.isPlaying\\\" class=\\\"label label-info\\\">Playing </span><span\\r\\n                                            class=\\\"glyphicon glyphicon-eye-open\\\" *ngIf=\\\"player.isPlaying\\\"\\r\\n                                            (click)=\\\"observeGame(player.name)\\\">Observe game</span>\\r\\n                                        <span\\r\\n                                            *ngIf=\\\"((player.name !== user && player.isSeeking) || (player.name === user && seekingOponent)) && !player.isPlaying\\\"\\r\\n                                            class=\\\"label label-success\\\">Seeking</span>\\r\\n                                        <span\\r\\n                                            *ngIf=\\\"((player.name !== user && !player.isSeeking) || (player.name === user && !seekingOponent)) && !player.isPlaying\\\"\\r\\n                                            class=\\\"label label-success\\\">Idle</span>\\r\\n                                    </td>\\r\\n                                </tr>\\r\\n                            </tbody>\\r\\n                        </table>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row chatMessageDiv\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <h4>Lobby Chat</h4>\\r\\n                    <div class=\\\"chatWindow\\\" ng-scrollbars ng-scrollbars-config=\\\"config\\\">\\r\\n\\r\\n                        <div id=\\\"chatPost\\\" *ngFor=\\\"let message of messages.slice().reverse()\\\">\\r\\n                            <label class=\\\"chatPostAuthor\\\" for=\\\"message\\\">{{message.date | date:'H:mm' }}\\r\\n                                {{message.author}}: </label>\\r\\n                            <span id=\\\"message\\\">{{message.message}}</span>\\r\\n                        </div>\\r\\n\\r\\n\\r\\n                    </div>\\r\\n\\r\\n                    <div>\\r\\n                        <input type=\\\"text\\\" id=\\\"chatmessage\\\" [(ngModel)]=\\\"chatMessage.message\\\">\\r\\n                        <button (click)=\\\"sendChatMessage()\\\">Send</button>\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n            </div>\\r\\n        </div>\"","export default \"<div class=\\\"container\\\">\\n    <h2>Login</h2>\\n    <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\">\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"username\\\">Username</label>\\n            <input type=\\\"text\\\" formControlName=\\\"username\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.username.errors }\\\" />\\n            <div *ngIf=\\\"submitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.username.errors.required\\\">Username is required</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"password\\\">Password</label>\\n            <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n            <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\n                <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\n                Login\\n            </button>\\n        </div>\\n    </form>\\n    </div>\\n    \"","export default \"<div class=\\\"container bordered\\\">\\r\\n    <div class=\\\"playerNamesRow\\\">\\r\\n        <div class=\\\"playersRow\\\">\\r\\n            <div class=\\\"players col-md-12 alert-success\\\" *ngIf=\\\"whitePlayerName\\\">\\r\\n                {{whitePlayerName}}({{whitePlayerElo}}) -\\r\\n                {{blackPlayerName}}({{blackPlayerElo}}) <span *ngIf=\\\"gameResult\\\">Game result: {{gameResult}}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-7\\\">\\r\\n            <!-- -->\\r\\n            <div class=\\\"row\\\"\\r\\n                *ngIf=\\\"showPawnPromotionDiv==true && (mode=== chessboardUsageModes.PLAYING || mode=== chessboardUsageModes.ANALYZING)\\\">\\r\\n                <div class=\\\"col promotionPieces\\\">\\r\\n                    Which piece do you want to promote the pawn to?\\r\\n                    <table class=\\\"table\\\">\\r\\n                        <tr>\\r\\n                            <td>\\r\\n                                <div style=\\\"position: relative\\\">\\r\\n                                    <img class=\\\"chessPiece\\\"\\r\\n                                        src=\\\"{{whitePlayer==true ? 'assets/images/pieces/WN.png' : 'assets/images/pieces/BN.png'}}\\\"\\r\\n                                        (click)=\\\"promotePiece('n')\\\" />\\r\\n                                </div>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                                <div style=\\\"position: relative\\\">\\r\\n                                    <img class=\\\"chessPiece\\\"\\r\\n                                        src=\\\"{{whitePlayer==true ? 'assets/images/pieces/WB.png' : 'assets/images/pieces/BB.png'}}\\\"\\r\\n                                        (click)=\\\"promotePiece('b')\\\" />\\r\\n                                </div>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                                <div style=\\\"position: relative\\\">\\r\\n                                    <img class=\\\"chessPiece\\\"\\r\\n                                        src=\\\"{{whitePlayer==true?'assets/images/pieces/WR.png':'assets/images/pieces/BR.png'}}\\\"\\r\\n                                        (click)=\\\"promotePiece('r')\\\" />\\r\\n                                </div>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                                <div style=\\\"position: relative\\\">\\r\\n                                    <img class=\\\"chessPiece\\\"\\r\\n                                        src=\\\"{{whitePlayer==true?'assets/images/pieces/WQ.png':'assets/images/pieces/BQ.png'}}\\\"\\r\\n                                        (click)=\\\"promotePiece('q')\\\" />\\r\\n                                </div>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                    </table>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div id=\\\"newChessboardContainer\\\"></div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\" *ngIf=\\\"mode === chessboardUsageModes.ANALYZING\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div class=\\\"moveControlsWrapper\\\">\\r\\n                        <img src=\\\"assets/images/arrow-first-move.png\\\" (click)=\\\"goToFirstMove()\\\" />\\r\\n                        <img src=\\\"assets/images/arrow-previous-move.png\\\" (click)=\\\"goToPreviousMove()\\\" />\\r\\n                        <img src=\\\"assets/images/arrow-next-move.png\\\" (click)=\\\"goToNextMove()\\\" />\\r\\n                        <img src=\\\"assets/images/arrow-last-move.png\\\" (click)=\\\"goToLastMove()\\\" />\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-5 chessboardSidebarWrapper\\\">\\r\\n            <div class=\\\"row clockRow\\\" *ngIf=\\\"whitePlayerName && mode !== chessboardUsageModes.ANALYZING\\\">\\r\\n                <div class=\\\"col-md-6\\\">\\r\\n                    <table class=\\\"clockSideSection\\\">\\r\\n                        <tr>\\r\\n                            <td *ngIf=\\\"!whitePlayer\\\">{{whitePlayerName}} ({{whitePlayerElo}})\\r\\n                                <span>{{whitePlayerEloChange >= 0 ? \\\"+\\\"+whitePlayerEloChange : whitePlayerEloChange}}</span>\\r\\n                            </td>\\r\\n                            <td *ngIf=\\\"whitePlayer\\\">{{blackPlayerName}} ({{blackPlayerElo}})\\r\\n                                <span>{{blackPlayerEloChange >= 0 ? \\\"+\\\"+blackPlayerEloChange : blackPlayerEloChange}}</span>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td [ngClass]=\\\"{'clock':true, 'clockActive':whiteMove,  'clockNotActive':!whiteMove}\\\"\\r\\n                                *ngIf=\\\"!whitePlayer\\\">\\r\\n                                {{whiteClock}}\\r\\n                            </td>\\r\\n                            <td [ngClass]=\\\"{'clock':true, 'clockActive':!whiteMove, 'clockNotActive':whiteMove}\\\"\\r\\n                                *ngIf=\\\"whitePlayer\\\">{{blackClock}}\\r\\n                            </td>\\r\\n                        </tr>\\r\\n\\r\\n                    </table>\\r\\n                </div>\\r\\n                <div class=\\\"col-sm-6\\\">\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row notationRow\\\" *ngIf=\\\"annotatedMoves.length > 0\\\">\\r\\n                <div class=\\\"col \\\">\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col\\\">\\r\\n                            <div class=\\\"row\\\">\\r\\n                                <div class=\\\"col \\\">\\r\\n                                    <div class=\\\"row border\\\" style=\\\"margin-left:0px; margin-bottom:-2px; width: 100%\\\">\\r\\n                                        <div class=\\\"col\\\">\\r\\n                                            <div class=\\\"row notationTableHeader\\\">\\r\\n                                                <div class=\\\"col border border-dark \\\">Move no.</div>\\r\\n                                                <div class=\\\"col border border-dark border-left-0\\\">White move</div>\\r\\n                                                <div class=\\\"col border border-dark border-left-0\\\">Black move</div>\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"row notationTable\\\" \\r\\n                                        style=\\\"margin-left:0px\\\">\\r\\n\\r\\n                                        <div class=\\\"col\\\">\\r\\n                                            <div class=\\\"row border\\\" *ngFor=\\\"let annotatedMove of annotatedMoves\\\">\\r\\n                                                <div class=\\\"col\\\">\\r\\n                                                    <div class=\\\"row\\\">\\r\\n                                                        <div class=\\\"col\\\">{{annotatedMove.moveNumber}}</div>\\r\\n                                                        <div class=\\\"col\\\"\\r\\n                                                            id=\\\"{{'annotatedMoveWhite'+annotatedMove.moveNumber}}\\\"\\r\\n                                                            [ngClass]=\\\"{'annotatedMove':true,\\r\\n                                                     'highlighted':moveToHighlight.variationId === MAIN_LINE \\r\\n                                                                && moveToHighlight.moveNumber+1===annotatedMove.moveNumber \\r\\n                                                                && moveToHighlight.whiteMove === true}\\\"\\r\\n                                                            (click)=\\\"redrawChessboard(annotatedMove.chessboardAfterWhiteMove,MAIN_LINE)\\\">\\r\\n                                                            {{annotatedMove.whiteMove}}\\r\\n                                                        </div>\\r\\n                                                        <div class=\\\"col\\\"\\r\\n                                                            id=\\\"{{'annotatedMoveBlack'+annotatedMove.moveNumber}}\\\"\\r\\n                                                            [ngClass]=\\\"{'annotatedMove':true,\\r\\n                                                     'highlighted':moveToHighlight.variationId === MAIN_LINE && \\r\\n                                                                   moveToHighlight.moveNumber+1===annotatedMove.moveNumber && \\r\\n                                                                   moveToHighlight.whiteMove === false}\\\"\\r\\n                                                            (click)=\\\"redrawChessboard(annotatedMove.chessboardAfterBlackMove,MAIN_LINE)\\\">\\r\\n                                                            {{annotatedMove.blackMove}}\\r\\n                                                        </div>\\r\\n                                                    </div>\\r\\n\\r\\n                                                    <div class=\\\"row border border-dark\\\"\\r\\n                                                        *ngFor=\\\"let variation of annotatedMove.whiteMoveVariations\\\">\\r\\n                                                        <td colspan=\\\"3\\\">\\r\\n                                                            <variation-tree [moveToHighlight]=\\\"moveToHighlight\\\"\\r\\n                                                                [mainVariation]=\\\"variation\\\"\\r\\n                                                                (positionToRedraw)=\\\"setupVariation($event)\\\">\\r\\n                                                            </variation-tree>\\r\\n                                                        </td>\\r\\n                                                    </div>\\r\\n\\r\\n                                                    <div class=\\\"row border border-dark\\\"\\r\\n                                                        *ngFor=\\\"let variation of annotatedMove.blackMoveVariations\\\">\\r\\n                                                        <td colspan=\\\"3\\\">\\r\\n                                                            <variation-tree [moveToHighlight]=\\\"moveToHighlight\\\"\\r\\n                                                                [mainVariation]=\\\"variation\\\"\\r\\n                                                                (positionToRedraw)=\\\"setupVariation($event)\\\">\\r\\n                                                            </variation-tree>\\r\\n                                                        </td>\\r\\n                                                    </div>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <span>{{gameResult}}</span>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div *ngIf=\\\"mode === chessboardUsageModes.PLAYING\\\" id=\\\"drawResignSection\\\">\\r\\n\\r\\n                        <button (click)=\\\"offerDraw()\\\" class=\\\"btn btn-primary\\\">Offer Draw</button>\\r\\n                        <button (click)=\\\"resignButtonPressed = true\\\" class=\\\"btn btn-primary\\\">Resign</button>\\r\\n                        <button (click)=\\\"activateAnalysisMode()\\\" class=\\\"btn btn-primary\\\"\\r\\n                            *ngIf=\\\"!playingGame\\\">Analyse</button>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div *ngIf=\\\"drawOfferReceived && mode === chessboardUsageModes.PLAYING\\\" class=\\\"alert alert-info\\\">\\r\\n                        <div>\\r\\n                        <span>{{oponent}} offered you a draw. Do you want to accept?</span>\\r\\n                    </div>\\r\\n                        <button (click)=\\\"drawOfferReply(true)\\\">Yes</button>\\r\\n                        <button (click)=\\\"drawOfferReply(false)\\\">No</button>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"resignButtonPressed && mode === chessboardUsageModes.PLAYING\\\" class=\\\"alert alert-info\\\">\\r\\n                        <span>Do you really want to resign?</span>\\r\\n                        <button (click)=\\\"resign()\\\">Yes</button>\\r\\n                        <button (click)=\\\"resignButtonPressed = false\\\">No</button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row clockRow\\\">\\r\\n                <div class=\\\"col-md-12\\\">\\r\\n                    <table *ngIf=\\\"whitePlayerName && mode !== chessboardUsageModes.ANALYZING\\\">\\r\\n                        <tr>\\r\\n                            <td *ngIf=\\\"whitePlayer\\\">{{whitePlayerName}} ({{whitePlayerElo}})\\r\\n                                <span>{{whitePlayerEloChange >= 0 ? \\\"+\\\"+whitePlayerEloChange : whitePlayerEloChange}}</span>\\r\\n                            </td>\\r\\n                            <td *ngIf=\\\"!whitePlayer\\\">{{blackPlayerName}} ({{blackPlayerElo}})\\r\\n                                <span>{{blackPlayerEloChange >= 0 ? \\\"+\\\"+blackPlayerEloChange : blackPlayerEloChange}}</span>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td [ngClass]=\\\"{'clock':true, 'clockActive':whiteMove, 'clockNotActive':!whiteMove}\\\"\\r\\n                                *ngIf=\\\"whitePlayer\\\">\\r\\n                                {{whiteClock}}\\r\\n                            </td>\\r\\n                            <td [ngClass]=\\\"{'clock':true, 'clockActive':!whiteMove, 'clockNotActive':whiteMove}\\\"\\r\\n                                *ngIf=\\\"!whitePlayer\\\">\\r\\n                                {{blackClock}}\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                    </table>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","export default \"<div>\\n    (<span *ngFor=\\\"let moveOfVariation of mainVariation.moves; index as $index\\\" >\\n        {{moveOfVariation.moveNumber}}. <span *ngIf=\\\"mainVariation.moves[0].whiteMove === '' && $index === 0\\\">..</span>\\n      \\n        <a *ngIf=\\\"moveOfVariation.whiteMove\\\" id=\\\"{{'moveOfVariationNo'+mainVariation.variationId+'White'+moveOfVariation.moveNumber}}\\\" \\n        [ngClass] = \\\"{'highlighted': mainVariation.variationId === moveToHighlight.variationId && \\n                                     moveOfVariation.moveNumber === moveToHighlight.moveNumber + 1 &&\\n                                     true === moveToHighlight.whiteMove}\\\"\\n        (click)=\\\"redrawPosition(moveOfVariation.chessboardAfterWhiteMove, mainVariation.variationId )\\\">{{moveOfVariation.whiteMove}} </a>\\n          \\n        <a *ngIf=\\\"moveOfVariation.blackMove\\\" id=\\\"{{'moveOfVariationNo'+mainVariation.variationId+'Black'+moveOfVariation.moveNumber}}\\\" \\n        [ngClass] = \\\"{'highlighted': mainVariation.variationId === moveToHighlight.variationId && \\n                                     moveOfVariation.moveNumber === moveToHighlight.moveNumber + 1 &&\\n                                     false === moveToHighlight.whiteMove}\\\"\\n        (click)=\\\"redrawPosition(moveOfVariation.chessboardAfterBlackMove, mainVariation.variationId )\\\">{{moveOfVariation.blackMove}}</a>\\n     \\n        <span *ngFor=\\\"let subvariation of moveOfVariation.whiteMoveVariations\\\">\\n            <variation-tree [moveToHighlight]=\\\"moveToHighlight\\\" [mainVariation]=\\\"subvariation\\\" (positionToRedraw)=\\\"redrawPosition($event.fen, $event.variationId)\\\"></variation-tree>\\n        </span>\\n        <span *ngFor=\\\"let subvariation of moveOfVariation.blackMoveVariations\\\">\\n            <variation-tree [moveToHighlight]=\\\"moveToHighlight\\\" [mainVariation]=\\\"subvariation\\\" (positionToRedraw)=\\\"redrawPosition($event.fen,$event.variationId)\\\"></variation-tree>\\n        </span>\\n    </span>)\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'homepage',\r\n    templateUrl: 'homepage.html'\r\n})\r\n\r\nexport class HomePageComponent implements OnInit {\r\n\r\n    navbarCollapsed:boolean = true;\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n       \r\n     }\r\n}","export default \".bottomMargin{\\r\\n    margin-bottom: 10px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZXdzL2xvYmJ5L2xvYmJ5LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxtQkFBbUI7QUFDdkIiLCJmaWxlIjoidmlld3MvbG9iYnkvbG9iYnkuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5ib3R0b21NYXJnaW57XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG59Il19 */\"","import { JwtAuthenticationService } from './../../js/services/jwtAuthenticationService';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { WebSocketService } from './../../js/services/websocketService';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router'\n\n\n@Component({\n  selector: 'app-lobby',\n  templateUrl: './lobby.component.html',\n  styleUrls: ['./lobby.component.css']\n})\nexport class LobbyComponent implements OnInit {\n\n  constructor(private router: Router, private websocketService:WebSocketService, \n    private authenticationService:JwtAuthenticationService,\n      private formBuilder: FormBuilder ) {\n   }\n\n  chatMessage = { action: \"chatMessageLobby\", author: null, message:\"\"};\n\n  gameTimeForm: FormGroup;\n  gameTimeFormSubmitted: boolean;\n  gameTimeFormShown : boolean;\n\n  time = 0;\n  increment = 0;\n  messages = [];\n  countOfPlayersOnline :number;\n  gamesInProgress = 0;\n  playersOnline = [];\n  seekingOponent = false;\n \n  user = {};\n\n  socket: WebSocket;\n  queryPlayersInterval:any;\n  seekOponentInterval:any;\n\n  ngOnInit(): void {\n\n    this.gameTimeForm = this.formBuilder.group({\n      time: ['', Validators.required],\n      increment: ['', Validators.required]\n    });\n    this.gameTimeFormSubmitted = false;\n    this.gameTimeFormShown = false;\n    this.socket = this.websocketService.initWebSockets();\n    this.socket.onmessage = (message) => {this.onMessage(message)};\n    this.socket.onclose = () => {\n      console.log(\"closing timer\");\n      this.cancelIntervals();\n    };\n    this.user = this.authenticationService.authenticatedUser;\n\n    this.queryPlayersInterval = setInterval(()=>{this.queryPlayersOnline()}, 10000);\n\n  };\n\n  // convenience getter for easy access to form fields\n  get gameTimeFormFields() { return this.gameTimeForm.controls; }\n\n  sendChatMessage() {\n    this.chatMessage.author = this.authenticationService.authenticatedUser;\n    this.socket.send(JSON.stringify(this.chatMessage));\n    this.chatMessage.message = \"\";\n  };\n\n  config = {\n\n    autoHideScrollbar: false,\n    setHeight: 300,\n    scrollInertia: 500,\n    axis: 'yx',\n    advanced: {\n      updateOnContentResize: true\n    },\n    scrollButtons: {\n      scrollAmount: 'auto', // scroll amount when button pressed\n      enable: true // enable scrolling buttons by default\n    },\n    theme: 'dark'\n  };\n\n  displayChatMessage(message) {\n    message.date = new Date();\n    this.messages.unshift(message);\n\n  };\n\n  seekOponent(time: string, increment: string) {\n\n    this.gameTimeFormSubmitted = true;\n\n    if(this.gameTimeFormShown && this.gameTimeFormSubmitted && this.gameTimeForm.invalid){\n      return;\n    }\n\n    var seekDetails = {\n\n      action: \"seekOponent\",\n      user: this.authenticationService.authenticatedUser,\n      time: parseInt(typeof time !== 'undefined' ? time\n        : this.gameTimeFormFields.initialtime.value),\n      increment: parseInt(typeof increment !== 'undefined' ? increment\n        : this.gameTimeFormFields.initialtimepermove.value)\n\n    };\n    this.seekOponentInterval = setInterval(() => this.socket.send(JSON.stringify(seekDetails)), 1000);\n\n    this.seekingOponent = true;\n    this.gameTimeFormSubmitted = false;\n    this.gameTimeFormShown = false;\n  };\n\n  showSeekForm = function () {\n    this.gameTimeFormShown = true;\n  };\n\n  queryPlayersOnline() {\n    console.log(\"Querying players online.\");\n    this.socket.send(JSON.stringify({ user: this.user, action: \"getPlayersOnline\" }));\n\n  }\n\n  observeGame(playername: string) {\n    this.cancelIntervals();\n    this.router.navigate(['/observeGame/' + playername])\n  };\n\n  cancelIntervals() {\n    clearInterval(this.seekOponentInterval);\n    clearInterval(this.queryPlayersInterval)\n  }\n\n  onMessage(event: any) {\n    //console.log(event);\n    var data = JSON.parse(event.data);\n    if (data.action === \"chatMessageLobby\") {\n      this.displayChatMessage(data);\n    }\n    if (data.action === \"getPlayersOnline\") {\n      console.log(data.players);\n      this.playersOnline = data.players;\n      this.countOfPlayersOnline = data.players.length;\n      this.gamesInProgress = data.gamesInProgress;\n    }\n    if (data.action === \"startGame\") {\n      console.log(data);\n      this.cancelIntervals();\n      this.router.navigate(['/playGame/' + data.gameId]);\n      console.log(\"Game started.\")\n    }\n    if (data.action === \"gameInfo\") {\n      console.log(\"Received game info:\" + data);\n    }\n  }\n \n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ2aWV3cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http'\nimport { Router, ActivatedRoute} from '@angular/router'\n\nimport {JwtAuthenticationService} from '../../js/services/jwtAuthenticationService'\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n\n\tloginForm: FormGroup;\n\treturnUrl: string;\n\n  constructor(private router:Router, private route: ActivatedRoute,private http:HttpClient, private authenticationService:JwtAuthenticationService,  private formBuilder: FormBuilder) { \n\n  }\n\n  ngOnInit(): void {\n\tthis.loginForm = this.formBuilder.group({\n\t\tusername: ['', Validators.required],\n\t\tpassword: ['', Validators.required]\n\t});\n\n\tthis.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n  submitted = false;\n  loading = false;\n  \n  authenticationData={};\n\n\tredirectTo(path:string){\n\t\tthis.router.navigate([path]);\n\t};\n\n\t// convenience getter for easy access to form fields\n    get f() { return this.loginForm.controls; }\n\t  \n\t  \n\t  login() {\n\n\t\t  console.log(\"Starting the authentication.\")\n\t\t  this.submitted = true;\n\n\t\t  if (this.loginForm.invalid) {\n            return;\n        }\n\t\t  this.loading = true;\n\n\t      this.authenticationService.authenticate({username:this.f.username.value, password:this.f.password.value})\n           // .pipe(first())\n            .subscribe(\n                data => {\n                    this.router.navigate([this.returnUrl]);\n                },\n                error => {\n                   // this.alertService.error(error);\n                    this.loading = false;\n                });\n    }\n\t \n\t  \n\t\n\t\n\n}\n","import { JwtAuthenticationService } from './../../js/services/jwtAuthenticationService';\r\nimport { WebSocketService } from './../../js/services/websocketService';\r\nimport { AuthenticationService } from '../../js/services/authenticationService';\r\nimport { Component, OnInit, OnDestroy, AfterViewInit, HostListener } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { Chessboard, COLOR, MOVE_INPUT_MODE, INPUT_EVENT_TYPE } from \"../../node_modules/cm-chessboard/src/cm-chessboard/Chessboard.js\";\r\nimport { Chess } from '../../js/chessRules.js';\r\nimport * as $ from 'jquery';\r\n\r\n@Component({\r\n    selector: 'selector-name',\r\n    templateUrl: 'playingHall.html'\r\n})\r\n\r\nexport class PlayingHall implements OnInit, OnDestroy, AfterViewInit {\r\n\r\n    constructor(private $http: HttpClient, private route: ActivatedRoute,\r\n        private authenticationService: JwtAuthenticationService, private webSocketService: WebSocketService) {\r\n\r\n    }\r\n\r\n    moveToHighlight = {\r\n        variationId: null,\r\n        moveNumber: null,\r\n        whiteMove: true\r\n    }\r\n\r\n    chessboardUsageModes = {\r\n        PLAYING: \"P\",\r\n        OBSERVING: \"O\",\r\n        ANALYZING: \"A\"\r\n    }\r\n\r\n    root = this;\r\n    resignButtonPressed: boolean = false;\r\n    MAIN_LINE = -1\r\n    chessRules = require(\"../../js/chessRules.js\");\r\n    chess;\r\n    svgChessboard = null;\r\n    chessboard;\r\n    startPosition;\r\n    endPosition;\r\n    moveNumber;\r\n    socket;\r\n    user;\r\n    clockTimer;\r\n    enPassant;\r\n    element;\r\n    castling = null;\r\n    pawnPromotionMove = { from: null, to: null, promotion: null }\r\n    lastMove = { startPosition: null, endPosition: null };\r\n    positionOccurrencesMap = new Map();\r\n    observedPlayer: string;\r\n    variationId = 0;\r\n    mode: string = this.chessboardUsageModes.PLAYING;\r\n    squareSize: number = 55;\r\n    playingGame = null;\r\n    seekingOponent = null;\r\n    oponent = null;\r\n    whitePlayer = true;\r\n    time = 0;\r\n    increment = 0;\r\n    whiteMove = true;\r\n    whiteClock = \"00:00\";\r\n    blackClock = \"00:00\";\r\n    whiteTime: number;\r\n    blackTime: number;\r\n    myMove = null;\r\n    whitePlayerName = \"whitePlayer\";\r\n    whitePlayerElo = 1500;\r\n    blackPlayerName = \"blackPlayer\";\r\n    blackPlayerElo = 1500;\r\n    whitePlayerEloChange = 0;\r\n    blackPlayerEloChange = 0;\r\n    gameResult = null;\r\n    showPawnPromotionDiv = false;\r\n    seekFormShown = false;\r\n    annotatedMoves = []\r\n    scrollbarconfig = {\r\n        setHeight: 400,\r\n    };\r\n\r\n    chessboardProps = {\r\n        position: \"start\", // set as fen, \"start\" or \"empty\"\r\n        style: {\r\n            cssClass: \"default\",\r\n            showCoordinates: true, // show ranks and files\r\n            showBorder: false, // display a border around the board\r\n        },\r\n        responsive: true, // resizes the board on window resize, if true\r\n        animationDuration: 300, // pieces animation duration in milliseconds\r\n        moveInputMode: MOVE_INPUT_MODE.dragPiece,\r\n        sprite: {\r\n            url: \"./assets/images/chessboard-sprite.svg\", // pieces and markers are stored as svg in the sprite\r\n            grid: 40  // the sprite is tiled with one piece every 40px\r\n        }\r\n    }\r\n    currentVariation = null;\r\n    drawOfferReceived = false;\r\n\r\n    variations = new Map();\r\n    newGame: boolean;\r\n    gameId: string;\r\n\r\n\r\n    ngOnInit() {\r\n        this.route.params.subscribe(params => {\r\n            this.observedPlayer = params['observedPlayer'];\r\n            this.gameId = params['gameId'];\r\n        });\r\n\r\n        this.whitePlayer = true;\r\n        this.user = this.authenticationService.authenticatedUser;\r\n\r\n        this.initialiseWebSockets();\r\n        this.initialiseChessboard();\r\n        this.determineInitialModeOfUsage();\r\n        this.requestGameInfo();\r\n\r\n    };\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => {\r\n\r\n        })\r\n    }\r\n\r\n    @HostListener('document:keydown', ['$event'])\r\n    handleKeyboardEvent(event: KeyboardEvent) {   \r\n        if (this.mode === this.chessboardUsageModes.ANALYZING) {\r\n            const key = event.key;\r\n            switch (key) {\r\n                case \"Left\": // IE/Edge specific value\r\n                case \"ArrowLeft\":\r\n                    this.goToPreviousMove();\r\n                    break;\r\n                case \"Right\": // IE/Edge specific value\r\n                case \"ArrowRight\":\r\n                    this.goToNextMove();\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    setupVariation($event) {\r\n        this.redrawChessboard($event.fen, $event.variationId);\r\n    }\r\n\r\n    onActivate(componentReference) {\r\n        console.log(componentReference)\r\n        componentReference.anyFunction();\r\n        //Below will subscribe to the searchItem emitter\r\n        componentReference.searchItem.subscribe((data) => {\r\n            // Will receive the data from child here \r\n        })\r\n    }\r\n\r\n    initPage() {\r\n\r\n    };\r\n\r\n    convertSquareToCoordinates(square_SAN: string) {\r\n        if (typeof square_SAN !== 'undefined') {\r\n            const columns = 'abcdefgh';\r\n            const rowString = square_SAN.substr(1, 1);\r\n            const row = +rowString - 1;\r\n            const column = columns.indexOf(square_SAN.substr(0, 1));\r\n            const piece = this.chessboard.squares[this.findIndexOfSquare(column, row)];\r\n            return {\r\n                row,\r\n                column,\r\n                piece\r\n            }\r\n        } else return null;\r\n    };\r\n\r\n    pawnReachedPromotionSquare(startsquare: string, endsquare: string) {\r\n        const pieceOnStartSquare = this.svgChessboard.getPiece(startsquare);\r\n        const pieceOnEndSquare: string = this.svgChessboard.getPiece(endsquare);\r\n        if ((pieceOnStartSquare === \"wp\" && endsquare.indexOf(\"8\") !== -1) || (pieceOnStartSquare === \"bp\" && endsquare.indexOf(\"1\") !== -1)) {\r\n\r\n            if ((pieceOnStartSquare === \"wp\" && (pieceOnEndSquare.indexOf(\"b\") !== -1 || pieceOnEndSquare === null)) ||\r\n                (pieceOnStartSquare === \"bp\" && (pieceOnEndSquare.indexOf(\"w\") !== -1 || pieceOnEndSquare === null))) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public moveInputHandler = (event) => {\r\n\r\n        const startPosition = this.convertSquareToCoordinates(event.squareFrom);\r\n        const endPosition = this.convertSquareToCoordinates(event.squareTo);\r\n        let piece: string;\r\n\r\n        console.log(\"event\", event);\r\n\r\n        if (event.type === INPUT_EVENT_TYPE.moveStart) {\r\n            piece = this.svgChessboard.getPiece(event.square);\r\n        }\r\n\r\n        if (event.type === INPUT_EVENT_TYPE.moveDone) {\r\n            const move = { from: event.squareFrom, to: event.squareTo, promotion: null };\r\n\r\n            const validMove = this.chess.move(move);\r\n            if (validMove) {\r\n                const currentPositionAsFEN = this.chess.fen();\r\n                setTimeout(() => {\r\n                    this.processValidMove(validMove, currentPositionAsFEN, true);\r\n                });\r\n            } else {\r\n                if (this.pawnReachedPromotionSquare(event.squareFrom, event.squareTo)) {\r\n                    this.pawnPromotionMove = move;\r\n                    this.showPawnPromotionDiv = true;\r\n                }\r\n                console.warn(\"invalid move\", move)\r\n            }\r\n        } else {\r\n            return true\r\n        }\r\n    }\r\n\r\n    checkMateDelivered(moveNotation: string): boolean {\r\n        return moveNotation.indexOf(\"#\") !== -1;\r\n    }\r\n\r\n    processValidMove(validMove, currentPositionAsFEN: string, sendMoveToOponent: boolean) {\r\n\r\n        const moveNotation = validMove.san;\r\n        this.svgChessboard.setPosition(currentPositionAsFEN)\r\n        this.svgChessboard.disableMoveInput();\r\n\r\n        this.addAnnotation(moveNotation);\r\n        this.highlightLastMoveInNotation();\r\n        if (validMove.color === COLOR.white) {\r\n            if (this.mode === this.chessboardUsageModes.ANALYZING) {\r\n                this.svgChessboard.enableMoveInput(this.moveInputHandler, COLOR.black);\r\n            }\r\n        } else {\r\n            this.moveNumber = this.moveNumber + 1;\r\n            if (this.mode === this.chessboardUsageModes.ANALYZING) {\r\n                this.svgChessboard.enableMoveInput(this.moveInputHandler, COLOR.white);\r\n            }\r\n        }\r\n        if (this.mode === this.chessboardUsageModes.PLAYING) {\r\n            if (sendMoveToOponent) {\r\n                this.sendMove(currentPositionAsFEN, moveNotation);\r\n                this.pressClock(!this.whitePlayer)\r\n            }\r\n            if (this.chess.game_over()) {\r\n                const gameResult = this.getGameResult(validMove);\r\n                this.endGame(gameResult);\r\n            }\r\n\r\n        }\r\n        this.whiteMove = !this.whiteMove;\r\n    }\r\n\r\n    getGameResult(validMove) {\r\n        if (this.chess.in_stalemate()) {\r\n            return \"1/2 (stalemate)\";\r\n        } else if (this.chess.insufficient_material()) {\r\n            return \"1/2 (insufficient material)\";\r\n        } else if (this.chess.in_threefold_repetition()) {\r\n            return \"1/2 (threefold repetition)\";\r\n        } else if (this.chess.in_checkmate()) {\r\n            return validMove.color === COLOR.white ? \"1-0\" : \"0-1\";\r\n        } else {\r\n            return \"1/2 (50 move rule)\";\r\n        }\r\n    }\r\n\r\n    initialiseChessboard() {\r\n\r\n        if (!this.svgChessboard) {\r\n            this.svgChessboard = new Chessboard(document.getElementById(\"newChessboardContainer\"),\r\n                this.chessboardProps);\r\n            this.svgChessboard.enableMoveInput(this.moveInputHandler, COLOR.white);\r\n        }\r\n\r\n        this.chess = new this.chessRules();\r\n        this.chessboard = {};\r\n        this.chessboard.element = document.getElementsByName(\"chessboardTable\")[0];\r\n        this.chessboard.pieces = [];\r\n        this.chessboard.annotatedMoves = [];\r\n        this.squareSize = 0;\r\n        this.startPosition = {};\r\n        this.endPosition = {};\r\n\r\n        this.moveNumber = 0;\r\n        this.chessboard.coordinates = {};\r\n\r\n        let index = 0;\r\n        let pieceIndex = 0;\r\n        let squares = [];\r\n        let piece;\r\n        for (let x = 0; x <= 7; x++) {\r\n            for (let y = 0; y <= 7; y++) {\r\n                piece = \"\";\r\n                squares[index] = {};\r\n                squares[index].row = y;\r\n                squares[index].column = x;\r\n                if (y === 6) {\r\n                    piece = \"BP\" + x + y;\r\n                } else if (y === 1) {\r\n                    piece = \"WP\" + x + y;\r\n                } else if (y === 0) {\r\n                    if (x === 0 || x === 7) {\r\n                        piece = \"WR\" + x + y;\r\n                    } else if (x === 1 || x === 6) {\r\n                        piece = \"WN\" + x + y;\r\n                    } else if (x === 2 || x === 5) {\r\n                        piece = \"WB\" + x + y;\r\n                    } else if (x === 3) {\r\n                        piece = \"WQ\" + x + y;\r\n                    } else if (x === 4) {\r\n                        piece = \"WK\" + x + y;\r\n                    }\r\n                } else if (y === 7) {\r\n                    if (x === 0 || x === 7) {\r\n                        piece = \"BR\" + x + y;\r\n                    } else if (x === 1 || x === 6) {\r\n                        piece = \"BN\" + x + y;\r\n                    } else if (x === 2 || x === 5) {\r\n                        piece = \"BB\" + x + y;\r\n                    } else if (x === 3) {\r\n                        piece = \"BQ\" + x + y;\r\n                    } else if (x === 4) {\r\n                        piece = \"BK\" + x + y;\r\n                    }\r\n                }\r\n                if (piece !== \"\") {\r\n                    squares[index].piece = piece;\r\n                    this.chessboard.pieces[pieceIndex] = {};\r\n                    this.chessboard.pieces[pieceIndex].row = y;\r\n                    this.chessboard.pieces[pieceIndex].column = x;\r\n                    this.chessboard.pieces[pieceIndex].piece = piece;\r\n                    pieceIndex++;\r\n                } else {\r\n                    squares[index].piece = \"empty\";\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n\r\n        this.chessboard.squares = squares;\r\n\r\n    };\r\n\r\n    determineInitialModeOfUsage() {\r\n        if (typeof this.observedPlayer !== 'undefined') {\r\n            this.mode = this.chessboardUsageModes.OBSERVING;\r\n        } else if (this.route.snapshot['_routerState'].url.indexOf(\"analyzeGame\") !== -1) {\r\n            this.mode = this.chessboardUsageModes.ANALYZING;\r\n        } else {\r\n            this.mode = this.chessboardUsageModes.PLAYING;\r\n        }\r\n    };\r\n\r\n\r\n    requestGameInfo() {\r\n        if (this.mode === this.chessboardUsageModes.PLAYING) {\r\n            let getGameInfoMessage = {\r\n                action: \"getGameInfo\",\r\n                user: this.user,\r\n                gameId: this.gameId,\r\n            };\r\n            console.log(\"Sending request game info message:\" + JSON.stringify(getGameInfoMessage));\r\n            this.socket.send(JSON.stringify(getGameInfoMessage));\r\n        } else if (this.mode === this.chessboardUsageModes.OBSERVING) {\r\n            this.$http.get('http://localhost:8082/observe/' + this.observedPlayer, \r\n            {headers:{'Authorization':'Bearer:'+this.authenticationService.getJwtToken}}).subscribe((game) => {\r\n                this.observeGame(game);\r\n            }, (data) => {\r\n                console.log(\"Retrieval of moves of the observed game failed:\" + data.error);\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    stopClocks() {\r\n        console.log(\"Stopping clock\");\r\n        clearTimeout(this.clockTimer);\r\n\r\n    };\r\n\r\n    ngOnDestroy() {\r\n        if (this.mode === this.chessboardUsageModes.OBSERVING) {\r\n            this.stopObservingGame();\r\n        }\r\n        this.stopClocks();\r\n    }\r\n\r\n    stopObservingGame() {\r\n        this.$http.get('//localhost:8082/observe/' + this.observedPlayer + \"/cancel\", {}).toPromise().then(() =>\r\n            console.log(\"Removing of observer successfull.\")\r\n            , (data) =>\r\n                console.log(\"Removing of observer failed:\" + data.error)\r\n        );\r\n    };\r\n\r\n\r\n\r\n    setMyMove(isItMyMove) {\r\n        this.myMove = isItMyMove;\r\n    };\r\n\r\n    getChessboardCoordinates(obj) {\r\n        let top;\r\n        top = 0;\r\n        if (obj.offsetParent) {\r\n            do {\r\n                top += obj.offsetTop;\r\n            } while (obj = obj.offsetParent);\r\n        }\r\n\r\n        this.chessboard.coordinates.left = this.chessboard.element\r\n            .getBoundingClientRect().left;\r\n        this.chessboard.coordinates.right = this.chessboard.element\r\n            .getBoundingClientRect().right;\r\n        this.chessboard.coordinates.bottom = this.chessboard.element\r\n            .getBoundingClientRect().bottom;\r\n        this.chessboard.coordinates.top = top;\r\n        // TODO squareSize =\r\n        // (chessboard.coordinates.right -\r\n        // chessboard.coordinates.left) / 8;\r\n        this.squareSize = 55;\r\n        // //console.log(\"Square size:\" + squareSize);\r\n        // //console.log(chessboard.coordinates);\r\n    };\r\n\r\n    activateAnalysisMode() {\r\n        this.mode = this.chessboardUsageModes.ANALYZING;\r\n    };\r\n\r\n    determineRowColumn(x, y,\r\n        whitePlayer) {\r\n\r\n        let coordinates = { x: 0, y: 0 };\r\n        coordinates.x = (x - this.chessboard.coordinates.left)\r\n            / this.squareSize;\r\n        coordinates.y = 8 - ((y - (this.chessboard.coordinates.top)) / this.squareSize);\r\n        let row = !whitePlayer ? 7 - Math\r\n            .floor(coordinates.y) : Math\r\n                .floor(coordinates.y);\r\n        let column = !whitePlayer ? 7 - Math\r\n            .floor(coordinates.x) : Math\r\n                .floor(coordinates.x);\r\n\r\n        return {\r\n            row: row,\r\n            column: column,\r\n            piece: this.chessboard.squares[this.findIndexOfSquare(\r\n                column, row)].piece\r\n        };\r\n\r\n    };\r\n\r\n\r\n    getInitialPositionOfPiece(piece) {\r\n        let coordinates = { row: null, column: null, piece: null, index: null };\r\n        for (let index = 0; index < this.chessboard.pieces.length; index++) {\r\n            if (this.chessboard.pieces[index].piece === piece) {\r\n                coordinates.row = this.chessboard.pieces[index].row;\r\n                coordinates.column = this.chessboard.pieces[index].column;\r\n                coordinates.piece = piece;\r\n                coordinates.index = index;\r\n                return coordinates;\r\n            }\r\n        }\r\n    };\r\n\r\n    goToNextMove() {\r\n        let move;\r\n        if (!this.currentVariation) {\r\n            move = this.chessboard.annotatedMoves[this.moveNumber];\r\n            if (!this.whiteMove && move.blackMove !== \"\") {\r\n                this.redrawChessboard(move.chessboardAfterBlackMove, this.MAIN_LINE);\r\n            } else if (this.whiteMove && this.chessboard.annotatedMoves.length > this.moveNumber) {\r\n                this.redrawChessboard(move.chessboardAfterWhiteMove, this.MAIN_LINE);\r\n            }\r\n        } else {\r\n            move = this.currentVariation.moves[this.moveNumber - this.currentVariation.moveNumber];\r\n            let variationId = this.currentVariation.variationId;\r\n            if (!this.whiteMove && move.blackMove !== \"\") {\r\n                this.redrawChessboard(move.chessboardAfterBlackMove, variationId);\r\n            } else if (this.whiteMove && this.chessboard.annotatedMoves.length > this.moveNumber) {\r\n                this.redrawChessboard(move.chessboardAfterWhiteMove, variationId);\r\n            }\r\n        }\r\n    }\r\n\r\n    goToPreviousMove() {\r\n        let move;\r\n        if (!this.currentVariation) {\r\n            move = this.chessboard.annotatedMoves[this.moveNumber - 1];\r\n            if (!this.whiteMove && this.moveNumber - 1 >= 0) {\r\n                this.redrawChessboard(move.chessboardAfterBlackMove, this.MAIN_LINE);\r\n            } else if (this.whiteMove) {\r\n                this.redrawChessboard(move.chessboardAfterWhiteMove, this.MAIN_LINE);\r\n            }\r\n        } else {\r\n            move = this.currentVariation.moves[this.moveNumber - this.currentVariation.this.moveNumber];\r\n            let variationId = this.currentVariation.variationId;\r\n            if (!this.whiteMove && this.moveNumber - 1 >= 0) {\r\n                this.redrawChessboard(move.chessboardAfterBlackMove, variationId);\r\n            } else if (this.whiteMove) {\r\n                this.redrawChessboard(move.chessboardAfterWhiteMove, variationId);\r\n            }\r\n        }\r\n    }\r\n\r\n    goToFirstMove() {\r\n        let move = this.chessboard.annotatedMoves[0];\r\n        this.redrawChessboard(move.chessboardAfterWhiteMove, this.MAIN_LINE);\r\n    }\r\n\r\n    goToLastMove() {\r\n        let lastMoveNumber = this.chessboard.annotatedMoves.length - 1;\r\n        let move = this.chessboard.annotatedMoves[lastMoveNumber];\r\n        if (move.blackMove !== \"\") {\r\n            this.redrawChessboard(move.chessboardAfterWhiteMove, this.MAIN_LINE);\r\n        } else {\r\n            this.redrawChessboard(move.chessboardAfterWhiteMove, this.MAIN_LINE);\r\n        }\r\n    }\r\n\r\n    isRookMoveLegal(startPosition, endPosition, kingInCheck) {\r\n        let isLegal = true;\r\n        if (endPosition.row === startPosition.row) {\r\n            for (let x = 1; x < Math\r\n                .abs(endPosition.column\r\n                    - startPosition.column); x++) {\r\n                let square = this.findSquare(endPosition.column > startPosition.column ? startPosition.column\r\n                    + x\r\n                    : startPosition.column\r\n                    - x, startPosition.row);\r\n                if ((!kingInCheck && !this.isSquareEmpty(square)) ||\r\n                    (kingInCheck && !this.isSquareEmpty(square) && !this.isPieceOnSquare(square, \"K\"))) {\r\n                    isLegal = false;\r\n                }\r\n            }\r\n\r\n        } else if (endPosition.column === startPosition.column) {\r\n            for (let x = 1; x < Math\r\n                .abs(endPosition.row\r\n                    - startPosition.row); x++) {\r\n                let square = this.findSquare(startPosition.column,\r\n                    endPosition.row > startPosition.row ? startPosition.row\r\n                        + x\r\n                        : startPosition.row - x);\r\n                if ((!kingInCheck && !this.isSquareEmpty(square)) ||\r\n                    (kingInCheck && !this.isSquareEmpty(square) && !this.isPieceOnSquare(square, \"K\"))) {\r\n                    isLegal = false;\r\n                }\r\n            }\r\n        } else {\r\n            isLegal = false;\r\n        }\r\n        // console.log(\"Rook move legal:\" + isLegal);\r\n        return isLegal;\r\n    }\r\n\r\n    isPawnMoveLegal(startPosition,\r\n        endPosition, whitePlayer, kingInCheck) {\r\n        if (Math.abs(startPosition.row\r\n            - endPosition.row) > 2\r\n            || Math.abs(startPosition.column\r\n                - endPosition.column) > 1) {\r\n            return false;\r\n        } else if ((this.whiteMove === true && endPosition.row < startPosition.row) || (this.whiteMove === false && endPosition.row > startPosition.row)) {\r\n            return false;\r\n        } else if (Math\r\n            .abs(!whitePlayer ? startPosition.row\r\n                - endPosition.row\r\n                : endPosition.row\r\n                - startPosition.row) === 1\r\n            && Math.abs(startPosition.column\r\n                - endPosition.column) === 1\r\n            && (endPosition.piece !== \"empty\" || (kingInCheck))) {\r\n            return true;\r\n        } else if (Math\r\n            .abs(!whitePlayer ? startPosition.row\r\n                - endPosition.row\r\n                : endPosition.row\r\n                - startPosition.row) === 1\r\n            && startPosition.column\r\n            - endPosition.column === 0 && (endPosition.piece === \"empty\")) {\r\n            return true;\r\n        } else if (Math\r\n            .abs(!whitePlayer ? startPosition.row\r\n                - endPosition.row\r\n                : endPosition.row\r\n                - startPosition.row) === 2\r\n            && startPosition.column\r\n            - endPosition.column === 0) {\r\n            let initialPositionOfPiece = this.\r\n                getInitialPositionOfPiece(startPosition.piece);\r\n            return startPosition.row === initialPositionOfPiece.row\r\n                && startPosition.column === initialPositionOfPiece.column;\r\n        } else if (!whitePlayer ? startPosition.row\r\n            - endPosition.row : endPosition.row\r\n            - startPosition.row === 1\r\n            && Math.abs(endPosition.column\r\n                - startPosition.column) === 1) {\r\n            return this.pieceTakenEnPassant(startPosition,\r\n                endPosition, whitePlayer);\r\n\r\n        }\r\n    }\r\n\r\n    pieceTakenEnPassant(startPosition,\r\n        endPosition, whitePlayer) {\r\n        // console.log(\"En passant  called.\");\r\n        console\r\n            .log(startPosition.piece.indexOf(\"P\") !== -1);\r\n        let squaresMovedForward;\r\n        if (this.myMove === true) {\r\n            squaresMovedForward = !whitePlayer ? startPosition.row\r\n                - endPosition.row\r\n                : endPosition.row\r\n                - startPosition.row;\r\n        } else {\r\n            squaresMovedForward = Math\r\n                .abs(startPosition.row\r\n                    - endPosition.row);\r\n        }\r\n        if (startPosition.piece.indexOf(\"P\") !== -1\r\n            && squaresMovedForward === 1\r\n            && Math.abs(endPosition.column\r\n                - startPosition.column) === 1) {\r\n            // console.log(lastMove);\r\n            if (this.lastMove.endPosition.piece\r\n                .indexOf(\"P\") !== -1\r\n                && Math\r\n                    .abs(this.lastMove.startPosition.row\r\n                        - this.lastMove.endPosition.row) === 2\r\n                && this.lastMove.endPosition.column === endPosition.column) {\r\n                // console.log(\"En passant.\");\r\n                this.enPassant = true;\r\n                return true;\r\n            } else\r\n                return false;\r\n\r\n        }\r\n    }\r\n\r\n    canRookMateBePrevented(chessboard,\r\n        kingPosition, checkingPiecePosition,\r\n        whiteMove) {\r\n        let matePreventionPossible = false;\r\n        if (kingPosition.row === checkingPiecePosition.row) {\r\n            for (let x = 1; x < Math\r\n                .abs(kingPosition.column\r\n                    - checkingPiecePosition.column); x++) {\r\n\r\n                if (this.canAnyOponentsPieceMoveToSquare(\r\n                    chessboard,\r\n                    kingPosition.row,\r\n                    kingPosition.column > checkingPiecePosition.column ? checkingPiecePosition.column\r\n                        + x\r\n                        : checkingPiecePosition.column\r\n                        - x, whiteMove, null, null) === true) {\r\n\r\n                    matePreventionPossible = true;\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        } else if (kingPosition.column === checkingPiecePosition.column) {\r\n            for (let x = 1; x < Math\r\n                .abs(kingPosition.row\r\n                    - checkingPiecePosition.row); x++) {\r\n\r\n                if (this.canAnyOponentsPieceMoveToSquare(\r\n                    chessboard,\r\n                    kingPosition.row > checkingPiecePosition.row ? checkingPiecePosition.row\r\n                        + x\r\n                        : checkingPiecePosition.row\r\n                        - x,\r\n                    kingPosition.column, whiteMove, null, null) === true) {\r\n\r\n                    matePreventionPossible = true;\r\n                    break;\r\n                }\r\n\r\n            }\r\n        }\r\n        return matePreventionPossible;\r\n\r\n    }\r\n\r\n    canBishopMateBePrevented(chessboard,\r\n        kingPosition, checkingPiecePosition,\r\n        whiteMove) {\r\n        console.log(\"Can bishop mate be prevented?\");\r\n        let matePreventionPossible = false;\r\n        if (kingPosition.row > checkingPiecePosition.row\r\n            && kingPosition.column > checkingPiecePosition.column) {\r\n            for (let x = 1; x < kingPosition.row\r\n                - checkingPiecePosition.row; x++) {\r\n                if (this.canAnyOponentsPieceMoveToSquare(\r\n                    chessboard,\r\n                    checkingPiecePosition.row + x,\r\n                    checkingPiecePosition.column\r\n                    + x, whiteMove, null, null) === true) {\r\n                    console.log(\"Yes - option 1\");\r\n                    matePreventionPossible = true;\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        } else if (kingPosition.row > checkingPiecePosition.row\r\n            && kingPosition.column < checkingPiecePosition.column) {\r\n            for (let x = 1; x < this.endPosition.row\r\n                - checkingPiecePosition.row; x++) {\r\n                if (this.canAnyOponentsPieceMoveToSquare(\r\n                    chessboard, kingPosition.row\r\n                - x,\r\n                    kingPosition.column + x,\r\n                    whiteMove, null, null) === true) {\r\n                    console.log(\"Yes - option 2\");\r\n                    matePreventionPossible = true;\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        } else if (kingPosition.row < checkingPiecePosition.row\r\n            && kingPosition.column > checkingPiecePosition.column) {\r\n            for (let x = 1; x < this.startPosition.row\r\n                - this.endPosition.row; x++) {\r\n                if (this.canAnyOponentsPieceMoveToSquare(\r\n                    chessboard, kingPosition.row\r\n                + x,\r\n                    kingPosition.column - x,\r\n                    whiteMove, null, null) === true) {\r\n                    console.log(\"Yes - option 3\");\r\n                    matePreventionPossible = true;\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        } else if (kingPosition.row < checkingPiecePosition.row\r\n            && kingPosition.column < checkingPiecePosition.column) {\r\n            for (let x = 1; x < checkingPiecePosition.row\r\n                - this.endPosition.row; x++) {\r\n                if (this.canAnyOponentsPieceMoveToSquare(\r\n                    chessboard, kingPosition.row\r\n                + x,\r\n                    kingPosition.column + x,\r\n                    whiteMove, null, null) === true) {\r\n                    console.log(\"Yes - option 4\");\r\n                    matePreventionPossible = true;\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        return matePreventionPossible;\r\n    }\r\n\r\n    canMateBePrevented(chessboard,\r\n        kingPosition, checkingPiecePosition,\r\n        whiteMove) {\r\n        let matePreventionPossible = false;\r\n\r\n        if (this.canAnyOponentsPieceMoveToSquare(\r\n            chessboard,\r\n            checkingPiecePosition.row,\r\n            checkingPiecePosition.column,\r\n            whiteMove, true)) {\r\n\r\n            matePreventionPossible = true;\r\n        } else {\r\n\r\n            switch (checkingPiecePosition.piece\r\n                .substr(1, 1)) {\r\n                /*\tcase \"P\":\r\n                        if (this.canAnyOponentsPieceMoveToSquare(\r\n                                chessboard,\r\n                                checkingPiecePosition.row,\r\n                                checkingPiecePosition.column,\r\n                                whiteMove)) {\r\n\r\n                            matePreventionPossible = true;\r\n                        }\r\n                        break;\r\n\r\n                    case \"N\":\r\n                        if (this.canAnyOponentsPieceMoveToSquare(\r\n                                chessboard,\r\n                                checkingPiecePosition.row,\r\n                                checkingPiecePosition.column,\r\n                                whiteMove)) {\r\n\r\n                            matePreventionPossible = true;\r\n                        }\r\n                        break;*/\r\n\r\n                case \"B\":\r\n                    matePreventionPossible = this.canBishopMateBePrevented(\r\n                        chessboard, kingPosition,\r\n                        checkingPiecePosition, whiteMove);\r\n                    break;\r\n\r\n                case \"R\":\r\n                    matePreventionPossible = this.canRookMateBePrevented(\r\n                        chessboard, kingPosition,\r\n                        checkingPiecePosition, whiteMove);\r\n                    break;\r\n\r\n                case \"Q\":\r\n                    if (this.canBishopMateBePrevented(chessboard,\r\n                        kingPosition,\r\n                        checkingPiecePosition, whiteMove) === true\r\n                        || this.canRookMateBePrevented(\r\n                            chessboard, kingPosition,\r\n                            checkingPiecePosition,\r\n                            whiteMove) === true) {\r\n                        matePreventionPossible = true;\r\n                    }\r\n                    break;\r\n\r\n            }\r\n        }\r\n        return matePreventionPossible;\r\n    }\r\n\r\n    isKingMoveLegal(startPosition,\r\n        endPosition, whitePlayer, isKingInCheck) {\r\n        if (Math.abs(endPosition.row\r\n            - startPosition.row) <= 1\r\n            && Math.abs(endPosition.column\r\n                - startPosition.column) <= 1\r\n        ) {\r\n            if (startPosition.piece.indexOf('W') !== -1 ? this.isWhitePieceOnSquare(endPosition) : this.isBlackPieceOnSquare(endPosition)) {\r\n                //same coloured piece as the king is on the target square, king move is illegal\r\n                return false;\r\n            } else {\r\n                return !this.canAnyOponentsPieceMoveToSquare(this.chessboard, endPosition.row, endPosition.column, startPosition.piece.indexOf('W') !== -1, true, isKingInCheck);\r\n            }\r\n\r\n\r\n        } else if (endPosition.row === startPosition.row\r\n            && Math.abs(endPosition.column\r\n                - startPosition.column) === 2\r\n            && endPosition.column === 6) {\r\n            if (whitePlayer === true\r\n                && this.isSquareEmpty(this.findSquare(5, 0))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 0, 5,\r\n                    this.whiteMove, null, null)\r\n                && this.isSquareEmpty(this.findSquare(6, 0))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 0, 6,\r\n                    this.whiteMove, null, null) && this.hasKingAlreadyMoved(\"white\") === false) {\r\n                console.log(\"White Short castle\");\r\n                this.castling = \"0-0\";\r\n                return true;\r\n            }\r\n\r\n            if (whitePlayer === false\r\n                && endPosition.column === 6\r\n                && this.isSquareEmpty(this.findSquare(5, 7))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 7, 5,\r\n                    this.whiteMove, null, null)\r\n                && this.isSquareEmpty(this.findSquare(6, 7))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 7, 6,\r\n                    this.whiteMove, null) && this.hasKingAlreadyMoved(\"black\") === false) {\r\n                console.log(\"Black Short castle\");\r\n                this.castling = \"0-0\";\r\n                return true;\r\n            }\r\n\r\n\r\n        } else if (endPosition.row === startPosition.row\r\n            && Math.abs(endPosition.column\r\n                - startPosition.column) === 2\r\n            && (endPosition.column === 2)) {\r\n            if (whitePlayer === true\r\n                && this.isSquareEmpty(this.findSquare(2, 0))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 0, 2,\r\n                    this.whiteMove, true)\r\n                && this.isSquareEmpty(this.findSquare(3, 0))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 0, 3,\r\n                    this.whiteMove, true) && this.hasKingAlreadyMoved(\"white\") === false) {\r\n                console.log(\"White Long castle\");\r\n                this.castling = \"0-0-0\";\r\n                return true;\r\n            }\r\n\r\n            if (whitePlayer === false\r\n                && this.isSquareEmpty(this.findSquare(2, 7))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 7, 2,\r\n                    this.whiteMove, true)\r\n                && this.isSquareEmpty(this.findSquare(3, 7))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 7, 3,\r\n                    this.whiteMove, true) && this.hasKingAlreadyMoved(\"black\") === false) {\r\n\r\n                console.log(\"Black Long castle\");\r\n                this.castling = \"0-0-0\";\r\n                return true;\r\n            }\r\n        } else {\r\n            console.log(\"King else condition.\");\r\n            console.log(startPosition);\r\n            console.log(endPosition);\r\n            console.log(whitePlayer);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    isBishopMoveLegal(startPosition,\r\n        endPosition, kingInCheck) {\r\n        let isLegal = true;\r\n        if (Math.abs(endPosition.row\r\n            - startPosition.row) === Math\r\n                .abs(endPosition.column\r\n                    - startPosition.column)\r\n\r\n        ) {\r\n            if ((endPosition.row > startPosition.row\r\n                && endPosition.column > startPosition.column) ||\r\n                (endPosition.row < startPosition.row\r\n                    && endPosition.column < startPosition.column)) {\r\n                for (let x = 1; x < endPosition.row\r\n                    - startPosition.row; x++) {\r\n                    let square = this.findSquare(startPosition.column + x,\r\n                        startPosition.row + x);\r\n                    if ((!kingInCheck && !this.isSquareEmpty(square)) ||\r\n                        (kingInCheck && !this.isSquareEmpty(square) && !this.isPieceOnSquare(square, \"K\"))) {\r\n                        // console.log(\"Case1\");\r\n                        isLegal = false;\r\n                        break;\r\n                    }\r\n\r\n\r\n                }\r\n\r\n            } else if (endPosition.row > startPosition.row\r\n                && endPosition.column < startPosition.column) {\r\n                for (let x = 1; x < endPosition.row\r\n                    - startPosition.row; x++) {\r\n                    let square = this.findSquare(\r\n                        endPosition.column + x,\r\n                        endPosition.row - x);\r\n\r\n                    if ((!kingInCheck && !this.isSquareEmpty(square)) ||\r\n                        (kingInCheck && !this.isSquareEmpty(square) && !this.isPieceOnSquare(square, \"K\"))) {\r\n\r\n                        console\r\n                            .log(square.piece);\r\n\r\n                        isLegal = false;\r\n                        break;\r\n                    }\r\n\r\n                }\r\n\r\n            } else if (endPosition.row < startPosition.row\r\n                && endPosition.column > startPosition.column) {\r\n                for (let x = 1; x < startPosition.row\r\n                    - endPosition.row; x++) {\r\n                    let square = this.findSquare(\r\n                        endPosition.column - x,\r\n                        endPosition.row + x);\r\n                    if ((!kingInCheck && !this.isSquareEmpty(square)) ||\r\n                        (kingInCheck && !this.isSquareEmpty(square) && !this.isPieceOnSquare(square, \"K\"))) {\r\n                        // console.log(\"Case3\");\r\n                        isLegal = false;\r\n                        break;\r\n                    }\r\n\r\n\r\n                }\r\n\r\n            }\r\n\r\n            /*     else if (endPosition.row < startPosition.row\r\n                     && endPosition.column < startPosition.column) {\r\n                     for (let x = 1; x < startPosition.row\r\n                     - endPosition.row; x++) {\r\n                         let square = this.findSquare(\r\n                             endPosition.column + x,\r\n                             endPosition.row + x)\r\n                         if ((!kingInCheck && !this.isSquareEmpty(square)) ||\r\n                             (kingInCheck && !this.isSquareEmpty(square) && !isPieceOnSquare(square, \"K\"))) {\r\n\r\n                             // console.log(\"Case4\");\r\n                             isLegal = false;\r\n                             break;\r\n                         }\r\n\r\n\r\n                     }\r\n\r\n                 }*/\r\n\r\n        } else {\r\n            // console.log(\"Case 5\");\r\n            isLegal = false;\r\n        }\r\n        // console.log(\"Bishop move legal:\" + isLegal);\r\n        return isLegal;\r\n    }\r\n\r\n\r\n    checkLegalityOfMove(\r\n        startPosition, endPosition, whitePlayer, isKingInCheck) {\r\n\r\n        if (typeof endPosition === 'undefined' || startPosition.piece === \"empty\" ||\r\n            (endPosition.row === startPosition.row && endPosition.column === startPosition.column) ||\r\n            (this.isWhitePieceOnSquare(startPosition) && this.isWhitePieceOnSquare(endPosition)) ||\r\n            (this.isBlackPieceOnSquare(startPosition) && this.isBlackPieceOnSquare(endPosition))\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        switch (startPosition.piece.substr(1, 1)) {\r\n            case \"N\":\r\n\r\n                if (((Math.abs(startPosition.row\r\n                    - endPosition.row) === 2 && Math\r\n                        .abs(startPosition.column\r\n                            - endPosition.column) === 1) || (Math\r\n                                .abs(startPosition.row\r\n                                    - endPosition.row) === 1 && Math\r\n                                        .abs(startPosition.column\r\n                                            - endPosition.column) === 2))\r\n                    && ((this.whiteMove ? this.isBlackPieceOnSquare(endPosition) : this.isWhitePieceOnSquare(endPosition))\r\n                        || this.isSquareEmpty(endPosition) || isKingInCheck)) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n\r\n            case \"P\":\r\n                return this.isPawnMoveLegal(startPosition,\r\n                    endPosition, whitePlayer, isKingInCheck);\r\n            case \"K\":\r\n\r\n                return this.isKingMoveLegal(startPosition,\r\n                    endPosition, this.mode === this.chessboardUsageModes.ANALYZING ? this.whiteMove : whitePlayer, null);\r\n            case \"B\":\r\n                return this.isBishopMoveLegal(startPosition,\r\n                    endPosition, isKingInCheck);\r\n            case \"R\":\r\n                return this.isRookMoveLegal(startPosition,\r\n                    endPosition, isKingInCheck);\r\n            case \"Q\":\r\n                return this.isBishopMoveLegal(startPosition,\r\n                    endPosition, isKingInCheck)\r\n                    || this.isRookMoveLegal(startPosition,\r\n                        endPosition, isKingInCheck);\r\n            default:\r\n                return true;\r\n        }\r\n\r\n    };\r\n\r\n    isSquareEmpty(square) {\r\n        return square.piece === \"empty\";\r\n    }\r\n\r\n    isBlackPieceOnSquare(square) {\r\n        return square.piece.indexOf(\"W\") === -1 && !this.isSquareEmpty(square);\r\n    }\r\n\r\n    isWhitePieceOnSquare(square) {\r\n        return square.piece.indexOf(\"W\") !== -1 && !this.isSquareEmpty(square);\r\n    }\r\n\r\n    isPieceOnSquare(square, piece) {\r\n        return square.piece.indexOf(piece) !== -1;\r\n    }\r\n\r\n    canAnyOponentsPieceMoveToSquare(\r\n        chessboard, row, column, whiteMove, ignoreKings, isKingInCheck = false) {\r\n        let pieceFound = false;\r\n        let targetSquare = this.findSquare(column, row);\r\n        let colour = whiteMove ? \"black\" : \"white\";\r\n        console.log(\"Can any \" + colour + \" piece move to square \" + this.getSquareAsString(targetSquare) + \"?\");\r\n\r\n        for (let i = 0; i < chessboard.squares.length; i++) {\r\n            let initialSquare = chessboard.squares[i];\r\n            if (ignoreKings === true && initialSquare.piece.indexOf('K') !== -1) {\r\n                continue;\r\n            }\r\n            if (!this.isSquareEmpty(initialSquare)) {\r\n                if ((whiteMove === true && this.isBlackPieceOnSquare(\r\n                    initialSquare))\r\n                    || (whiteMove === false && this.isWhitePieceOnSquare(\r\n                        initialSquare))) {\r\n\r\n\r\n                    if (this\r\n                        .checkLegalityOfMove(\r\n                            initialSquare,\r\n                            targetSquare,\r\n                            this.whitePlayer, isKingInCheck) === true) {\r\n\r\n                        console\r\n                            .log(\"Following piece can move to target square \" + this.getSquareAsString(targetSquare) + \": \"\r\n                                + initialSquare.piece\r\n                                + \".\");\r\n                        pieceFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return pieceFound;\r\n\r\n    }\r\n\r\n    isKingMated(chessboard, kingPosition,\r\n        checkingPiecePosition) {\r\n\r\n        let x = [1, 1, 1, -1, -1, -1, 0, 0];\r\n        let y = [0, 1, -1, 0, 1, -1, 1, -1];\r\n        let numberOfLegalSquareForKingMove = 8;\r\n\r\n        for (let i = 0; i < x.length; i++) {\r\n\r\n            let targetSquareIndex = this.findIndexOfSquare(\r\n                kingPosition.column + x[i],\r\n                kingPosition.row + y[i]);\r\n            let targetSquare = chessboard.squares[targetSquareIndex];\r\n            if (typeof targetSquare !== 'undefined' && this.isKingMoveLegal(kingPosition, targetSquare, this.whitePlayer, true) === false) {\r\n                console.log(\"Retracting square:\"\r\n                    + this.getSquareAsString(targetSquare));\r\n                numberOfLegalSquareForKingMove--;\r\n            } else if (typeof targetSquare === 'undefined') {\r\n                console.log(\"Retracting invalid square:\"\r\n                    + (kingPosition.column + x[i]) + \" \" + (kingPosition.row + y[i]));\r\n                numberOfLegalSquareForKingMove--;\r\n            } else {\r\n                console\r\n                    .log(\"Valid square for king move:\"\r\n                        + this.getSquareAsString(targetSquare));\r\n            }\r\n\r\n        }\r\n        if (numberOfLegalSquareForKingMove > 0) {\r\n            // console.log(\"King not mated:\"\r\n            // + numberOfLegalSquareForKingMove);\r\n            return false;\r\n        } else {\r\n            console.log(\"King has no squares.\");\r\n            if (this.canMateBePrevented(chessboard,\r\n                kingPosition,\r\n                checkingPiecePosition, this.whiteMove) === true) {\r\n                console.log(\"Mate can be prevented.\");\r\n                return false;\r\n            }\r\n            // console.log(\"King is mated.\");\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    isKingInCheckOrAndMate(chessboard,\r\n        whiteMove, startPosition, endPosition) {\r\n        let kingPosition = { row: null, column: null, piece: null };\r\n        let kingInCheckOrAndMate = { check: false, mate: false };\r\n\r\n        chessboard.squares\r\n            .forEach((square) => {\r\n                if (endPosition.piece.indexOf(\"W\") !== -1 ? square.piece\r\n                    .indexOf(\"BK\") !== -1\r\n                    : square.piece\r\n                        .indexOf(\"WK\") !== -1) {\r\n                    kingPosition.row = square.row;\r\n                    kingPosition.column = square.column;\r\n                    kingPosition.piece = square.piece;\r\n                }\r\n\r\n            });\r\n\r\n        if (this.checkLegalityOfMove(\r\n            endPosition,\r\n            kingPosition,\r\n            whiteMove, false) === true) {\r\n            console.log(\"Checking piece \" + endPosition.piece);\r\n            kingInCheckOrAndMate.check = true;\r\n            kingInCheckOrAndMate.mate = this.isKingMated(\r\n                chessboard,\r\n                kingPosition,\r\n                endPosition);\r\n        } else {\r\n            chessboard.squares\r\n                .forEach((square) => {\r\n                    if (whiteMove === false ? this.isBlackPieceOnSquare(square)\r\n                        : this.isWhitePieceOnSquare(square)) {\r\n                        if (this.checkLegalityOfMove(\r\n                            square,\r\n                            kingPosition,\r\n                            whiteMove, false) === true) {\r\n                            console.log(\"Checking piece \" + square.piece);\r\n                            kingInCheckOrAndMate.check = true;\r\n                            kingInCheckOrAndMate.mate = this.isKingMated(\r\n                                chessboard,\r\n                                kingPosition,\r\n                                endPosition);\r\n                        }\r\n                    }\r\n\r\n\r\n                });\r\n        }\r\n        return kingInCheckOrAndMate;\r\n\r\n    }\r\n\r\n    /*   highlightLastMoveInNotation(whiteMoveToHighlight:boolean, moveNumber:number, variationId:number){\r\n          let elementId:string;\r\n  \r\n          if (whiteMoveToHighlight) {\r\n              if (variationId === this.MAIN_LINE) {\r\n                  elementId = \"annotatedMoveWhite\" + moveNumber;\r\n              } else {\r\n                  elementId = 'moveOfVariationNo' + variationId + \"White\" + moveNumber;\r\n              }\r\n          } else {\r\n              //decreasing as in the FEN after black move the moveNumber is increased\r\n              moveNumber = moveNumber - 1;\r\n              if (variationId === this.MAIN_LINE) {\r\n                  elementId = \"annotatedMoveBlack\" + moveNumber;\r\n              } else {\r\n                  elementId = 'moveOfVariationNo' + variationId + \"Black\" + moveNumber;\r\n              }\r\n          }\r\n  \r\n           $('td[id ^= \"annotatedMove\"]').css('font-weight', 'normal');\r\n          $('a[id ^= \"moveOfVariation\"]').css('font-weight', 'normal');\r\n          $(\"#\" + elementId).css('font-weight', 'bold'); \r\n  \r\n      } */\r\n\r\n\r\n    redrawChessboard(fen: string, variationId: number) {\r\n        //redrawChessboard  (currentSquares, elementId, whiteMove, moveNo, variationId, redrawPreviousMove) {\r\n\r\n        const fenParts: string[] = fen.split(\" \");\r\n        let lastMoveNumber: number = parseInt(fenParts[5]);\r\n        const whiteMoveToRedraw = fenParts[1] === COLOR.black ? true : false;\r\n        let elementId: string;\r\n\r\n        if (variationId === this.MAIN_LINE) {\r\n            this.currentVariation = null;\r\n        } else {\r\n            this.currentVariation = this.variations.get(variationId);;\r\n        }\r\n\r\n        this.whiteMove = whiteMoveToRedraw;\r\n        this.moveNumber = whiteMoveToRedraw ? lastMoveNumber - 1 : lastMoveNumber - 2;\r\n\r\n        this.highlightLastMoveInNotation();\r\n\r\n        this.whiteMove = !this.whiteMove;\r\n        if (!whiteMoveToRedraw) {\r\n            this.moveNumber = this.moveNumber + 1;\r\n        }\r\n\r\n        this.chess.load(fen);\r\n        this.svgChessboard.setPosition(fen);\r\n\r\n        if (this.mode === this.chessboardUsageModes.ANALYZING) {\r\n            const color = this.whiteMove ? COLOR.white : COLOR.black;\r\n            this.svgChessboard.enableMoveInput(this.moveInputHandler, color);\r\n            this.chessboard.squares = JSON.parse(JSON.stringify(fen));\r\n        }\r\n\r\n    };\r\n\r\n    drawLastMove(startPosition,\r\n        endPosition) {\r\n        console.log(\"Drawing move\");\r\n        console.log(startPosition, endPosition);\r\n        let chessboardsize = document.getElementById(\"chessboardOverlay\").offsetWidth;\r\n        let squaresize = Math.floor(chessboardsize / 8);\r\n\r\n        this.createLine(\r\n            this.whitePlayer ?\r\n                (startPosition.column + 1) * squaresize - squaresize / 2 :\r\n                (8 - startPosition.column) * squaresize - squaresize / 2,\r\n            this.whitePlayer ?\r\n                (8 - startPosition.row) * squaresize - squaresize / 2 :\r\n                (startPosition.row) * squaresize + squaresize / 2,\r\n            this.whitePlayer ?\r\n                (endPosition.column + 1) * squaresize - squaresize / 2 :\r\n                (8 - endPosition.column) * squaresize - squaresize / 2,\r\n            this.whitePlayer ?\r\n                (8 - endPosition.row) * squaresize - (!this.whiteMove ? 0.5 * squaresize : squaresize / 2) :\r\n                (endPosition.row) * squaresize + (!this.whiteMove ? 0.5 * squaresize : squaresize / 2)\r\n        );\r\n\r\n        this.eraseAllHighlightedSquares();\r\n        this.highlightSquare(startPosition, squaresize, squaresize);\r\n        this.highlightSquare(endPosition, squaresize, squaresize);\r\n\r\n    };\r\n\r\n    eraseAllHighlightedSquares() {\r\n        $(\".rect\").remove();\r\n    }\r\n\r\n    highlightSquare(square, width, height) {\r\n        let y = this.whitePlayer ? (7 - square.row) * width : (square.row) * width;\r\n        let x = this.whitePlayer ? (square.column) * width : (7 - square.column) * width;\r\n        let svgNS = \"http://www.w3.org/2000/svg\";\r\n        let rectangular = document.createElementNS(svgNS, \"rect\");\r\n        rectangular.setAttributeNS(null, 'class', 'rect');\r\n        rectangular.setAttributeNS(null, 'x', x.toString());\r\n        rectangular.setAttributeNS(null, 'y', y.toString());\r\n        rectangular.setAttributeNS(null, 'width', width.toString());\r\n        rectangular.setAttributeNS(null, 'height', height.toString());\r\n        rectangular.setAttributeNS(null, 'style', 'fill:none;stroke:yellow;stroke-width:2');\r\n\r\n        document.getElementById(\"svgId\").appendChild(rectangular);\r\n\r\n        return rectangular\r\n\r\n    }\r\n\r\n    createLineElement(x1, y1, x2, y2) {\r\n        let svgNS = \"http://www.w3.org/2000/svg\";\r\n        let line = document.createElementNS(svgNS, \"path\");\r\n        line.setAttributeNS(null, \"id\", \"arrow\");\r\n        line.setAttributeNS(null, \"stroke-width\", '4');\r\n        line.setAttributeNS(null, \"marker-end\", \"url(#head)\");\r\n        line.setAttributeNS(null, \"fill\", \"none\");\r\n        line.setAttributeNS(null, \"stroke\", \"blue\");\r\n\r\n        line.setAttributeNS(null, \"opacity\", \"0.2\");\r\n        line.setAttributeNS(null, \"d\", 'M' + Math.floor(x1) + \" \" + Math.floor(y1) + \" \" + Math.floor(x2) + \" \" + Math.floor(y2));\r\n\r\n        return line;\r\n    }\r\n\r\n    createLine(x1, y1, x2, y2) {\r\n        $(\"#arrow\").remove();\r\n\r\n        let line = this.createLineElement(x1, y1, x2, y2);\r\n        document.getElementById(\"svgId\").appendChild(line);\r\n\r\n\r\n    }\r\n\r\n    movePieceToCoordinates(piece, row, column) {\r\n\r\n        let top = ((((this\r\n            .getInitialPositionOfPiece(piece).row) - row) * this.squareSize) + (0.13 * this.squareSize));\r\n        let left = (((column - (this\r\n            .getInitialPositionOfPiece(piece)).column) * this.squareSize) + (0.13 * this.squareSize));\r\n\r\n        $(\"#\" + piece).css({\r\n\r\n            top: this.whitePlayer ? top + 'px' : (top\r\n                * (-1) + (0.26 * this.squareSize))\r\n                + 'px',\r\n            left: this.whitePlayer ? left + 'px' : (left\r\n                * (-1) + (0.26 * this.squareSize))\r\n                + 'px',\r\n\r\n        });\r\n\r\n    };\r\n\r\n    movePieceOnBoard(element, startPosition,\r\n        endPosition, whitePlayer) {\r\n        let top = ((((this.\r\n            getInitialPositionOfPiece(startPosition.piece).row) - endPosition.row) * this.squareSize) + (0.13 * this.squareSize));\r\n        let left = (((endPosition.column - (this\r\n            .getInitialPositionOfPiece(startPosition.piece)).column) * this.squareSize) + (0.13 * this.squareSize));\r\n\r\n        element.css({\r\n            top: whitePlayer ? top + 'px' : (top\r\n                * (-1) + (0.26 * this.squareSize))\r\n                + 'px',\r\n            left: whitePlayer ? left + 'px' : (left\r\n                * (-1) + (0.26 * this.squareSize))\r\n                + 'px',\r\n        });\r\n    }\r\n\r\n    updateChessboardAfterMove(startPiece,\r\n        element, startSquare, endSquare,\r\n        ownMove, whitePlayer, promotedPiece) {\r\n\r\n        console.log(\"Position before start updatechessboard:\");\r\n        if (this.chessboard.annotatedMoves.length > 0 && typeof this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove !== 'undefined') {\r\n            this.printSquares(this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove);\r\n        }\r\n        if (this.chessboard.annotatedMoves.length > 0 && typeof this.chessboard.annotatedMoves[0].chessboardAfterBlackMove !== 'undefined' && this.chessboard.annotatedMoves[0].chessboardAfterBlackMove.length !== 0) {\r\n            this.printSquares(this.chessboard.annotatedMoves[0].chessboardAfterBlackMove);\r\n        }\r\n\r\n        let capture = false;\r\n        this.movePieceOnBoard(element, startSquare,\r\n            endSquare, whitePlayer);\r\n\r\n\r\n        console.log(\"Position vefore en passant:\");\r\n        if (this.chessboard.annotatedMoves.length > 0 && typeof this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove !== 'undefined') {\r\n            this.printSquares(this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove);\r\n        }\r\n        if (this.chessboard.annotatedMoves.length > 0 && typeof this.chessboard.annotatedMoves[0].chessboardAfterBlackMove !== 'undefined' && this.chessboard.annotatedMoves[0].chessboardAfterBlackMove.length !== 0) {\r\n            this.printSquares(this.chessboard.annotatedMoves[0].chessboardAfterBlackMove);\r\n        }\r\n\r\n        if (!this.isSquareEmpty(endSquare)\r\n            || this.pieceTakenEnPassant(startSquare,\r\n                endSquare, whitePlayer) === true) {\r\n            capture = true;\r\n\r\n            if (this.enPassant === true) {\r\n\r\n                let enPassantPawnTakenRow = this.myMove ?\r\n                    whitePlayer ? endSquare.row - 1 : endSquare.row + 1\r\n                    : !whitePlayer ? endSquare.row - 1 : endSquare.row + 1;\r\n                let enPassantPawnSquare = this.findSquare(endSquare.column, enPassantPawnTakenRow);\r\n                $(\"#\" + enPassantPawnSquare.piece).hide();\r\n                enPassantPawnSquare.piece = \"empty\";\r\n                this.enPassant = false;\r\n            } else {\r\n                $(\"#\" + endSquare.piece).hide();\r\n            }\r\n        }\r\n\r\n\r\n\r\n        if (typeof promotedPiece !== 'undefined') {\r\n            let promotedPieceFullName = promotedPiece + endSquare.column + endSquare.row;\r\n\r\n            $(element).prop('id', promotedPieceFullName);\r\n            $(element).css('top', \"8px\");\r\n            $(element).css('left', \"10px\");\r\n            $(element).attr('src', 'http://localhost:8082/images/pieces/' + promotedPiece + '.png');\r\n            $(element).detach().appendTo('#squareDiv' + endSquare.column + endSquare.row);\r\n\r\n            /*let indexOfNewPiece =chessboard.pieces.length;\r\n            chessboard.pieces[indexOfNewPiece] = {};\r\n            chessboard.pieces[indexOfNewPiece].row = endSquare.row;\r\n            chessboard.pieces[indexOfNewPiece].column = endSquare.column;\r\n            chessboard.pieces[indexOfNewPiece].piece = promotedPieceFullName;*/\r\n\r\n\r\n\r\n            let indexOfPiece = this.getInitialPositionOfPiece(startPiece).index;\r\n            this.chessboard.pieces[indexOfPiece].column = endSquare.column;\r\n            this.chessboard.pieces[indexOfPiece].row = endSquare.row;\r\n            this.chessboard.pieces[indexOfPiece].piece = promotedPieceFullName;\r\n\r\n            endSquare.piece = promotedPieceFullName;\r\n            this.findSquare(endSquare.column, endSquare.row).piece = promotedPieceFullName;\r\n            startSquare.piece = \"empty\";\r\n            this.findSquare(startSquare.column, startSquare.row).piece = \"empty\"\r\n        } else {\r\n\r\n            endSquare.piece = startPiece;\r\n            this.findSquare(endSquare.column, endSquare.row).piece = startPiece;\r\n            startSquare.piece = \"empty\";\r\n            this.findSquare(startSquare.column, startSquare.row).piece = \"empty\";\r\n\r\n        }\r\n\r\n\r\n\r\n        if (this.hasThreeFoldRepetitionOccurred()) {\r\n            this.endGame(\"1/2 - 1/2 (three fold repetition)\");\r\n            if (whitePlayer) {\r\n                this.sendGameResult();\r\n            }\r\n        }\r\n        let kingInCheckOrAndMate = this.isKingInCheckOrAndMate(\r\n            this.chessboard, this.whiteMove,\r\n            startSquare, endSquare);\r\n\r\n\r\n\r\n        this.drawLastMove(startSquare, endSquare);\r\n\r\n\r\n        if (this.castling === \"0-0\" || this.castling === \"0-0-0\") {\r\n            this.moveRookIfPlayerCastled();\r\n        }\r\n\r\n\r\n        /*   let annotatedMove = this.addAnnotation(\r\n              startSquare,\r\n              endSquare,\r\n              capture,\r\n              typeof promotedPiece !== 'undefined', this.castling,\r\n              kingInCheckOrAndMate.check,\r\n              kingInCheckOrAndMate.mate);\r\n  \r\n          if (ownMove && this.mode === this.chessboardUsageModes.PLAYING) {\r\n              this.sendMove(\r\n                  typeof promotedPiece !== 'undefined' ? startPiece\r\n                      : endSquare.piece,\r\n                  startSquare, endSquare, null,\r\n                  promotedPiece, annotatedMove);\r\n          } */\r\n\r\n        if (kingInCheckOrAndMate.mate === true) {\r\n            this.endGame(this.whiteMove === true ? \"1-0\" : \"0-1\");\r\n            this.sendGameResult();\r\n        }\r\n\r\n        this.castling = \"\";\r\n        this.whiteMove = !this.whiteMove;\r\n\r\n\r\n    };\r\n\r\n\r\n    moveRookIfPlayerCastled() {\r\n        let targetSquare;\r\n        let piece;\r\n        let initialSquare;\r\n        let initialSquareCoordinates;\r\n\r\n        if (this.castling === \"0-0\") {\r\n\r\n            if (this.whiteMove) {\r\n                piece = \"WR70\";\r\n                targetSquare = this.findSquare(5, 0);\r\n                initialSquareCoordinates = this\r\n                    .getInitialPositionOfPiece(\"WR70\");\r\n                initialSquare = this.findSquare(initialSquareCoordinates.column, initialSquareCoordinates.row);\r\n            } else {\r\n                targetSquare = this.findSquare(5, 7);\r\n                piece = \"BR77\";\r\n                initialSquareCoordinates = this\r\n                    .getInitialPositionOfPiece(piece);\r\n                initialSquare = this.findSquare(initialSquareCoordinates.column, initialSquareCoordinates.row);\r\n            }\r\n        } else if (this.castling === \"0-0-0\") {\r\n            if (this.whiteMove) {\r\n                console.log(\"White on move.\");\r\n                targetSquare = this.findSquare(3, 0);\r\n                piece = \"WR00\";\r\n                initialSquareCoordinates = this\r\n                    .getInitialPositionOfPiece(piece);\r\n                initialSquare = this.findSquare(initialSquareCoordinates.column, initialSquareCoordinates.row);\r\n\r\n            } else {\r\n                console.log(\"Black on move.\");\r\n                targetSquare = this.findSquare(3, 7);\r\n                piece = \"BR07\";\r\n                initialSquareCoordinates = this\r\n                    .getInitialPositionOfPiece(piece);\r\n                initialSquare = this.findSquare(initialSquareCoordinates.column, initialSquareCoordinates.row);\r\n\r\n            }\r\n        }\r\n\r\n        this.movePieceOnBoard(\r\n            $(\"#\" + piece),\r\n            initialSquareCoordinates,\r\n            targetSquare, this.whitePlayer);\r\n\r\n        targetSquare.piece = piece;\r\n        this.findSquare(targetSquare.column, targetSquare.row).piece = piece;\r\n        initialSquare.piece = \"empty\";\r\n        this.findSquare(initialSquare.column, initialSquare.row).piece = \"empty\";\r\n        this.printCurrentChessboard();\r\n    }\r\n\r\n    hasThreeFoldRepetitionOccurred() {\r\n\r\n        let threefoldrepetitionOccurred = false;\r\n        let chessboardAsString = this.printCurrentChessboard();\r\n        let numberOfOccurrences = 0;\r\n        if (this.positionOccurrencesMap.has(chessboardAsString)) {\r\n            numberOfOccurrences = this.positionOccurrencesMap.get(chessboardAsString) + 1;\r\n        }\r\n        this.positionOccurrencesMap.set(chessboardAsString, numberOfOccurrences);\r\n        if (numberOfOccurrences === 3) {\r\n            threefoldrepetitionOccurred = true;\r\n        }\r\n        return threefoldrepetitionOccurred;\r\n\r\n    }\r\n\r\n    hasKingAlreadyMoved(color) {\r\n        let hasKingAlreadyMoved = false;\r\n        this.chessboard.annotatedMoves\r\n            .forEach((move) => {\r\n                if (color === \"white\" && (move.whiteMove.indexOf(\"K\") !== -1 || move.whiteMove.indexOf(\"0\") !== -1)) {\r\n                    hasKingAlreadyMoved = true;\r\n                } else if (color === \"black\" && (move.blackMove.indexOf(\"K\") !== -1 || move.blackMove.indexOf(\"0\") !== -1)) {\r\n                    hasKingAlreadyMoved = true;\r\n                }\r\n            });\r\n        return hasKingAlreadyMoved;\r\n    }\r\n\r\n    rookMovedDueToCastling(piece) {\r\n        let rookMovedDueToCastling = false;\r\n        this.chessboard.annotatedMoves\r\n            .forEach((move) => {\r\n                if (piece === 'WR70' && move.whiteMove.indexOf(\"0-0\") !== -1) {\r\n                    rookMovedDueToCastling = true;\r\n                } else if (piece === 'WR00' && move.whiteMove.indexOf(\"0-0-0\") !== -1) {\r\n                    rookMovedDueToCastling = true;\r\n                } else if (piece === 'BR07' && move.blackMove.indexOf(\"0-0-0\") !== -1) {\r\n                    rookMovedDueToCastling = true;\r\n                } else if (piece === 'BR77' && move.blackMove.indexOf(\"0-0\") !== -1) {\r\n                    rookMovedDueToCastling = true;\r\n                }\r\n\r\n\r\n            });\r\n        return rookMovedDueToCastling;\r\n    };\r\n\r\n    printSquares(squares) {\r\n        let chessboardAsString = \"\";\r\n        for (let rowIndex = 7; rowIndex >= 0; rowIndex--) {\r\n            for (let columnIndex = 0; columnIndex <= 7; columnIndex++) {\r\n                let squareIndex;\r\n                for (let index = 0; index < squares.length; index++) {\r\n                    if (squares[index].column === columnIndex\r\n                        && squares[index].row === rowIndex) {\r\n\r\n                        squareIndex = index;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                let piece = squares[squareIndex].piece;\r\n                if (piece === 'empty') {\r\n                    piece = '-';\r\n                } else {\r\n                    if (piece.indexOf(\"W\") !== -1) {\r\n                        piece = piece.toLowerCase();\r\n                    }\r\n                    piece = piece.substring(1, 2);\r\n\r\n                }\r\n                chessboardAsString += piece;\r\n                if (columnIndex !== 0 && columnIndex % 7 === 0) {\r\n                    chessboardAsString += \"\\n\";\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        console.log(chessboardAsString);\r\n        return chessboardAsString;\r\n    }\r\n\r\n    printCurrentChessboard() {\r\n        let chessboardAsString = \"\";\r\n        for (let rowIndex = 7; rowIndex >= 0; rowIndex--) {\r\n            for (let columnIndex = 0; columnIndex <= 7; columnIndex++) {\r\n\r\n                let piece = this.findSquare(columnIndex, rowIndex).piece;\r\n                if (piece === 'empty') {\r\n                    piece = '-';\r\n                } else {\r\n                    if (piece.indexOf(\"W\") !== -1) {\r\n                        piece = piece.toLowerCase();\r\n                    }\r\n                    piece = piece.substring(1, 2);\r\n\r\n                }\r\n                chessboardAsString += piece;\r\n                if (columnIndex !== 0 && columnIndex % 7 === 0) {\r\n                    chessboardAsString += \"\\n\";\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        console.log(chessboardAsString);\r\n        return chessboardAsString;\r\n    }\r\n\r\n    /* addAnnotation(startSquare,\r\n                          endSquare, capture, promotion,\r\n                          castling, check, mate) { */\r\n\r\n    addAnnotation(moveNotation) {\r\n\r\n        /* if (castling === \"0-0\" || castling === \"0-0-0\") {\r\n            moveNotation = castling;\r\n        } else {\r\n            let pieceSymbol = (this.isPieceOnSquare(endSquare, \"P\") || promotion === true) ?\r\n                capture ? this.getSquareAsString(startSquare).substring(0, 1) : \"\"\r\n                : endSquare.piece.substr(1, 1);\r\n            let captureSymbol = capture ? \"x\" : \"\";\r\n            let promotionSymbol = promotion === true ? '=' + endSquare.piece.substr(1, 1) : \"\";\r\n            let checkSymbol = check ? \"+\" : \"\";\r\n            let mateSymbol = mate === true ? \"#\" : \"\";\r\n\r\n            let endSquareAsString = this.getSquareAsString(endSquare);\r\n            moveNotation = pieceSymbol\r\n                + captureSymbol + endSquareAsString\r\n                + promotionSymbol + checkSymbol\r\n                + mateSymbol;\r\n        } */\r\n\r\n        //let whiteMove = endSquare.piece.indexOf(\"W\") !== -1;\r\n        let whiteMove = this.whiteMove;\r\n        let movecomplete;\r\n        let currentchessboard = JSON.parse(JSON.stringify(this.chessboard.squares));\r\n\r\n        if (this.whiteMove) {\r\n            let newMove = { whiteMove: null, blackMove: null, whiteMoveStartSquare: null, whiteMoveEndSquare: null, blackMoveStartSquare: null, blackMoveEndSquare: null, whiteMoveVariations: [], blackMoveVariations: [], moveNumber: null, chessboardAfterWhiteMove: null, chessboardAfterBlackMove: null };\r\n            newMove = this.addNewAnnotatedMove(moveNotation, currentchessboard, whiteMove);\r\n\r\n            if (this.chessboard.annotatedMoves.length > this.moveNumber || this.currentVariation) {\r\n\r\n                if (!this.currentVariation) {\r\n                    //adding white move to main line\r\n                    let variations = this.chessboard.annotatedMoves[this.moveNumber].whiteMoveVariations;\r\n                    let numberOfVariations = variations.length;\r\n                    let newVariationNeedsToBeCreated = true;\r\n                    for (let i = 0; i < numberOfVariations; i++) {\r\n                        if (variations[i].moves[0].whiteMove === newMove.whiteMove) {\r\n                            this.currentVariation = variations[i];\r\n                            newVariationNeedsToBeCreated = false;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (newVariationNeedsToBeCreated) {\r\n                        this.chessboard.annotatedMoves[this.moveNumber].whiteMoveVariations[numberOfVariations] = { moves: [] };\r\n                        this.chessboard.annotatedMoves[this.moveNumber].whiteMoveVariations[numberOfVariations].moves[0] = newMove;\r\n                        this.chessboard.annotatedMoves[this.moveNumber].whiteMoveVariations[numberOfVariations].variationId = this.variationId;\r\n                        this.currentVariation = {\r\n                            \"variationId\": this.variationId,\r\n                            \"moveNumber\": this.moveNumber,\r\n                            \"whiteMove\": whiteMove,\r\n                            \"variationIndex\": numberOfVariations,\r\n                            \"moves\": this.chessboard.annotatedMoves[this.moveNumber].whiteMoveVariations[numberOfVariations].moves\r\n                        };\r\n                        this.variations.set(this.variationId, this.currentVariation);\r\n                        this.variationId++;\r\n                        /*   console.log(\"Position end of create variation:\");\r\n                          if(this.chessboard.annotatedMoves.length > 0 && typeof this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove !== 'undefined' ){\r\n                              this.printSquares(this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove);}\r\n                          if(this.chessboard.annotatedMoves.length > 0 && typeof this.chessboard.annotatedMoves[0].chessboardAfterBlackMove !== 'undefined' && this.chessboard.annotatedMoves[0].chessboardAfterBlackMove.length!==0){\r\n                              this.printSquares(this.chessboard.annotatedMoves[0].chessboardAfterBlackMove);} */\r\n                    }\r\n\r\n                } else {\r\n                    //adding white move to an existing variation\r\n                    let variation = this.variations.get(this.currentVariation.variationId);\r\n                    let moveNumberInVariation = this.moveNumber - variation.moveNumber;\r\n                    if (variation.moves.length > moveNumberInVariation) {\r\n                        let newVariationNeedsToBeCreated = true;\r\n                        let variations = variation.moves[moveNumberInVariation].whiteMoveVariations;\r\n                        let numberOfVariations = variations.length;\r\n\r\n                        for (let i = 0; i < numberOfVariations; i++) {\r\n                            if (variations[i].moves[0].whiteMove === newMove.whiteMove) {\r\n                                this.currentVariation = variations[i];\r\n                                newVariationNeedsToBeCreated = false;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if (newVariationNeedsToBeCreated) {\r\n                            /*   console.log(\"Creating new variation: \" + this.variationId + \" with the white starting move \" + newMove.whiteMove);\r\n                              console.log(this.printSquares(newMove.chessboardAfterWhiteMove)); */\r\n\r\n                            variation.moves[moveNumberInVariation].whiteMoveVariations[numberOfVariations] = { moves: [] };\r\n                            //newMove.moveNumber = this.moveNumber + 1;\r\n                            variation.moves[moveNumberInVariation].whiteMoveVariations[numberOfVariations].moves[0] = newMove;\r\n                            variation.moves[moveNumberInVariation].whiteMoveVariations[numberOfVariations].variationId = this.variationId;\r\n                            this.currentVariation = {\r\n                                \"variationId\": this.variationId,\r\n                                \"parentVariationId\": variation.variationId,\r\n                                \"moveNumber\": this.moveNumber,\r\n                                \"whiteMove\": whiteMove,\r\n                                \"variationIndex\": numberOfVariations,\r\n                                \"moves\": variation.moves[moveNumberInVariation].whiteMoveVariations[numberOfVariations].moves\r\n                            };\r\n                            this.variations.set(this.currentVariation.variationId, this.currentVariation);\r\n                            this.variationId++;\r\n                        }\r\n\r\n                    } else {\r\n                        //adding white move to existing variation\r\n                        //newMove.moveNumber = variation.moves.length + 1;\r\n                        variation.moves[variation.moves.length] = newMove;\r\n                    }\r\n                }\r\n            } else {\r\n\r\n                this.chessboard.annotatedMoves[this.moveNumber] = newMove;\r\n\r\n            }\r\n\r\n            movecomplete = false;\r\n        } else {\r\n\r\n            //annotating black move\r\n            if (this.currentVariation || this.chessboard.annotatedMoves[this.moveNumber].blackMove !== \"\") {\r\n                if (!this.currentVariation) {\r\n\r\n                    let variations = this.chessboard.annotatedMoves[this.moveNumber].blackMoveVariations;\r\n                    let numberOfVariations = variations.length;\r\n                    let newVariationNeedsToBeCreated = true;\r\n\r\n                    if (numberOfVariations === 0 && this.chessboard.annotatedMoves[this.moveNumber].blackMove === moveNotation) {\r\n                        newVariationNeedsToBeCreated = false;\r\n                    } else {\r\n                        for (let i = 0; i < numberOfVariations; i++) {\r\n                            if (variations[i].moves[0].blackMove === moveNotation) {\r\n                                newVariationNeedsToBeCreated = false;\r\n                                this.currentVariation = variations[i];\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (newVariationNeedsToBeCreated) {\r\n                        /*   console.log(\"Chessboard in the mainline start:\");\r\n                          console.log( this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove));\r\n                          console.log( this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterBlackMove)); */\r\n                        //new variation with a black starting move created\r\n                        this.chessboard.annotatedMoves[this.moveNumber].blackMoveVariations[numberOfVariations] = { moves: [] };\r\n                        let newMove = this.addNewAnnotatedMove(moveNotation, currentchessboard, whiteMove);\r\n                        this.chessboard.annotatedMoves[this.moveNumber].blackMoveVariations[numberOfVariations].moves[0] = newMove;\r\n                        this.chessboard.annotatedMoves[this.moveNumber].blackMoveVariations[numberOfVariations].variationId = this.variationId;\r\n                        this.currentVariation = {\r\n                            \"variationId\": this.variationId,\r\n                            \"moveNumber\": this.moveNumber,\r\n                            \"whiteMove\": this.whiteMove,\r\n                            \"variationIndex\": numberOfVariations,\r\n                            \"moves\": this.chessboard.annotatedMoves[this.moveNumber].blackMoveVariations[numberOfVariations].moves\r\n                        };\r\n                        this.variations.set(this.currentVariation.variationId, this.currentVariation);\r\n                        this.variationId++;\r\n\r\n                        /*        console.log(\"Creating new variation: \"+ this.variationId + \" with the black starting move \"+newMove.blackMove);\r\n                               console.log( this.printSquares(newMove.chessboardAfterBlackMove));\r\n                               console.log(\"Chessboard in the mainline end:\");\r\n       \r\n                               console.log( this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove));\r\n                               console.log( this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterBlackMove)); */\r\n                    }\r\n                } else {\r\n                    //adding black move to an existing variation\r\n                    let variation = this.variations.get(this.currentVariation.variationId);\r\n                    let newVariationNeedsToBeCreated = true;\r\n                    let moveNumberInVariation = this.moveNumber - variation.moveNumber;\r\n\r\n                    if (variation.moves[moveNumberInVariation].blackMove !== \"\") {\r\n\r\n                        let variations = variation.moves[moveNumberInVariation].blackMoveVariations;\r\n                        let numberOfVariations = variations.length;\r\n\r\n                        for (let i = 0; i < numberOfVariations; i++) {\r\n                            if (variations[i].moves[0].blackMove === moveNotation) {\r\n                                newVariationNeedsToBeCreated = false;\r\n                                this.currentVariation = variations[i];\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        //adding variation starting with a black move\r\n                        if (newVariationNeedsToBeCreated) {\r\n                            variation.moves[moveNumberInVariation].blackMoveVariations[numberOfVariations] = { moves: [] };\r\n                            variation.moves[moveNumberInVariation].blackMoveVariations[numberOfVariations].moves[0] = this.addNewAnnotatedMove(moveNotation, currentchessboard, whiteMove);\r\n                            variation.moves[moveNumberInVariation].blackMoveVariations[numberOfVariations].variationId = this.variationId;\r\n                            this.currentVariation = {\r\n                                \"variationId\": this.variationId,\r\n                                \"parentVariationId\": variation.variationId,\r\n                                \"moveNumber\": this.moveNumber,\r\n                                \"whiteMove\": whiteMove,\r\n                                \"variationIndex\": numberOfVariations,\r\n                                \"moves\": variation.moves[moveNumberInVariation].blackMoveVariations[numberOfVariations].moves\r\n                            };\r\n                            this.variations.set(this.currentVariation.variationId, this.currentVariation);\r\n                            this.variationId++;\r\n                        }\r\n                    } else {\r\n                        /*  console.log(\"Position before adding black move to existing variation:\");\r\n                         if( this.chessboard.annotatedMoves.length > 0 && typeof  this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove !== 'undefined' ){\r\n                             this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove);}\r\n                         if( this.chessboard.annotatedMoves.length > 0 && typeof  this.chessboard.annotatedMoves[0].chessboardAfterBlackMove !== 'undefined' &&  this.chessboard.annotatedMoves[0].chessboardAfterBlackMove.length!==0){\r\n                             this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterBlackMove);} */\r\n\r\n                        variation.moves[variation.moves.length - 1].blackMove = moveNotation;\r\n                        /*    variation.moves[variation.moves.length - 1].blackMoveStartSquare = startSquare;\r\n                           variation.moves[variation.moves.length - 1].blackMoveEndSquare = endSquare; */\r\n                        variation.moves[variation.moves.length - 1].chessboardAfterBlackMove = this.chess.fen();\r\n                        //variation.moves[variation.moves.length - 1].chessboardAfterBlackMove = currentchessboard;\r\n\r\n                        /*    console.log(\"Position after adding black move to existing variation:\");\r\n                           if( this.chessboard.annotatedMoves.length > 0 && typeof  this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove !== 'undefined' ){\r\n                               this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove);}\r\n                           if( this.chessboard.annotatedMoves.length > 0 && typeof  this.chessboard.annotatedMoves[0].chessboardAfterBlackMove !== 'undefined' &&  this.chessboard.annotatedMoves[0].chessboardAfterBlackMove.length!==0){\r\n                               this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterBlackMove);} */\r\n                    }\r\n                }\r\n\r\n            } else {\r\n\r\n                this.chessboard.annotatedMoves[this.moveNumber].blackMove = moveNotation;\r\n                /*     this.chessboard.annotatedMoves[this.moveNumber].blackMoveStartSquare = startSquare;\r\n                    this.chessboard.annotatedMoves[this.moveNumber].blackMoveEndSquare = endSquare; */\r\n                this.chessboard.annotatedMoves[this.moveNumber].chessboardAfterBlackMove = this.chess.fen();\r\n                // this.chessboard.annotatedMoves[ this.moveNumber].chessboardAfterBlackMove = currentchessboard;\r\n\r\n                /* console.log(\"Position after new mainline black move:\");\r\n                this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove);\r\n                this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterBlackMove); */\r\n            }\r\n            movecomplete = true;\r\n        }\r\n\r\n\r\n\r\n\r\n        this.annotatedMoves = this.chessboard.annotatedMoves;\r\n\r\n        //updateScrollbar('scrollTo', 440);\r\n\r\n        return moveNotation;\r\n    }\r\n\r\n    private highlightLastMoveInNotation() {\r\n        this.moveToHighlight.variationId = this.currentVariation ? this.currentVariation.variationId : this.MAIN_LINE;\r\n        this.moveToHighlight.moveNumber = this.moveNumber;\r\n        this.moveToHighlight.whiteMove = this.whiteMove;\r\n    }\r\n\r\n    addNewAnnotatedMove(moveNotation, currentchessboard, whiteMove) {\r\n        let newAnnotatedMove = { whiteMove: null, blackMove: null, whiteMoveStartSquare: null, whiteMoveEndSquare: null, blackMoveStartSquare: null, blackMoveEndSquare: null, whiteMoveVariations: [], blackMoveVariations: [], moveNumber: null, chessboardAfterWhiteMove: null, chessboardAfterBlackMove: null };\r\n        newAnnotatedMove.whiteMove = whiteMove ? moveNotation : \"\";\r\n        newAnnotatedMove.blackMove = whiteMove ? \"\" : moveNotation;\r\n        /*  newAnnotatedMove.whiteMoveStartSquare = whiteMove ? startSquare : \"\";\r\n         newAnnotatedMove.whiteMoveEndSquare = whiteMove ? endSquare : \"\";\r\n         newAnnotatedMove.blackMoveStartSquare = whiteMove ? \"\" : startSquare;\r\n         newAnnotatedMove.blackMoveEndSquare = whiteMove ? \"\" : endSquare; */\r\n        newAnnotatedMove.whiteMoveVariations = [];\r\n        newAnnotatedMove.blackMoveVariations = [];\r\n        newAnnotatedMove.moveNumber = this.moveNumber + 1;\r\n        // newAnnotatedMove.chessboardAfterWhiteMove = whiteMove ? currentchessboard : [];\r\n        // newAnnotatedMove.chessboardAfterBlackMove = whiteMove ? [] : currentchessboard;\r\n        newAnnotatedMove.chessboardAfterWhiteMove = whiteMove ? this.chess.fen() : \"\";\r\n        newAnnotatedMove.chessboardAfterBlackMove = whiteMove ? \"\" : this.chess.fen();\r\n        return newAnnotatedMove;\r\n    }\r\n\r\n    getSquareAsString(square) {\r\n        return String\r\n            .fromCharCode(97 + square.column)\r\n            + (square.row + 1);\r\n    }\r\n\r\n    findIndexOfSquare(x, y) {\r\n        for (let index = 0; index < this.chessboard.squares.length; index++) {\r\n            if (this.chessboard.squares[index].column === x\r\n                && this.chessboard.squares[index].row === y) {\r\n\r\n                return index;\r\n            }\r\n        }\r\n    }\r\n\r\n    findSquare(x, y) {\r\n        return this.chessboard.squares[this.findIndexOfSquare(x, y)];\r\n    }\r\n\r\n    updatePlayerElos(gameResultWhite, gameResultBlack) {\r\n        // //console.log(elowhite, eloblack,\r\n        // gameResultWhite, gameResultBlack);\r\n        let expectedOutcomeWhite = 1 / (1 + Math.pow(\r\n            10, (this.blackPlayerElo - this.whitePlayerElo) / 400));\r\n        let expectedOutcomeBlack = 1 / (1 + Math.pow(\r\n            10, (this.whitePlayerElo - this.blackPlayerElo) / 400));\r\n        let newRatingWhite = Math\r\n            .round(this.whitePlayerElo\r\n                + 15\r\n                * (gameResultWhite - expectedOutcomeWhite));\r\n        let newRatingBlack = Math\r\n            .round(this.blackPlayerElo\r\n                + 15\r\n                * (gameResultBlack - expectedOutcomeBlack));\r\n\r\n        this.whitePlayerEloChange = newRatingWhite - this.whitePlayerElo;\r\n        this.blackPlayerEloChange = newRatingBlack - this.blackPlayerElo;\r\n        this.whitePlayerElo = newRatingWhite;\r\n        this.blackPlayerElo = newRatingBlack;\r\n\r\n\r\n        /*return {\r\n            \"newRatingWhite\": newRatingWhite,\r\n            \"newRatingBlack\": newRatingBlack\r\n        };*/\r\n\r\n    };\r\n\r\n\r\n\r\n    initialiseWebSockets() {\r\n        this.socket = this.webSocketService.initWebSockets();\r\n        const onOpen = function () {\r\n            console.log(\"opening session and requesting game info\");\r\n\r\n        }\r\n        const onError = function (event) {\r\n            // //console.log(\"Error occured:\" + event);\r\n\r\n        }\r\n\r\n        const onMessage = (message) => {\r\n\r\n            let data = JSON.parse(message.data);\r\n            if (data.action === \"move\") {\r\n                this.executeReceivedMove(data);\r\n            } else if (data.action === \"startGame\") {\r\n                this.startGame(data);\r\n            } else if (data.action === \"offerDraw\") {\r\n                this.displayDrawOffer();\r\n            } else if (data.action === \"drawOfferReply\") {\r\n                if (data.acceptDraw === true) {\r\n                    this.endGame(\"1/2 - 1/2\");\r\n                } else {\r\n\r\n                }\r\n            } else if (data.action === \"resign\") {\r\n                this.endGame(this.whitePlayer ? \"1-0\" : \"0-1\");\r\n            } else if (data.action === \"gameInfo\") {\r\n                this.startGame(data);\r\n            } else if (data.action === \"gameResult\") {\r\n                this.endGame(data.gameResult);\r\n            }\r\n        }\r\n\r\n        this.socket.onmessage = (message) => onMessage(message);\r\n        this.socket.onerror = onError;\r\n        this.socket.onopen = onOpen;\r\n    };\r\n\r\n    displayDrawOffer() {\r\n        this.drawOfferReceived = true;\r\n    };\r\n\r\n    executeReceivedMove(move) {\r\n        console.log(move);\r\n\r\n        this.lastMove = move;\r\n        this.whiteTime = move.whiteTime;\r\n        this.blackTime = move.blackTime;\r\n\r\n        this.myMove = true;\r\n        this.castling = \"\";\r\n\r\n        const validMove = this.chess.move(move.annotatedMove);\r\n        this.processValidMove(validMove, move.chessboardAfterMove, false);\r\n        this.pressClock(!move.whiteMove);\r\n        this.svgChessboard.enableMoveInput(this.moveInputHandler, this.whitePlayer ? COLOR.white : COLOR.black);\r\n    };\r\n    generateClockTimeFromSeconds(seconds) {\r\n        let clockSeconds = seconds % 60;\r\n        let clockSecondsString: string;\r\n        if (clockSeconds < 10) {\r\n            clockSecondsString = \"0\" + +clockSeconds\r\n        } else {\r\n            clockSecondsString = clockSeconds.toString();\r\n        }\r\n        let clockMinutes = Math.floor(seconds / 60);\r\n        return clockMinutes + \":\" + clockSecondsString\r\n    };\r\n\r\n    onTimeout(whitePlayer) {\r\n        if (whitePlayer) {\r\n            if (this.whiteTime > 0\r\n                // && playingGame === true\r\n            ) {\r\n                this.whiteTime -= 1;\r\n                this.whiteClock = this.generateClockTimeFromSeconds(this.whiteTime);\r\n                console.log(\"Decreasing white time.\")\r\n            } else {\r\n                if (whitePlayer === whitePlayer) {\r\n                    this.endGame(\"0-1 (Black won on time)\");\r\n                    this.sendGameResult();\r\n                }\r\n                return;\r\n            }\r\n        } else {\r\n            if (this.blackTime > 0\r\n                //&& playingGame === true\r\n            ) {\r\n                this.blackTime -= 1;\r\n                this.blackClock = this.generateClockTimeFromSeconds(this.blackTime);\r\n            } else {\r\n                if (whitePlayer === whitePlayer) {\r\n                    this.endGame(\"1-0 (White won on time)\");\r\n                    this.sendGameResult();\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        if (this.playingGame || this.mode === this.chessboardUsageModes.OBSERVING) {\r\n            this.clockTimer = setTimeout(() =>\r\n                this.onTimeout(whitePlayer)\r\n                , 1000);\r\n        }\r\n\r\n    };\r\n\r\n    startClock(whitePlayer) {\r\n        console.log(\"Starting clock for whitePlayer:\"\r\n            + whitePlayer);\r\n        this.clockTimer = setTimeout(() => this\r\n            .onTimeout(whitePlayer), 1000);\r\n\r\n    };\r\n\r\n    pressClock(whitePlayer) {\r\n        console.log(\"Pressing clock\");\r\n        clearTimeout(this.clockTimer);\r\n        this.startClock(whitePlayer);\r\n    };\r\n\r\n\r\n    startGame(data) {\r\n        console.log(\"starting game\");\r\n        $(\".chessPiece\").show();\r\n        this.eraseAllHighlightedSquares();\r\n        this.moveNumber = 0;\r\n        this.seekingOponent = false;\r\n        this.playingGame = true;\r\n        this.whiteMove = true;\r\n        this.gameResult = \"\";\r\n        this.whiteTime = data.time * 60;\r\n        this.blackTime = data.time * 60;\r\n        this.drawOfferReceived = false;\r\n        this.whitePlayerElo = data.whitePlayer.elo;\r\n        this.blackPlayerElo = data.blackPlayer.elo;\r\n        this.whitePlayerName = data.whitePlayer.username;\r\n        this.blackPlayerName = data.blackPlayer.username;\r\n        this.whiteClock = this.generateClockTimeFromSeconds(this.whiteTime);\r\n        this.blackClock = this.generateClockTimeFromSeconds(this.blackTime);\r\n\r\n        // $apply( () {\r\n        this.initialiseChessboard();\r\n        if (this.mode === this.chessboardUsageModes.OBSERVING) {\r\n            this.annotatedMoves = data.annotatedMoves;\r\n        }\r\n        this.newGame = true;\r\n\r\n        if (data.blackPlayer.username === this.user) {\r\n            this.oponent = data.whitePlayer.username;\r\n            this.whitePlayer = false;\r\n            this.myMove = false;\r\n            this.svgChessboard.setOrientation(COLOR.black);\r\n            this.svgChessboard.disableMoveInput();\r\n        } else {\r\n            this.oponent = data.blackPlayer.username;\r\n            this.whitePlayer = true;\r\n            this.myMove = true;\r\n            this.svgChessboard.setOrientation(COLOR.white);\r\n        }\r\n    };\r\n\r\n    displayPromotionPicker(elem,\r\n        startPos, endPos) {\r\n        this.startPosition = startPos;\r\n        this.endPosition = endPos;\r\n        this.element = elem;\r\n        this.showPawnPromotionDiv = true;\r\n\r\n    };\r\n\r\n    promotePiece(piece) {\r\n\r\n        /*  this.updateChessboardAfterMove(this.startPosition.piece, this.element,\r\n             this.startPosition, this.endPosition, true,\r\n             this.whitePlayer, piece);\r\n         this.lastMove.startPosition = this.startPosition;\r\n         this.lastMove.endPosition = this.endPosition; */\r\n\r\n        this.pawnPromotionMove.promotion = piece\r\n        const validMove = this.chess.move(this.pawnPromotionMove);\r\n        if (validMove) {\r\n            const currentPositionAsFEN = this.chess.fen();\r\n            this.processValidMove(validMove, currentPositionAsFEN, true);\r\n            /*      this.pressClock(!this.whitePlayer);\r\n                 this.setMyMove(false); */\r\n        }\r\n        this.showPawnPromotionDiv = false;\r\n\r\n    };\r\n\r\n    endGame(gameResult) {\r\n        $(\"#arrow\").remove();\r\n        let gameResultWhite: number;\r\n        let gameResultBlack: number;\r\n        if (gameResult === \"1-0\" || gameResult === \"1-0 (White won on time)\") {\r\n            gameResultWhite = 1;\r\n            gameResultBlack = 0;\r\n        } else if (gameResult === \"0-1\" || gameResult === \"0-1 (Black won on time)\") {\r\n            gameResultWhite = 0;\r\n            gameResultBlack = 1;\r\n        } else if (gameResult === \"1/2 - 1/2\") {\r\n            gameResultWhite = 0.5;\r\n            gameResultBlack = 0.5;\r\n        }\r\n        this.stopClocks();\r\n        this.playingGame = false;\r\n\r\n        let newElos = this.updatePlayerElos(\r\n            gameResultWhite,\r\n            gameResultBlack);\r\n\r\n\r\n        this.gameResult = gameResult;\r\n\r\n        /* this.openPostGameModal(\r\n            this.whitePlayerName,\r\n            this.blackPlayerName,\r\n            gameResult, this.whitePlayer, this.mode); */\r\n\r\n        return newElos;\r\n\r\n    };\r\n\r\n    postGameModalController(this,\r\n        $modalInstance, whitePlayerName,\r\n        blackPlayerName, gameResult, whitePlayer, mode) {\r\n\r\n        whitePlayerName = whitePlayerName;\r\n        blackPlayerName = blackPlayerName;\r\n        gameResult = gameResult;\r\n        whitePlayer = whitePlayer;\r\n        this.resultMessage = function () {\r\n            if (mode === this.chessboardUsageModes.PLAYING && ((gameResult === \"1-0\"\r\n                && whitePlayer === true) || (gameResult === \"0-1\"\r\n                    && whitePlayer === false))) {\r\n                return \"Congratulation you won the game.\";\r\n            } else if (mode === this.chessboardUsageModes.PLAYING && ((gameResult === \"1-0 (White won on time)\"\r\n                && whitePlayer === true) || (gameResult === \"0-1 (Black won on time)\"\r\n                    && whitePlayer === false))) {\r\n                return \"Congratulation you won the game on time.\";\r\n            } else if (mode === this.chessboardUsageModes.PLAYING && ((gameResult === \"1-0 (White won on time)\"\r\n                && whitePlayer === false) || (gameResult === \"0-1 (Black won on time)\"\r\n                    && whitePlayer === true))) {\r\n                return \"You lost the game on time.\";\r\n            } else if (mode === this.chessboardUsageModes.PLAYING && ((gameResult === \"1-0\"\r\n                && whitePlayer === false) || (gameResult === \"0-1\"\r\n                    && whitePlayer === true))) {\r\n                return \"You lost the game.\";\r\n            } else if (gameResult === \"1-0\" &&\r\n                mode === this.chessboardUsageModes.OBSERVING) {\r\n                return whitePlayerName + \" won the game.\";\r\n            } else if (gameResult === \"0-1\"\r\n                && mode === this.chessboardUsageModes.OBSERVING) {\r\n                return blackPlayerName + \" won the game.\";\r\n            } else if (gameResult === \"1-0 (White won on time)\" &&\r\n                mode === this.chessboardUsageModes.OBSERVING) {\r\n                return whitePlayerName + \" won the game on time.\";\r\n            } else if (gameResult === \"0-1 (Black won on time)\"\r\n                && mode === this.chessboardUsageModes.OBSERVING) {\r\n                return blackPlayerName + \" won the game on time.\";\r\n            } else if (gameResult === \"1/2 - 1/2\") {\r\n                return \"Game ended in a draw.\"\r\n            } else {\r\n                console.log(gameResult, whitePlayer);\r\n                return \"Else called.\"\r\n            }\r\n\r\n        };\r\n\r\n        this.close = function () {\r\n            console.log(\"Closing dialog window;\");\r\n            $modalInstance.close();\r\n        };\r\n\r\n        this.offerRematch = function () {\r\n\r\n        };\r\n    };\r\n\r\n    /*     this.postGameModalController['$inject'] = ['this',\r\n            '$modalInstance', 'whitePlayerName',\r\n            'blackPlayerName', 'gameResult',\r\n            'whitePlayer', 'mode']; */\r\n\r\n    openPostGameModal(\r\n        whitePlayerName, blackPlayerName,\r\n        gameResult, whitePlayer, mode) {\r\n\r\n        /* $modal\r\n           .open({\r\n               templateUrl: 'views/playingHall/postGameModal.html',\r\n               controller: this.postGameModalController,\r\n               scope: $new(true),\r\n               resolve: {\r\n                   whitePlayerName:  () => {\r\n                       return whitePlayerName\r\n                   },\r\n                   blackPlayerName:  ()=>  {\r\n                       return blackPlayerName\r\n                   },\r\n                   gameResult:  () => {\r\n                       return gameResult\r\n                   },\r\n                   whitePlayer:  () => {\r\n                       return whitePlayer\r\n                   },\r\n                   mode:  () =>{\r\n                       return mode\r\n                   }\r\n               }\r\n           }); */\r\n    };\r\n\r\n    offerDraw() {\r\n        let drawOffer = {\r\n            action: \"offerDraw\",\r\n            oponent: this.oponent\r\n        };\r\n        this.socket.send(JSON.stringify(drawOffer));\r\n    };\r\n\r\n    drawOfferReply(acceptDraw) {\r\n        let drawOffer = {\r\n            action: \"drawOfferReply\",\r\n            player: this.user.username,\r\n            oponent: this.oponent,\r\n            acceptDraw: acceptDraw\r\n        };\r\n\r\n        if (acceptDraw) {\r\n            this.endGame(\"1/2 - 1/2\");\r\n            this.sendGameResult();\r\n\r\n        } else {\r\n            this.socket.send(JSON.stringify(drawOffer));\r\n        }\r\n    };\r\n\r\n    sendGameResult() {\r\n        let gameResult = {\r\n            action: \"gameResult\",\r\n            oponent: this.oponent,\r\n            gameId: this.gameId,\r\n            gameResult: this.gameResult,\r\n            whitePlayerElo: this.whitePlayerElo,\r\n            blackPlayerElo: this.blackPlayerElo\r\n        };\r\n\r\n        this.socket.send(JSON.stringify(gameResult));\r\n    };\r\n    resign() {\r\n        let gameResult = !this.whitePlayer ? \"1-0\" : \"0-1\";\r\n        this.endGame(gameResult);\r\n        this.sendGameResult();\r\n    };\r\n\r\n    observeGame(game) {\r\n\r\n        this.whitePlayerName = game.whitePlayer.username;\r\n        this.blackPlayerName = game.blackPlayer.username;\r\n        this.whitePlayerElo = game.whitePlayer.elo;\r\n        this.blackPlayerElo = game.blackPlayer.elo;\r\n        this.annotatedMoves = Object.keys(game.annotatedMoves).map(key => game.annotatedMoves[key]);\r\n\r\n        let lastMove = this.annotatedMoves[this.annotatedMoves.length - 1];\r\n        this.whiteTime = lastMove.whiteTime;\r\n        this.blackTime = lastMove.blackTime;\r\n        this.whiteClock = this.generateClockTimeFromSeconds(this.whiteTime);\r\n        this.blackClock = this.generateClockTimeFromSeconds(this.blackTime);\r\n\r\n        if (lastMove.blackMove) {\r\n            this.redrawChessboard(JSON.parse(lastMove.chessboardAfterBlackMove), null);\r\n            this.startClock(true)\r\n        } else {\r\n            this.redrawChessboard(JSON.parse(lastMove.chessboardAfterWhiteMove), null);\r\n            this.startClock(false);\r\n        }\r\n        console.log(game);\r\n    };\r\n\r\n\r\n\r\n    sendMove(fen: string, annotatedMove: string) {\r\n\r\n        let moveAction = {\r\n            action: \"move\",\r\n            oponent: this.oponent,\r\n            chessboardAfterMove: fen,\r\n            gameId: this.gameId,\r\n            annotatedMove: annotatedMove,\r\n            whiteMove: this.whiteMove,\r\n            whiteTime: this.whiteTime,\r\n            blackTime: this.blackTime\r\n        };\r\n        console.log(\"sending move to server:\");\r\n        console.log(JSON.stringify(moveAction));\r\n        this.socket.send(JSON.stringify(moveAction));\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n}\r\n","export default \".highlighted{\\r\\n    color:red;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZXdzL3BsYXlpbmdIYWxsL3N1YmNvbXBvbmVudHMvbW92ZVZhcmlhdGlvblRyZWUvbW92ZS12YXJpYXRpb24tdHJlZS9tb3ZlLXZhcmlhdGlvbi10cmVlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxTQUFTO0FBQ2IiLCJmaWxlIjoidmlld3MvcGxheWluZ0hhbGwvc3ViY29tcG9uZW50cy9tb3ZlVmFyaWF0aW9uVHJlZS9tb3ZlLXZhcmlhdGlvbi10cmVlL21vdmUtdmFyaWF0aW9uLXRyZWUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5oaWdobGlnaHRlZHtcclxuICAgIGNvbG9yOnJlZDtcclxufSJdfQ== */\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n\n@Component({\n  selector: 'variation-tree',\n  templateUrl: './move-variation-tree.component.html',\n  styleUrls: ['./move-variation-tree.component.css']\n})\nexport class MoveVariationTreeComponent implements OnInit {\n\n  @Input() mainVariation: any;\n  @Input() moveToHighlight:any;\n\n  @Output() positionToRedraw: EventEmitter<any> = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  redrawPosition(fen:string, variationId:number){\n    const data = {fen,variationId}\n    this.positionToRedraw.emit(data);\n  }\n\n\n}\n"]}