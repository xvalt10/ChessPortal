{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./app.module.ts","./environments/environment.ts","./js/chessRules.js","./js/services/auth.guard.ts","./js/services/jwtAuthenticationService.ts","./js/services/websocketService.ts","./main.ts","./views/homepage/homepage.html","./views/lobby/lobby.component.html","./views/login/login.component.html","./views/playingHall/playingHall.html","./views/playingHall/subcomponents/moveVariationTree/move-variation-tree/move-variation-tree.component.html","./views/homepage/homepage.ts","./views/lobby/lobby.component.css","./views/lobby/lobby.component.ts","./views/login/login.component.css","./views/login/login.component.ts","./views/playingHall/playingHall.ts","./views/playingHall/subcomponents/moveVariationTree/move-variation-tree/move-variation-tree.component.css","./views/playingHall/subcomponents/moveVariationTree/move-variation-tree/move-variation-tree.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVkF;AAC7B;AACU;AACH;AACE;AAChB;AACiC;AACrB;AACJ;AAC6F;AACpF;AAChB;AACH;AACsB;AAIlE,MAAM,SAAS,GAAW;IACtB,EAAE,IAAI,EAAE,aAAa,EAAE,SAAS,EAAE,0EAAW,EAAE,WAAW,EAAE,CAAC,iEAAS,CAAC,EAAC;IACxE,EAAE,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAE,0EAAW,EAAE,WAAW,EAAE,CAAC,iEAAS,CAAC,EAAC;IAC7E,EAAE,IAAI,EAAE,6BAA6B,EAAE,SAAS,EAAE,0EAAW,EAAE,WAAW,EAAE,CAAC,iEAAS,CAAC,EAAC;IACxF,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,2EAAc,EAAC;IAC3C,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,4EAAc,EAAE,WAAW,EAAE,CAAC,iEAAS,CAAC,EAAC;IACrE,EAAE,IAAI,EAAE,GAAG,EAAE,UAAU,EAAC,YAAY,EAAC;CACtC,CAAC;AAEG,SAAS,WAAW;IAEzB,IAAI,IAAI,GAAO,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACnD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAClB,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClD,OAAO,IAAI,CAAC,QAAQ,CAAC;AACvB,CAAC;AA4BD,IAAa,SAAS,GAAtB,MAAa,SAAS;CAAI;AAAb,SAAS;IA1BrB,8DAAQ,CAAC;QACR,OAAO,EAAO;YACZ,uEAAa;YACb,2DAAW;YACX,mEAAmB;YACnB,iBAAiB;YACjB,qEAAgB;YAClB;;;oBAGQ;YACN,4DAAY,CAAC,OAAO,CAAC,SAAS,CAAC;YAC/B,6DAAS,CAAC,OAAO,CAAC;gBAChB,MAAM,EAAE;oBACN,WAAW,EAAE,WAAW;iBAGzB;aACF,CAAC;SAEL;QACC,SAAS,EAAE,CAAC,iEAAS,EAAE,8FAAwB,EAAE,2DAAW,CAAC;QAC7D,YAAY,EAAE,CAAE,yEAAiB,EAAE,0EAAW,EAAE,gKAA0B,EAAE,4EAAc,EAAE,2EAAc,CAAE;QAC5G,OAAO,EAAO,CAAE,yEAAiB,CAAE;QACnC,SAAS,EAAK,CAAE,yEAAiB,CAAE;KACpC,CAAC;GACW,SAAS,CAAI;AAAJ;;;;;;;;;;;;;;;;;AC9Df,MAAM,WAAW,GAAG;IACvB,UAAU,EAAE,KAAK;CAClB,CAAC;;;;;;;;;;;;ACFJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+BAA+B;AAC/D;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,4CAA4C;AACvD,WAAW,4CAA4C;AACvD,WAAW,4CAA4C;AACvD,WAAW,4CAA4C;AACvD;;AAEA;AACA,iBAAiB;AACjB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,qBAAqB,qBAAqB;AAC1C;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,eAAe,wCAAwC;AACvD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;;AAEA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;;AAEA,uBAAuB,oBAAoB;AAC3C;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,WAAW;AACX;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;;AAEA;AACA,cAAc;AACd;;AAEA;AACA;AACA;;AAEA,8BAA8B,iBAAiB;AAC/C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,eAAe;AAC/D,gDAAgD,eAAe;AAC/D,gDAAgD,eAAe;AAC/D,gDAAgD,eAAe;;AAE/D;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,qCAAqC;AAC7D;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;AACnB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,4BAA4B,cAAc;AAC1C;AACA,uBAAuB,QAAQ,UAAU;;AAEzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,OAAO;AAC5B;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT,iEAAiE,SAAS;AAC1E;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,iBAAiB;AAC/C;AACA,uBAAuB,QAAQ,UAAU;;AAEzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mCAAmC,gBAAgB,OAAO;AAC1D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,8BAA8B,gBAAgB;AAC9C;AACA,uBAAuB,QAAQ,UAAU;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,aAAa;;AAE1C;AACA;AACA,2DAA2D,aAAa;;AAExE;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA,uCAAuC,aAAa;AACpD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,aAAa;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yCAAyC;AACzC;;AAEA;AACA,0BAA0B;AAC1B,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wBAAwB;AACxB;;;AAGA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kCAAkC,eAAe;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yCAAyC,SAAS;AAClD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C;AACA;;AAEA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,eAAe,EAAE;AACnE;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D,mCAAmC,QAAQ,UAAU;AACrD;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gDAAgD,SAAS;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,yCAAyC,wCAAwC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yBAAyB,oBAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4BAA4B,GAAG,IAAI;;AAEnC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,+BAA+B,8BAA8B;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA,6CAA6C,SAAS;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAE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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { HttpModule } from '@angular/http';\r\n\r\nimport { JwtAuthenticationService } from './js/services/jwtAuthenticationService';\r\nimport { AuthGuard } from './js/services/auth.guard';\r\nimport { LoginComponent } from './views/login/login.component';\r\nimport { HomePageComponent } from 'views/homepage/homepage';\r\nimport { PlayingHall } from './views/playingHall/playingHall';\r\nimport { NgModule }      from '@angular/core';\r\nimport { HttpClientModule, HttpClientXsrfModule}   from '@angular/common/http';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouterModule, Routes} from '@angular/router';\r\nimport { MoveVariationTreeComponent } from './views/playingHall/subcomponents/moveVariationTree/move-variation-tree/move-variation-tree.component';\r\nimport { LobbyComponent } from './views/lobby/lobby.component';\r\nimport { JwtModule } from \"@auth0/angular-jwt\";\r\nimport { FormBuilder} from '@angular/forms';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\n\r\nconst appRoutes: Routes = [\r\n    { path: 'analyzeGame', component: PlayingHall, canActivate: [AuthGuard]},\r\n    { path: 'playGame/:gameId', component: PlayingHall, canActivate: [AuthGuard]},\r\n    { path: 'observeGame/:observedPlayer', component: PlayingHall, canActivate: [AuthGuard]},\r\n    { path: 'login', component: LoginComponent},\r\n    { path: 'lobby', component: LobbyComponent, canActivate: [AuthGuard]},\r\n    { path: '*', redirectTo:'index.html'} \r\n  ];\r\n\r\nexport function tokenGetter(){\r\n  \r\n  let user:any = localStorage.getItem('currentUser');\r\n  console.log(user);\r\n  console.log(\"calling tokenGetter:\"+user.jwtToken);\r\n  return user.jwtToken;\r\n}\r\n\r\n@NgModule({\r\n  imports:      [\r\n    BrowserModule,\r\n    FormsModule,\r\n    ReactiveFormsModule, \r\n    /* HttpModule, */\r\n    HttpClientModule,\r\n  /*   HttpClientXsrfModule.withOptions({\r\n      cookieName: 'XSRF-TOKEN',\r\n      headerName: 'X-XSRF-TOKEN'\r\n    }), */\r\n    RouterModule.forRoot(appRoutes), \r\n    JwtModule.forRoot({\r\n      config: {\r\n        tokenGetter: tokenGetter,\r\n        //whitelistedDomains: [\"localhost:8082\"],\r\n       // blacklistedRoutes: [\"example.com/examplebadroute/\"]\r\n      }\r\n    })\r\n\r\n],\r\n  providers: [AuthGuard, JwtAuthenticationService, FormBuilder],\r\n  declarations: [ HomePageComponent, PlayingHall, MoveVariationTreeComponent, LobbyComponent, LoginComponent ],\r\n  exports:      [ HomePageComponent ],\r\n  bootstrap:    [ HomePageComponent ] \r\n})\r\nexport class AppModule { }","export const environment = {\r\n    production: false\r\n  };","/*\r\n * Copyright (c) 2016, Jeff Hlywa (jhlywa@gmail.com)\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice,\r\n *    this list of conditions and the following disclaimer.\r\n * 2. Redistributions in binary form must reproduce the above copyright notice,\r\n *    this list of conditions and the following disclaimer in the documentation\r\n *    and/or other materials provided with the distribution.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n *----------------------------------------------------------------------------*/\r\n\r\n/* minified license below  */\r\n\r\n/* @license\r\n * Copyright (c) 2016, Jeff Hlywa (jhlywa@gmail.com)\r\n * Released under the BSD license\r\n * https://github.com/jhlywa/chess.js/blob/master/LICENSE\r\n */\r\n\r\nvar Chess = function(fen) {\r\n\r\n    /* jshint indent: false */\r\n  \r\n    var BLACK = 'b';\r\n    var WHITE = 'w';\r\n  \r\n    var EMPTY = -1;\r\n  \r\n    var PAWN = 'p';\r\n    var KNIGHT = 'n';\r\n    var BISHOP = 'b';\r\n    var ROOK = 'r';\r\n    var QUEEN = 'q';\r\n    var KING = 'k';\r\n  \r\n    var SYMBOLS = 'pnbrqkPNBRQK';\r\n  \r\n    var DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\r\n  \r\n    var POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*'];\r\n  \r\n    var PAWN_OFFSETS = {\r\n      b: [16, 32, 17, 15],\r\n      w: [-16, -32, -17, -15]\r\n    };\r\n  \r\n    var PIECE_OFFSETS = {\r\n      n: [-18, -33, -31, -14,  18, 33, 31,  14],\r\n      b: [-17, -15,  17,  15],\r\n      r: [-16,   1,  16,  -1],\r\n      q: [-17, -16, -15,   1,  17, 16, 15,  -1],\r\n      k: [-17, -16, -15,   1,  17, 16, 15,  -1]\r\n    };\r\n  \r\n    var ATTACKS = [\r\n      20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\r\n       0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\r\n       0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\r\n       0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\r\n       0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\r\n      24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\r\n       0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\r\n       0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\r\n       0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\r\n       0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\r\n       0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\r\n      20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\r\n    ];\r\n  \r\n    var RAYS = [\r\n       17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\r\n        0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\r\n        0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\r\n        0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\r\n        0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\r\n        1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\r\n        0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\r\n        0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\r\n        0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\r\n        0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\r\n        0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\r\n      -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\r\n    ];\r\n  \r\n    var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 };\r\n  \r\n    var FLAGS = {\r\n      NORMAL: 'n',\r\n      CAPTURE: 'c',\r\n      BIG_PAWN: 'b',\r\n      EP_CAPTURE: 'e',\r\n      PROMOTION: 'p',\r\n      KSIDE_CASTLE: 'k',\r\n      QSIDE_CASTLE: 'q'\r\n    };\r\n  \r\n    var BITS = {\r\n      NORMAL: 1,\r\n      CAPTURE: 2,\r\n      BIG_PAWN: 4,\r\n      EP_CAPTURE: 8,\r\n      PROMOTION: 16,\r\n      KSIDE_CASTLE: 32,\r\n      QSIDE_CASTLE: 64\r\n    };\r\n  \r\n    var RANK_1 = 7;\r\n    var RANK_2 = 6;\r\n    var RANK_3 = 5;\r\n    var RANK_4 = 4;\r\n    var RANK_5 = 3;\r\n    var RANK_6 = 2;\r\n    var RANK_7 = 1;\r\n    var RANK_8 = 0;\r\n  \r\n    var SQUARES = {\r\n      a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\r\n      a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\r\n      a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\r\n      a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\r\n      a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\r\n      a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\r\n      a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\r\n      a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\r\n    };\r\n  \r\n    var ROOKS = {\r\n      w: [{square: SQUARES.a1, flag: BITS.QSIDE_CASTLE},\r\n          {square: SQUARES.h1, flag: BITS.KSIDE_CASTLE}],\r\n      b: [{square: SQUARES.a8, flag: BITS.QSIDE_CASTLE},\r\n          {square: SQUARES.h8, flag: BITS.KSIDE_CASTLE}]\r\n    };\r\n  \r\n    var board = new Array(128);\r\n    var kings = {w: EMPTY, b: EMPTY};\r\n    var turn = WHITE;\r\n    var castling = {w: 0, b: 0};\r\n    var ep_square = EMPTY;\r\n    var half_moves = 0;\r\n    var move_number = 1;\r\n    var history = [];\r\n    var header = {};\r\n  \r\n    /* if the user passes in a fen string, load it, else default to\r\n     * starting position\r\n     */\r\n    if (typeof fen === 'undefined') {\r\n      load(DEFAULT_POSITION);\r\n    } else {\r\n      load(fen);\r\n    }\r\n  \r\n    function clear() {\r\n      board = new Array(128);\r\n      kings = {w: EMPTY, b: EMPTY};\r\n      turn = WHITE;\r\n      castling = {w: 0, b: 0};\r\n      ep_square = EMPTY;\r\n      half_moves = 0;\r\n      move_number = 1;\r\n      history = [];\r\n      header = {};\r\n      update_setup(generate_fen());\r\n    }\r\n  \r\n    function reset() {\r\n      load(DEFAULT_POSITION);\r\n    }\r\n  \r\n    function load(fen) {\r\n      var tokens = fen.split(/\\s+/);\r\n      var position = tokens[0];\r\n      var square = 0;\r\n  \r\n      if (!validate_fen(fen).valid) {\r\n        return false;\r\n      }\r\n  \r\n      clear();\r\n  \r\n      for (var i = 0; i < position.length; i++) {\r\n        var piece = position.charAt(i);\r\n  \r\n        if (piece === '/') {\r\n          square += 8;\r\n        } else if (is_digit(piece)) {\r\n          square += parseInt(piece, 10);\r\n        } else {\r\n          var color = (piece < 'a') ? WHITE : BLACK;\r\n          put({type: piece.toLowerCase(), color: color}, algebraic(square));\r\n          square++;\r\n        }\r\n      }\r\n  \r\n      turn = tokens[1];\r\n  \r\n      if (tokens[2].indexOf('K') > -1) {\r\n        castling.w |= BITS.KSIDE_CASTLE;\r\n      }\r\n      if (tokens[2].indexOf('Q') > -1) {\r\n        castling.w |= BITS.QSIDE_CASTLE;\r\n      }\r\n      if (tokens[2].indexOf('k') > -1) {\r\n        castling.b |= BITS.KSIDE_CASTLE;\r\n      }\r\n      if (tokens[2].indexOf('q') > -1) {\r\n        castling.b |= BITS.QSIDE_CASTLE;\r\n      }\r\n  \r\n      ep_square = (tokens[3] === '-') ? EMPTY : SQUARES[tokens[3]];\r\n      half_moves = parseInt(tokens[4], 10);\r\n      move_number = parseInt(tokens[5], 10);\r\n  \r\n      update_setup(generate_fen());\r\n  \r\n      return true;\r\n    }\r\n  \r\n    /* TODO: this function is pretty much crap - it validates structure but\r\n     * completely ignores content (e.g. doesn't verify that each side has a king)\r\n     * ... we should rewrite this, and ditch the silly error_number field while\r\n     * we're at it\r\n     */\r\n    function validate_fen(fen) {\r\n      var errors = {\r\n         0: 'No errors.',\r\n         1: 'FEN string must contain six space-delimited fields.',\r\n         2: '6th field (move number) must be a positive integer.',\r\n         3: '5th field (half move counter) must be a non-negative integer.',\r\n         4: '4th field (en-passant square) is invalid.',\r\n         5: '3rd field (castling availability) is invalid.',\r\n         6: '2nd field (side to move) is invalid.',\r\n         7: '1st field (piece positions) does not contain 8 \\'/\\'-delimited rows.',\r\n         8: '1st field (piece positions) is invalid [consecutive numbers].',\r\n         9: '1st field (piece positions) is invalid [invalid piece].',\r\n        10: '1st field (piece positions) is invalid [row too large].',\r\n        11: 'Illegal en-passant square',\r\n      };\r\n  \r\n      /* 1st criterion: 6 space-seperated fields? */\r\n      var tokens = fen.split(/\\s+/);\r\n      if (tokens.length !== 6) {\r\n        return {valid: false, error_number: 1, error: errors[1]};\r\n      }\r\n  \r\n      /* 2nd criterion: move number field is a integer value > 0? */\r\n      if (isNaN(tokens[5]) || (parseInt(tokens[5], 10) <= 0)) {\r\n        return {valid: false, error_number: 2, error: errors[2]};\r\n      }\r\n  \r\n      /* 3rd criterion: half move counter is an integer >= 0? */\r\n      if (isNaN(tokens[4]) || (parseInt(tokens[4], 10) < 0)) {\r\n        return {valid: false, error_number: 3, error: errors[3]};\r\n      }\r\n  \r\n      /* 4th criterion: 4th field is a valid e.p.-string? */\r\n      if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\r\n        return {valid: false, error_number: 4, error: errors[4]};\r\n      }\r\n  \r\n      /* 5th criterion: 3th field is a valid castle-string? */\r\n      if( !/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\r\n        return {valid: false, error_number: 5, error: errors[5]};\r\n      }\r\n  \r\n      /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\r\n      if (!/^(w|b)$/.test(tokens[1])) {\r\n        return {valid: false, error_number: 6, error: errors[6]};\r\n      }\r\n  \r\n      /* 7th criterion: 1st field contains 8 rows? */\r\n      var rows = tokens[0].split('/');\r\n      if (rows.length !== 8) {\r\n        return {valid: false, error_number: 7, error: errors[7]};\r\n      }\r\n  \r\n      /* 8th criterion: every row is valid? */\r\n      for (var i = 0; i < rows.length; i++) {\r\n        /* check for right sum of fields AND not two numbers in succession */\r\n        var sum_fields = 0;\r\n        var previous_was_number = false;\r\n  \r\n        for (var k = 0; k < rows[i].length; k++) {\r\n          if (!isNaN(rows[i][k])) {\r\n            if (previous_was_number) {\r\n              return {valid: false, error_number: 8, error: errors[8]};\r\n            }\r\n            sum_fields += parseInt(rows[i][k], 10);\r\n            previous_was_number = true;\r\n          } else {\r\n            if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\r\n              return {valid: false, error_number: 9, error: errors[9]};\r\n            }\r\n            sum_fields += 1;\r\n            previous_was_number = false;\r\n          }\r\n        }\r\n        if (sum_fields !== 8) {\r\n          return {valid: false, error_number: 10, error: errors[10]};\r\n        }\r\n      }\r\n  \r\n      if ((tokens[3][1] == '3' && tokens[1] == 'w') ||\r\n          (tokens[3][1] == '6' && tokens[1] == 'b')) {\r\n            return {valid: false, error_number: 11, error: errors[11]};\r\n      }\r\n  \r\n      /* everything's okay! */\r\n      return {valid: true, error_number: 0, error: errors[0]};\r\n    }\r\n  \r\n    function generate_fen() {\r\n      var empty = 0;\r\n      var fen = '';\r\n  \r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        if (board[i] == null) {\r\n          empty++;\r\n        } else {\r\n          if (empty > 0) {\r\n            fen += empty;\r\n            empty = 0;\r\n          }\r\n          var color = board[i].color;\r\n          var piece = board[i].type;\r\n  \r\n          fen += (color === WHITE) ?\r\n                   piece.toUpperCase() : piece.toLowerCase();\r\n        }\r\n  \r\n        if ((i + 1) & 0x88) {\r\n          if (empty > 0) {\r\n            fen += empty;\r\n          }\r\n  \r\n          if (i !== SQUARES.h1) {\r\n            fen += '/';\r\n          }\r\n  \r\n          empty = 0;\r\n          i += 8;\r\n        }\r\n      }\r\n  \r\n      var cflags = '';\r\n      if (castling[WHITE] & BITS.KSIDE_CASTLE) { cflags += 'K'; }\r\n      if (castling[WHITE] & BITS.QSIDE_CASTLE) { cflags += 'Q'; }\r\n      if (castling[BLACK] & BITS.KSIDE_CASTLE) { cflags += 'k'; }\r\n      if (castling[BLACK] & BITS.QSIDE_CASTLE) { cflags += 'q'; }\r\n  \r\n      /* do we have an empty castling flag? */\r\n      cflags = cflags || '-';\r\n      var epflags = (ep_square === EMPTY) ? '-' : algebraic(ep_square);\r\n  \r\n      return [fen, turn, cflags, epflags, half_moves, move_number].join(' ');\r\n    }\r\n  \r\n    function set_header(args) {\r\n      for (var i = 0; i < args.length; i += 2) {\r\n        if (typeof args[i] === 'string' &&\r\n            typeof args[i + 1] === 'string') {\r\n          header[args[i]] = args[i + 1];\r\n        }\r\n      }\r\n      return header;\r\n    }\r\n  \r\n    /* called when the initial board setup is changed with put() or remove().\r\n     * modifies the SetUp and FEN properties of the header object.  if the FEN is\r\n     * equal to the default position, the SetUp and FEN are deleted\r\n     * the setup is only updated if history.length is zero, ie moves haven't been\r\n     * made.\r\n     */\r\n    function update_setup(fen) {\r\n      if (history.length > 0) return;\r\n  \r\n      if (fen !== DEFAULT_POSITION) {\r\n        header['SetUp'] = '1';\r\n        header['FEN'] = fen;\r\n      } else {\r\n        delete header['SetUp'];\r\n        delete header['FEN'];\r\n      }\r\n    }\r\n  \r\n    function get(square) {\r\n      var piece = board[SQUARES[square]];\r\n      return (piece) ? {type: piece.type, color: piece.color} : null;\r\n    }\r\n  \r\n    function put(piece, square) {\r\n      /* check for valid piece object */\r\n      if (!('type' in piece && 'color' in piece)) {\r\n        return false;\r\n      }\r\n  \r\n      /* check for piece */\r\n      if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\r\n        return false;\r\n      }\r\n  \r\n      /* check for valid square */\r\n      if (!(square in SQUARES)) {\r\n        return false;\r\n      }\r\n  \r\n      var sq = SQUARES[square];\r\n  \r\n      /* don't let the user place more than one king */\r\n      if (piece.type == KING &&\r\n          !(kings[piece.color] == EMPTY || kings[piece.color] == sq)) {\r\n        return false;\r\n      }\r\n  \r\n      board[sq] = {type: piece.type, color: piece.color};\r\n      if (piece.type === KING) {\r\n        kings[piece.color] = sq;\r\n      }\r\n  \r\n      update_setup(generate_fen());\r\n  \r\n      return true;\r\n    }\r\n  \r\n    function remove(square) {\r\n      var piece = get(square);\r\n      board[SQUARES[square]] = null;\r\n      if (piece && piece.type === KING) {\r\n        kings[piece.color] = EMPTY;\r\n      }\r\n  \r\n      update_setup(generate_fen());\r\n  \r\n      return piece;\r\n    }\r\n  \r\n    function build_move(board, from, to, flags, promotion) {\r\n      var move = {\r\n        color: turn,\r\n        from: from,\r\n        to: to,\r\n        flags: flags,\r\n        piece: board[from].type\r\n      };\r\n  \r\n      if (promotion) {\r\n        move.flags |= BITS.PROMOTION;\r\n        move.promotion = promotion;\r\n      }\r\n  \r\n      if (board[to]) {\r\n        move.captured = board[to].type;\r\n      } else if (flags & BITS.EP_CAPTURE) {\r\n          move.captured = PAWN;\r\n      }\r\n      return move;\r\n    }\r\n  \r\n    function generate_moves(options) {\r\n      function add_move(board, moves, from, to, flags) {\r\n        /* if pawn promotion */\r\n        if (board[from].type === PAWN &&\r\n           (rank(to) === RANK_8 || rank(to) === RANK_1)) {\r\n            var pieces = [QUEEN, ROOK, BISHOP, KNIGHT];\r\n            for (var i = 0, len = pieces.length; i < len; i++) {\r\n              moves.push(build_move(board, from, to, flags, pieces[i]));\r\n            }\r\n        } else {\r\n         moves.push(build_move(board, from, to, flags));\r\n        }\r\n      }\r\n  \r\n      var moves = [];\r\n      var us = turn;\r\n      var them = swap_color(us);\r\n      var second_rank = {b: RANK_7, w: RANK_2};\r\n  \r\n      var first_sq = SQUARES.a8;\r\n      var last_sq = SQUARES.h1;\r\n      var single_square = false;\r\n  \r\n      /* do we want legal moves? */\r\n      var legal = (typeof options !== 'undefined' && 'legal' in options) ?\r\n                  options.legal : true;\r\n  \r\n      /* are we generating moves for a single square? */\r\n      if (typeof options !== 'undefined' && 'square' in options) {\r\n        if (options.square in SQUARES) {\r\n          first_sq = last_sq = SQUARES[options.square];\r\n          single_square = true;\r\n        } else {\r\n          /* invalid square */\r\n          return [];\r\n        }\r\n      }\r\n  \r\n      for (var i = first_sq; i <= last_sq; i++) {\r\n        /* did we run off the end of the board */\r\n        if (i & 0x88) { i += 7; continue; }\r\n  \r\n        var piece = board[i];\r\n        if (piece == null || piece.color !== us) {\r\n          continue;\r\n        }\r\n  \r\n        if (piece.type === PAWN) {\r\n          /* single square, non-capturing */\r\n          var square = i + PAWN_OFFSETS[us][0];\r\n          if (board[square] == null) {\r\n              add_move(board, moves, i, square, BITS.NORMAL);\r\n  \r\n            /* double square */\r\n            var square = i + PAWN_OFFSETS[us][1];\r\n            if (second_rank[us] === rank(i) && board[square] == null) {\r\n              add_move(board, moves, i, square, BITS.BIG_PAWN);\r\n            }\r\n          }\r\n  \r\n          /* pawn captures */\r\n          for (j = 2; j < 4; j++) {\r\n            var square = i + PAWN_OFFSETS[us][j];\r\n            if (square & 0x88) continue;\r\n  \r\n            if (board[square] != null &&\r\n                board[square].color === them) {\r\n                add_move(board, moves, i, square, BITS.CAPTURE);\r\n            } else if (square === ep_square) {\r\n                add_move(board, moves, i, ep_square, BITS.EP_CAPTURE);\r\n            }\r\n          }\r\n        } else {\r\n          for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\r\n            var offset = PIECE_OFFSETS[piece.type][j];\r\n            var square = i;\r\n  \r\n            while (true) {\r\n              square += offset;\r\n              if (square & 0x88) break;\r\n  \r\n              if (board[square] == null) {\r\n                add_move(board, moves, i, square, BITS.NORMAL);\r\n              } else {\r\n                if (board[square].color === us) break;\r\n                add_move(board, moves, i, square, BITS.CAPTURE);\r\n                break;\r\n              }\r\n  \r\n              /* break, if knight or king */\r\n              if (piece.type === 'n' || piece.type === 'k') break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* check for castling if: a) we're generating all moves, or b) we're doing\r\n       * single square move generation on the king's square\r\n       */\r\n      if ((!single_square) || last_sq === kings[us]) {\r\n        /* king-side castling */\r\n        if (castling[us] & BITS.KSIDE_CASTLE) {\r\n          var castling_from = kings[us];\r\n          var castling_to = castling_from + 2;\r\n  \r\n          if (board[castling_from + 1] == null &&\r\n              board[castling_to]       == null &&\r\n              !attacked(them, kings[us]) &&\r\n              !attacked(them, castling_from + 1) &&\r\n              !attacked(them, castling_to)) {\r\n            add_move(board, moves, kings[us] , castling_to,\r\n                     BITS.KSIDE_CASTLE);\r\n          }\r\n        }\r\n  \r\n        /* queen-side castling */\r\n        if (castling[us] & BITS.QSIDE_CASTLE) {\r\n          var castling_from = kings[us];\r\n          var castling_to = castling_from - 2;\r\n  \r\n          if (board[castling_from - 1] == null &&\r\n              board[castling_from - 2] == null &&\r\n              board[castling_from - 3] == null &&\r\n              !attacked(them, kings[us]) &&\r\n              !attacked(them, castling_from - 1) &&\r\n              !attacked(them, castling_to)) {\r\n            add_move(board, moves, kings[us], castling_to,\r\n                     BITS.QSIDE_CASTLE);\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* return all pseudo-legal moves (this includes moves that allow the king\r\n       * to be captured)\r\n       */\r\n      if (!legal) {\r\n        return moves;\r\n      }\r\n  \r\n      /* filter out illegal moves */\r\n      var legal_moves = [];\r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        make_move(moves[i]);\r\n        if (!king_attacked(us)) {\r\n          legal_moves.push(moves[i]);\r\n        }\r\n        undo_move();\r\n      }\r\n  \r\n      return legal_moves;\r\n    }\r\n  \r\n    /* convert a move from 0x88 coordinates to Standard Algebraic Notation\r\n     * (SAN)\r\n     *\r\n     * @param {boolean} sloppy Use the sloppy SAN generator to work around over\r\n     * disambiguation bugs in Fritz and Chessbase.  See below:\r\n     *\r\n     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\r\n     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\r\n     * 4. ... Ne7 is technically the valid SAN\r\n     */\r\n    function move_to_san(move, sloppy) {\r\n  \r\n      var output = '';\r\n  \r\n      if (move.flags & BITS.KSIDE_CASTLE) {\r\n        output = 'O-O';\r\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\r\n        output = 'O-O-O';\r\n      } else {\r\n        var disambiguator = get_disambiguator(move, sloppy);\r\n  \r\n        if (move.piece !== PAWN) {\r\n          output += move.piece.toUpperCase() + disambiguator;\r\n        }\r\n  \r\n        if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\r\n          if (move.piece === PAWN) {\r\n            output += algebraic(move.from)[0];\r\n          }\r\n          output += 'x';\r\n        }\r\n  \r\n        output += algebraic(move.to);\r\n  \r\n        if (move.flags & BITS.PROMOTION) {\r\n          output += '=' + move.promotion.toUpperCase();\r\n        }\r\n      }\r\n  \r\n      make_move(move);\r\n      if (in_check()) {\r\n        if (in_checkmate()) {\r\n          output += '#';\r\n        } else {\r\n          output += '+';\r\n        }\r\n      }\r\n      undo_move();\r\n  \r\n      return output;\r\n    }\r\n  \r\n    // parses all of the decorators out of a SAN string\r\n    function stripped_san(move) {\r\n      return move.replace(/=/,'').replace(/[+#]?[?!]*$/,'');\r\n    }\r\n  \r\n    function attacked(color, square) {\r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        /* did we run off the end of the board */\r\n        if (i & 0x88) { i += 7; continue; }\r\n  \r\n        /* if empty square or wrong color */\r\n        if (board[i] == null || board[i].color !== color) continue;\r\n  \r\n        var piece = board[i];\r\n        var difference = i - square;\r\n        var index = difference + 119;\r\n  \r\n        if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {\r\n          if (piece.type === PAWN) {\r\n            if (difference > 0) {\r\n              if (piece.color === WHITE) return true;\r\n            } else {\r\n              if (piece.color === BLACK) return true;\r\n            }\r\n            continue;\r\n          }\r\n  \r\n          /* if the piece is a knight or a king */\r\n          if (piece.type === 'n' || piece.type === 'k') return true;\r\n  \r\n          var offset = RAYS[index];\r\n          var j = i + offset;\r\n  \r\n          var blocked = false;\r\n          while (j !== square) {\r\n            if (board[j] != null) { blocked = true; break; }\r\n            j += offset;\r\n          }\r\n  \r\n          if (!blocked) return true;\r\n        }\r\n      }\r\n  \r\n      return false;\r\n    }\r\n  \r\n    function king_attacked(color) {\r\n      return attacked(swap_color(color), kings[color]);\r\n    }\r\n  \r\n    function in_check() {\r\n      return king_attacked(turn);\r\n    }\r\n  \r\n    function in_checkmate() {\r\n      return in_check() && generate_moves().length === 0;\r\n    }\r\n  \r\n    function in_stalemate() {\r\n      return !in_check() && generate_moves().length === 0;\r\n    }\r\n  \r\n    function insufficient_material() {\r\n      var pieces = {};\r\n      var bishops = [];\r\n      var num_pieces = 0;\r\n      var sq_color = 0;\r\n  \r\n      for (var i = SQUARES.a8; i<= SQUARES.h1; i++) {\r\n        sq_color = (sq_color + 1) % 2;\r\n        if (i & 0x88) { i += 7; continue; }\r\n  \r\n        var piece = board[i];\r\n        if (piece) {\r\n          pieces[piece.type] = (piece.type in pieces) ?\r\n                                pieces[piece.type] + 1 : 1;\r\n          if (piece.type === BISHOP) {\r\n            bishops.push(sq_color);\r\n          }\r\n          num_pieces++;\r\n        }\r\n      }\r\n  \r\n      /* k vs. k */\r\n      if (num_pieces === 2) { return true; }\r\n  \r\n      /* k vs. kn .... or .... k vs. kb */\r\n      else if (num_pieces === 3 && (pieces[BISHOP] === 1 ||\r\n                                   pieces[KNIGHT] === 1)) { return true; }\r\n  \r\n      /* kb vs. kb where any number of bishops are all on the same color */\r\n      else if (num_pieces === pieces[BISHOP] + 2) {\r\n        var sum = 0;\r\n        var len = bishops.length;\r\n        for (var i = 0; i < len; i++) {\r\n          sum += bishops[i];\r\n        }\r\n        if (sum === 0 || sum === len) { return true; }\r\n      }\r\n  \r\n      return false;\r\n    }\r\n  \r\n    function in_threefold_repetition() {\r\n      /* TODO: while this function is fine for casual use, a better\r\n       * implementation would use a Zobrist key (instead of FEN). the\r\n       * Zobrist key would be maintained in the make_move/undo_move functions,\r\n       * avoiding the costly that we do below.\r\n       */\r\n      var moves = [];\r\n      var positions = {};\r\n      var repetition = false;\r\n  \r\n      while (true) {\r\n        var move = undo_move();\r\n        if (!move) break;\r\n        moves.push(move);\r\n      }\r\n  \r\n      while (true) {\r\n        /* remove the last two fields in the FEN string, they're not needed\r\n         * when checking for draw by rep */\r\n        var fen = generate_fen().split(' ').slice(0,4).join(' ');\r\n  \r\n        /* has the position occurred three or move times */\r\n        positions[fen] = (fen in positions) ? positions[fen] + 1 : 1;\r\n        if (positions[fen] >= 3) {\r\n          repetition = true;\r\n        }\r\n  \r\n        if (!moves.length) {\r\n          break;\r\n        }\r\n        make_move(moves.pop());\r\n      }\r\n  \r\n      return repetition;\r\n    }\r\n  \r\n    function push(move) {\r\n      history.push({\r\n        move: move,\r\n        kings: {b: kings.b, w: kings.w},\r\n        turn: turn,\r\n        castling: {b: castling.b, w: castling.w},\r\n        ep_square: ep_square,\r\n        half_moves: half_moves,\r\n        move_number: move_number\r\n      });\r\n    }\r\n  \r\n    function make_move(move) {\r\n      var us = turn;\r\n      var them = swap_color(us);\r\n      push(move);\r\n  \r\n      board[move.to] = board[move.from];\r\n      board[move.from] = null;\r\n  \r\n      /* if ep capture, remove the captured pawn */\r\n      if (move.flags & BITS.EP_CAPTURE) {\r\n        if (turn === BLACK) {\r\n          board[move.to - 16] = null;\r\n        } else {\r\n          board[move.to + 16] = null;\r\n        }\r\n      }\r\n  \r\n      /* if pawn promotion, replace with new piece */\r\n      if (move.flags & BITS.PROMOTION) {\r\n        board[move.to] = {type: move.promotion, color: us};\r\n      }\r\n  \r\n      /* if we moved the king */\r\n      if (board[move.to].type === KING) {\r\n        kings[board[move.to].color] = move.to;\r\n  \r\n        /* if we castled, move the rook next to the king */\r\n        if (move.flags & BITS.KSIDE_CASTLE) {\r\n          var castling_to = move.to - 1;\r\n          var castling_from = move.to + 1;\r\n          board[castling_to] = board[castling_from];\r\n          board[castling_from] = null;\r\n        } else if (move.flags & BITS.QSIDE_CASTLE) {\r\n          var castling_to = move.to + 1;\r\n          var castling_from = move.to - 2;\r\n          board[castling_to] = board[castling_from];\r\n          board[castling_from] = null;\r\n        }\r\n  \r\n        /* turn off castling */\r\n        castling[us] = '';\r\n      }\r\n  \r\n      /* turn off castling if we move a rook */\r\n      if (castling[us]) {\r\n        for (var i = 0, len = ROOKS[us].length; i < len; i++) {\r\n          if (move.from === ROOKS[us][i].square &&\r\n              castling[us] & ROOKS[us][i].flag) {\r\n            castling[us] ^= ROOKS[us][i].flag;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* turn off castling if we capture a rook */\r\n      if (castling[them]) {\r\n        for (var i = 0, len = ROOKS[them].length; i < len; i++) {\r\n          if (move.to === ROOKS[them][i].square &&\r\n              castling[them] & ROOKS[them][i].flag) {\r\n            castling[them] ^= ROOKS[them][i].flag;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n  \r\n      /* if big pawn move, update the en passant square */\r\n      if (move.flags & BITS.BIG_PAWN) {\r\n        if (turn === 'b') {\r\n          ep_square = move.to - 16;\r\n        } else {\r\n          ep_square = move.to + 16;\r\n        }\r\n      } else {\r\n        ep_square = EMPTY;\r\n      }\r\n  \r\n      /* reset the 50 move counter if a pawn is moved or a piece is captured */\r\n      if (move.piece === PAWN) {\r\n        half_moves = 0;\r\n      } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\r\n        half_moves = 0;\r\n      } else {\r\n        half_moves++;\r\n      }\r\n  \r\n      if (turn === BLACK) {\r\n        move_number++;\r\n      }\r\n      turn = swap_color(turn);\r\n    }\r\n  \r\n    function undo_move() {\r\n      var old = history.pop();\r\n      if (old == null) { return null; }\r\n  \r\n      var move = old.move;\r\n      kings = old.kings;\r\n      turn = old.turn;\r\n      castling = old.castling;\r\n      ep_square = old.ep_square;\r\n      half_moves = old.half_moves;\r\n      move_number = old.move_number;\r\n  \r\n      var us = turn;\r\n      var them = swap_color(turn);\r\n  \r\n      board[move.from] = board[move.to];\r\n      board[move.from].type = move.piece;  // to undo any promotions\r\n      board[move.to] = null;\r\n  \r\n      if (move.flags & BITS.CAPTURE) {\r\n        board[move.to] = {type: move.captured, color: them};\r\n      } else if (move.flags & BITS.EP_CAPTURE) {\r\n        var index;\r\n        if (us === BLACK) {\r\n          index = move.to - 16;\r\n        } else {\r\n          index = move.to + 16;\r\n        }\r\n        board[index] = {type: PAWN, color: them};\r\n      }\r\n  \r\n  \r\n      if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\r\n        var castling_to, castling_from;\r\n        if (move.flags & BITS.KSIDE_CASTLE) {\r\n          castling_to = move.to + 1;\r\n          castling_from = move.to - 1;\r\n        } else if (move.flags & BITS.QSIDE_CASTLE) {\r\n          castling_to = move.to - 2;\r\n          castling_from = move.to + 1;\r\n        }\r\n  \r\n        board[castling_to] = board[castling_from];\r\n        board[castling_from] = null;\r\n      }\r\n  \r\n      return move;\r\n    }\r\n  \r\n    /* this function is used to uniquely identify ambiguous moves */\r\n    function get_disambiguator(move, sloppy) {\r\n      var moves = generate_moves({legal: !sloppy});\r\n  \r\n      var from = move.from;\r\n      var to = move.to;\r\n      var piece = move.piece;\r\n  \r\n      var ambiguities = 0;\r\n      var same_rank = 0;\r\n      var same_file = 0;\r\n  \r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        var ambig_from = moves[i].from;\r\n        var ambig_to = moves[i].to;\r\n        var ambig_piece = moves[i].piece;\r\n  \r\n        /* if a move of the same piece type ends on the same to square, we'll\r\n         * need to add a disambiguator to the algebraic notation\r\n         */\r\n        if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\r\n          ambiguities++;\r\n  \r\n          if (rank(from) === rank(ambig_from)) {\r\n            same_rank++;\r\n          }\r\n  \r\n          if (file(from) === file(ambig_from)) {\r\n            same_file++;\r\n          }\r\n        }\r\n      }\r\n  \r\n      if (ambiguities > 0) {\r\n        /* if there exists a similar moving piece on the same rank and file as\r\n         * the move in question, use the square as the disambiguator\r\n         */\r\n        if (same_rank > 0 && same_file > 0) {\r\n          return algebraic(from);\r\n        }\r\n        /* if the moving piece rests on the same file, use the rank symbol as the\r\n         * disambiguator\r\n         */\r\n        else if (same_file > 0) {\r\n          return algebraic(from).charAt(1);\r\n        }\r\n        /* else use the file symbol */\r\n        else {\r\n          return algebraic(from).charAt(0);\r\n        }\r\n      }\r\n  \r\n      return '';\r\n    }\r\n  \r\n    function ascii() {\r\n      var s = '   +------------------------+\\n';\r\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n        /* display the rank */\r\n        if (file(i) === 0) {\r\n          s += ' ' + '87654321'[rank(i)] + ' |';\r\n        }\r\n  \r\n        /* empty piece */\r\n        if (board[i] == null) {\r\n          s += ' . ';\r\n        } else {\r\n          var piece = board[i].type;\r\n          var color = board[i].color;\r\n          var symbol = (color === WHITE) ?\r\n                       piece.toUpperCase() : piece.toLowerCase();\r\n          s += ' ' + symbol + ' ';\r\n        }\r\n  \r\n        if ((i + 1) & 0x88) {\r\n          s += '|\\n';\r\n          i += 8;\r\n        }\r\n      }\r\n      s += '   +------------------------+\\n';\r\n      s += '     a  b  c  d  e  f  g  h\\n';\r\n  \r\n      return s;\r\n    }\r\n  \r\n    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\r\n    function move_from_san(move, sloppy) {\r\n      // strip off any move decorations: e.g Nf3+?!\r\n      var clean_move = stripped_san(move);\r\n  \r\n      // if we're using the sloppy parser run a regex to grab piece, to, and from\r\n      // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\r\n      if (sloppy) {\r\n        var matches = clean_move.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\r\n        if (matches) {\r\n          var piece = matches[1];\r\n          var from = matches[2];\r\n          var to = matches[3];\r\n          var promotion = matches[4];\r\n        }\r\n      }\r\n  \r\n      var moves = generate_moves();\r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        // try the strict parser first, then the sloppy parser if requested\r\n        // by the user\r\n        if ((clean_move === stripped_san(move_to_san(moves[i]))) ||\r\n            (sloppy && clean_move === stripped_san(move_to_san(moves[i], true)))) {\r\n          return moves[i];\r\n        } else {\r\n          if (matches &&\r\n              (!piece || piece.toLowerCase() == moves[i].piece) &&\r\n              SQUARES[from] == moves[i].from &&\r\n              SQUARES[to] == moves[i].to &&\r\n              (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\r\n            return moves[i];\r\n          }\r\n        }\r\n      }\r\n  \r\n      return null;\r\n    }\r\n  \r\n  \r\n    /*****************************************************************************\r\n     * UTILITY FUNCTIONS\r\n     ****************************************************************************/\r\n    function rank(i) {\r\n      return i >> 4;\r\n    }\r\n  \r\n    function file(i) {\r\n      return i & 15;\r\n    }\r\n  \r\n    function algebraic(i){\r\n      var f = file(i), r = rank(i);\r\n      return 'abcdefgh'.substring(f,f+1) + '87654321'.substring(r,r+1);\r\n    }\r\n  \r\n    function swap_color(c) {\r\n      return c === WHITE ? BLACK : WHITE;\r\n    }\r\n  \r\n    function is_digit(c) {\r\n      return '0123456789'.indexOf(c) !== -1;\r\n    }\r\n  \r\n    /* pretty = external move object */\r\n    function make_pretty(ugly_move) {\r\n      var move = clone(ugly_move);\r\n      move.san = move_to_san(move, false);\r\n      move.to = algebraic(move.to);\r\n      move.from = algebraic(move.from);\r\n  \r\n      var flags = '';\r\n  \r\n      for (var flag in BITS) {\r\n        if (BITS[flag] & move.flags) {\r\n          flags += FLAGS[flag];\r\n        }\r\n      }\r\n      move.flags = flags;\r\n  \r\n      return move;\r\n    }\r\n  \r\n    function clone(obj) {\r\n      var dupe = (obj instanceof Array) ? [] : {};\r\n  \r\n      for (var property in obj) {\r\n        if (typeof property === 'object') {\r\n          dupe[property] = clone(obj[property]);\r\n        } else {\r\n          dupe[property] = obj[property];\r\n        }\r\n      }\r\n  \r\n      return dupe;\r\n    }\r\n  \r\n    function trim(str) {\r\n      return str.replace(/^\\s+|\\s+$/g, '');\r\n    }\r\n  \r\n    /*****************************************************************************\r\n     * DEBUGGING UTILITIES\r\n     ****************************************************************************/\r\n    function perft(depth) {\r\n      var moves = generate_moves({legal: false});\r\n      var nodes = 0;\r\n      var color = turn;\r\n  \r\n      for (var i = 0, len = moves.length; i < len; i++) {\r\n        make_move(moves[i]);\r\n        if (!king_attacked(color)) {\r\n          if (depth - 1 > 0) {\r\n            var child_nodes = perft(depth - 1);\r\n            nodes += child_nodes;\r\n          } else {\r\n            nodes++;\r\n          }\r\n        }\r\n        undo_move();\r\n      }\r\n  \r\n      return nodes;\r\n    }\r\n  \r\n    return {\r\n      /***************************************************************************\r\n       * PUBLIC CONSTANTS (is there a better way to do this?)\r\n       **************************************************************************/\r\n      WHITE: WHITE,\r\n      BLACK: BLACK,\r\n      PAWN: PAWN,\r\n      KNIGHT: KNIGHT,\r\n      BISHOP: BISHOP,\r\n      ROOK: ROOK,\r\n      QUEEN: QUEEN,\r\n      KING: KING,\r\n      SQUARES: (function() {\r\n                  /* from the ECMA-262 spec (section 12.6.4):\r\n                   * \"The mechanics of enumerating the properties ... is\r\n                   * implementation dependent\"\r\n                   * so: for (var sq in SQUARES) { keys.push(sq); } might not be\r\n                   * ordered correctly\r\n                   */\r\n                  var keys = [];\r\n                  for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\r\n                    if (i & 0x88) { i += 7; continue; }\r\n                    keys.push(algebraic(i));\r\n                  }\r\n                  return keys;\r\n                })(),\r\n      FLAGS: FLAGS,\r\n  \r\n      /***************************************************************************\r\n       * PUBLIC API\r\n       **************************************************************************/\r\n      load: function(fen) {\r\n        return load(fen);\r\n      },\r\n  \r\n      reset: function() {\r\n        return reset();\r\n      },\r\n  \r\n      moves: function(options) {\r\n        /* The internal representation of a chess move is in 0x88 format, and\r\n         * not meant to be human-readable.  The code below converts the 0x88\r\n         * square coordinates to algebraic coordinates.  It also prunes an\r\n         * unnecessary move keys resulting from a verbose call.\r\n         */\r\n  \r\n        var ugly_moves = generate_moves(options);\r\n        var moves = [];\r\n  \r\n        for (var i = 0, len = ugly_moves.length; i < len; i++) {\r\n  \r\n          /* does the user want a full move object (most likely not), or just\r\n           * SAN\r\n           */\r\n          if (typeof options !== 'undefined' && 'verbose' in options &&\r\n              options.verbose) {\r\n            moves.push(make_pretty(ugly_moves[i]));\r\n          } else {\r\n            moves.push(move_to_san(ugly_moves[i], false));\r\n          }\r\n        }\r\n  \r\n        return moves;\r\n      },\r\n  \r\n      in_check: function() {\r\n        return in_check();\r\n      },\r\n  \r\n      in_checkmate: function() {\r\n        return in_checkmate();\r\n      },\r\n  \r\n      in_stalemate: function() {\r\n        return in_stalemate();\r\n      },\r\n  \r\n      in_draw: function() {\r\n        return half_moves >= 100 ||\r\n               in_stalemate() ||\r\n               insufficient_material() ||\r\n               in_threefold_repetition();\r\n      },\r\n  \r\n      insufficient_material: function() {\r\n        return insufficient_material();\r\n      },\r\n  \r\n      in_threefold_repetition: function() {\r\n        return in_threefold_repetition();\r\n      },\r\n  \r\n      game_over: function() {\r\n        return half_moves >= 100 ||\r\n               in_checkmate() ||\r\n               in_stalemate() ||\r\n               insufficient_material() ||\r\n               in_threefold_repetition();\r\n      },\r\n  \r\n      validate_fen: function(fen) {\r\n        return validate_fen(fen);\r\n      },\r\n  \r\n      fen: function() {\r\n        return generate_fen();\r\n      },\r\n  \r\n      pgn: function(options) {\r\n        /* using the specification from http://www.chessclub.com/help/PGN-spec\r\n         * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\r\n         */\r\n        var newline = (typeof options === 'object' &&\r\n                       typeof options.newline_char === 'string') ?\r\n                       options.newline_char : '\\n';\r\n        var max_width = (typeof options === 'object' &&\r\n                         typeof options.max_width === 'number') ?\r\n                         options.max_width : 0;\r\n        var result = [];\r\n        var header_exists = false;\r\n  \r\n        /* add the PGN header headerrmation */\r\n        for (var i in header) {\r\n          /* TODO: order of enumerated properties in header object is not\r\n           * guaranteed, see ECMA-262 spec (section 12.6.4)\r\n           */\r\n          result.push('[' + i + ' \\\"' + header[i] + '\\\"]' + newline);\r\n          header_exists = true;\r\n        }\r\n  \r\n        if (header_exists && history.length) {\r\n          result.push(newline);\r\n        }\r\n  \r\n        /* pop all of history onto reversed_history */\r\n        var reversed_history = [];\r\n        while (history.length > 0) {\r\n          reversed_history.push(undo_move());\r\n        }\r\n  \r\n        var moves = [];\r\n        var move_string = '';\r\n  \r\n        /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\r\n        while (reversed_history.length > 0) {\r\n          var move = reversed_history.pop();\r\n  \r\n          /* if the position started with black to move, start PGN with 1. ... */\r\n          if (!history.length && move.color === 'b') {\r\n            move_string = move_number + '. ...';\r\n          } else if (move.color === 'w') {\r\n            /* store the previous generated move_string if we have one */\r\n            if (move_string.length) {\r\n              moves.push(move_string);\r\n            }\r\n            move_string = move_number + '.';\r\n          }\r\n  \r\n          move_string = move_string + ' ' + move_to_san(move, false);\r\n          make_move(move);\r\n        }\r\n  \r\n        /* are there any other leftover moves? */\r\n        if (move_string.length) {\r\n          moves.push(move_string);\r\n        }\r\n  \r\n        /* is there a result? */\r\n        if (typeof header.Result !== 'undefined') {\r\n          moves.push(header.Result);\r\n        }\r\n  \r\n        /* history should be back to what is was before we started generating PGN,\r\n         * so join together moves\r\n         */\r\n        if (max_width === 0) {\r\n          return result.join('') + moves.join(' ');\r\n        }\r\n  \r\n        /* wrap the PGN output at max_width */\r\n        var current_width = 0;\r\n        for (var i = 0; i < moves.length; i++) {\r\n          /* if the current move will push past max_width */\r\n          if (current_width + moves[i].length > max_width && i !== 0) {\r\n  \r\n            /* don't end the line with whitespace */\r\n            if (result[result.length - 1] === ' ') {\r\n              result.pop();\r\n            }\r\n  \r\n            result.push(newline);\r\n            current_width = 0;\r\n          } else if (i !== 0) {\r\n            result.push(' ');\r\n            current_width++;\r\n          }\r\n          result.push(moves[i]);\r\n          current_width += moves[i].length;\r\n        }\r\n  \r\n        return result.join('');\r\n      },\r\n  \r\n      load_pgn: function(pgn, options) {\r\n        // allow the user to specify the sloppy move parser to work around over\r\n        // disambiguation bugs in Fritz and Chessbase\r\n        var sloppy = (typeof options !== 'undefined' && 'sloppy' in options) ?\r\n                      options.sloppy : false;\r\n  \r\n        function mask(str) {\r\n          return str.replace(/\\\\/g, '\\\\');\r\n        }\r\n  \r\n        function has_keys(object) {\r\n          for (var key in object) {\r\n            return true;\r\n          }\r\n          return false;\r\n        }\r\n  \r\n        function parse_pgn_header(header, options) {\r\n          var newline_char = (typeof options === 'object' &&\r\n                              typeof options.newline_char === 'string') ?\r\n                              options.newline_char : '\\r?\\n';\r\n          var header_obj = {};\r\n          var headers = header.split(new RegExp(mask(newline_char)));\r\n          var key = '';\r\n          var value = '';\r\n  \r\n          for (var i = 0; i < headers.length; i++) {\r\n            key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1');\r\n            value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\]$/, '$1');\r\n            if (trim(key).length > 0) {\r\n              header_obj[key] = value;\r\n            }\r\n          }\r\n  \r\n          return header_obj;\r\n        }\r\n  \r\n        var newline_char = (typeof options === 'object' &&\r\n                            typeof options.newline_char === 'string') ?\r\n                            options.newline_char : '\\r?\\n';\r\n        var regex = new RegExp('^(\\\\[(.|' + mask(newline_char) + ')*\\\\])' +\r\n                               '(' + mask(newline_char) + ')*' +\r\n                               '1.(' + mask(newline_char) + '|.)*$', 'g');\r\n  \r\n        /* get header part of the PGN file */\r\n        var header_string = pgn.replace(regex, '$1');\r\n  \r\n        /* no info part given, begins with moves */\r\n        if (header_string[0] !== '[') {\r\n          header_string = '';\r\n        }\r\n  \r\n        reset();\r\n  \r\n        /* parse PGN header */\r\n        var headers = parse_pgn_header(header_string, options);\r\n        for (var key in headers) {\r\n          set_header([key, headers[key]]);\r\n        }\r\n  \r\n        /* load the starting position indicated by [Setup '1'] and\r\n        * [FEN position] */\r\n        if (headers['SetUp'] === '1') {\r\n            if (!(('FEN' in headers) && load(headers['FEN']))) {\r\n              return false;\r\n            }\r\n        }\r\n  \r\n        /* delete header to get the moves */\r\n        var ms = pgn.replace(header_string, '').replace(new RegExp(mask(newline_char), 'g'), ' ');\r\n  \r\n        /* delete comments */\r\n        ms = ms.replace(/(\\{[^}]+\\})+?/g, '');\r\n  \r\n        /* delete recursive annotation variations */\r\n        var rav_regex = /(\\([^\\(\\)]+\\))+?/g\r\n        while (rav_regex.test(ms)) {\r\n          ms = ms.replace(rav_regex, '');\r\n        }\r\n  \r\n        /* delete move numbers */\r\n        ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\r\n  \r\n        /* delete ... indicating black to move */\r\n        ms = ms.replace(/\\.\\.\\./g, '');\r\n  \r\n        /* delete numeric annotation glyphs */\r\n        ms = ms.replace(/\\$\\d+/g, '');\r\n  \r\n        /* trim and get array of moves */\r\n        var moves = trim(ms).split(new RegExp(/\\s+/));\r\n  \r\n        /* delete empty entries */\r\n        moves = moves.join(',').replace(/,,+/g, ',').split(',');\r\n        var move = '';\r\n  \r\n        for (var half_move = 0; half_move < moves.length - 1; half_move++) {\r\n          move = move_from_san(moves[half_move], sloppy);\r\n  \r\n          /* move not possible! (don't clear the board to examine to show the\r\n           * latest valid position)\r\n           */\r\n          if (move == null) {\r\n            return false;\r\n          } else {\r\n            make_move(move);\r\n          }\r\n        }\r\n  \r\n        /* examine last move */\r\n        move = moves[moves.length - 1];\r\n        if (POSSIBLE_RESULTS.indexOf(move) > -1) {\r\n          if (has_keys(header) && typeof header.Result === 'undefined') {\r\n            set_header(['Result', move]);\r\n          }\r\n        }\r\n        else {\r\n          move = move_from_san(move, sloppy);\r\n          if (move == null) {\r\n            return false;\r\n          } else {\r\n            make_move(move);\r\n          }\r\n        }\r\n        return true;\r\n      },\r\n  \r\n      header: function() {\r\n        return set_header(arguments);\r\n      },\r\n  \r\n      ascii: function() {\r\n        return ascii();\r\n      },\r\n  \r\n      turn: function() {\r\n        return turn;\r\n      },\r\n  \r\n      move: function(move, options) {\r\n        /* The move function can be called with in the following parameters:\r\n         *\r\n         * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\r\n         *\r\n         * .move({ from: 'h7', <- where the 'move' is a move object (additional\r\n         *         to :'h8',      fields are ignored)\r\n         *         promotion: 'q',\r\n         *      })\r\n         */\r\n  \r\n        // allow the user to specify the sloppy move parser to work around over\r\n        // disambiguation bugs in Fritz and Chessbase\r\n        var sloppy = (typeof options !== 'undefined' && 'sloppy' in options) ?\r\n                      options.sloppy : false;\r\n  \r\n        var move_obj = null;\r\n  \r\n        if (typeof move === 'string') {\r\n          move_obj = move_from_san(move, sloppy);\r\n        } else if (typeof move === 'object') {\r\n          var moves = generate_moves();\r\n  \r\n          /* convert the pretty move object to an ugly move object */\r\n          for (var i = 0, len = moves.length; i < len; i++) {\r\n            if (move.from === algebraic(moves[i].from) &&\r\n                move.to === algebraic(moves[i].to) &&\r\n                (!('promotion' in moves[i]) ||\r\n                move.promotion === moves[i].promotion)) {\r\n              move_obj = moves[i];\r\n              break;\r\n            }\r\n          }\r\n        }\r\n  \r\n        /* failed to find move */\r\n        if (!move_obj) {\r\n          return null;\r\n        }\r\n  \r\n        /* need to make a copy of move because we can't generate SAN after the\r\n         * move is made\r\n         */\r\n        var pretty_move = make_pretty(move_obj);\r\n  \r\n        make_move(move_obj);\r\n  \r\n        return pretty_move;\r\n      },\r\n  \r\n      undo: function() {\r\n        var move = undo_move();\r\n        return (move) ? make_pretty(move) : null;\r\n      },\r\n  \r\n      clear: function() {\r\n        return clear();\r\n      },\r\n  \r\n      put: function(piece, square) {\r\n        return put(piece, square);\r\n      },\r\n  \r\n      get: function(square) {\r\n        return get(square);\r\n      },\r\n  \r\n      remove: function(square) {\r\n        return remove(square);\r\n      },\r\n  \r\n      perft: function(depth) {\r\n        return perft(depth);\r\n      },\r\n  \r\n      square_color: function(square) {\r\n        if (square in SQUARES) {\r\n          var sq_0x88 = SQUARES[square];\r\n          return ((rank(sq_0x88) + file(sq_0x88)) % 2 === 0) ? 'light' : 'dark';\r\n        }\r\n  \r\n        return null;\r\n      },\r\n  \r\n      history: function(options) {\r\n        var reversed_history = [];\r\n        var move_history = [];\r\n        var verbose = (typeof options !== 'undefined' && 'verbose' in options &&\r\n                       options.verbose);\r\n  \r\n        while (history.length > 0) {\r\n          reversed_history.push(undo_move());\r\n        }\r\n  \r\n        while (reversed_history.length > 0) {\r\n          var move = reversed_history.pop();\r\n          if (verbose) {\r\n            move_history.push(make_pretty(move));\r\n          } else {\r\n            move_history.push(move_to_san(move));\r\n          }\r\n          make_move(move);\r\n        }\r\n  \r\n        return move_history;\r\n      },\r\n\r\n      movenotation: function(move){\r\n          return move_to_san(move);\r\n      },\r\n  \r\n    };\r\n  };\r\n  \r\n  /* export Chess object if using node or any other CommonJS compatible\r\n   * environment */\r\n  if (typeof exports !== 'undefined') exports.Chess = Chess;\r\n  /* export Chess object for any RequireJS compatible environment */\r\n  if (typeof define !== 'undefined') define( function () { return Chess;  });","import { JwtAuthenticationService } from './jwtAuthenticationService';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n\r\n    private tokenDecoder: JwtHelperService;\r\n    private authService: JwtAuthenticationService;\r\n\r\n    constructor(private router: Router, authService : JwtAuthenticationService) { \r\n        this.tokenDecoder = new JwtHelperService();\r\n        this.authService = authService;\r\n\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n        const user = localStorage.getItem('currentUser');\r\n        if (user) {\r\n            let token:string = JSON.parse(user).jwtToken;\r\n            this.authService.authenticatedUser = JSON.parse(user).username;\r\n           // console.log(token);\r\n           // console.log(this.tokenDecoder.getTokenExpirationDate(token.substring('Bearer '.length)))\r\n            if (!this.tokenDecoder.isTokenExpired(token.substring('Bearer '.length))){\r\n                // logged in so return true\r\n                return true;\r\n            }\r\n            else {\r\n                localStorage.removeItem('currentUser');\r\n            }\r\n        }\r\n\r\n        // not logged in so redirect to login page with the return url\r\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\r\n        return false;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\n@Injectable()\r\nexport class JwtAuthenticationService {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    public authenticatedUser = {username:null, jwtToken:null}\r\n\r\n    authenticate(credentials:any) { \r\n       console.log(\"starting the post request\");\r\n       return this.http.post<any>(`http://localhost:8082/authenticate`, credentials, {observe: 'response'})\r\n            .pipe(map(response => {\r\n                console.log(response);\r\n                let jwtToken = response.headers.get('Authorization');\r\n               // let user = {};\r\n                // login successful if there's a jwt token in the response\r\n                if (jwtToken) {\r\n                    this.authenticatedUser = {username: credentials.username, jwtToken: jwtToken}\r\n                    // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                    localStorage.setItem('currentUser', JSON.stringify(this.authenticatedUser));\r\n                }\r\n                return this.authenticatedUser;\r\n            }));\r\n    }\r\n\r\n    getJwtToken(){   \r\n        \r\n        return JSON.parse(localStorage.getItem('currentUser')).jwtToken;\r\n    }\r\n\r\n    isUserAuthenticated(){\r\n        let user =  localStorage.getItem('currentUser');\r\n        console.log(user);\r\n        return user ? true : false;\r\n    }\r\n\r\n    logout() {\r\n        // remove user from local storage to log user out\r\n        localStorage.removeItem('currentUser');\r\n    }\r\n}","import { JwtAuthenticationService } from './jwtAuthenticationService';\r\nimport { Injectable } from '@angular/core';\r\n\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class WebSocketService {\r\n    constructor(private authenticationService:JwtAuthenticationService) { }\r\n\r\n    socket:WebSocket;\r\n\r\n    initWebSockets():WebSocket{\r\n\t\tif(typeof this.socket === 'undefined' || this.socket.readyState !== this.socket.OPEN){\r\n\t\t\tconst jwtToken = this.authenticationService.getJwtToken();\r\n\t\t\tthis.socket = new WebSocket(\r\n\t\t\t\t\t\"ws://localhost:8082/actions?token=\"+jwtToken);\r\n\t\t}\r\n\t\t\treturn this.socket;\r\n\t\t\r\n\t}\r\n\tcloseWebSocket(){\r\n\t\tthis.socket.close();\r\n\t}\r\n    \r\n}","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { environment } from './environments/environment';\r\nimport 'zone.js'\r\n\r\nimport { AppModule } from './app.module';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule);","export default \"<nav class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\">\\r\\n    <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Slovak Chess Server</a>\\r\\n    <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" (click)=\\\"navbarCollapsed = !navbarCollapsed\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarSupportedContent\\\" \\r\\n    aria-controls=\\\"navbarSupportedContent\\\" [attr.aria-expanded]=\\\"!navbarCollapsed\\\" aria-label=\\\"Toggle navigation\\\">\\r\\n      <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n    </button>\\r\\n  \\r\\n    <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarSupportedContent\\\" [ngClass]=\\\"{'show':!navbarCollapsed}\\\">\\r\\n      <ul class=\\\"navbar-nav mr-auto\\\">\\r\\n        <li class=\\\"nav-item active\\\">\\r\\n          <a class=\\\"nav-link\\\" href=\\\"#\\\">Register <span class=\\\"sr-only\\\">(current)</span></a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLink=\\\"login\\\">Login</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLink=\\\"lobby\\\">Play</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" href=\\\"#\\\">Watch</a>\\r\\n        </li>\\r\\n        <li class=\\\"nav-item\\\">\\r\\n            <a class=\\\"nav-link\\\" routerLink=\\\"analyzeGame\\\">Analyse</a>\\r\\n        </li>\\r\\n       \\r\\n      </ul>\\r\\n      <form class=\\\"form-inline my-2 my-lg-0\\\">\\r\\n       \\r\\n            <a ng-if=\\\"authenticated==true\\\" href=\\\"#/userProfile\\\">\\r\\n                <span class=\\\"glyphicon glyphicon-user\\\"></span> {{user}}\\r\\n            </a>\\r\\n         \\r\\n            <a ng-if=\\\"authenticated==true\\\" ng-click=\\\"logout()\\\" style=\\\"cursor:pointer\\\">\\r\\n                <span class=\\\"glyphicon glyphicon-log-out\\\"></span> Log out\\r\\n            </a>\\r\\n  \\r\\n      </form>\\r\\n    </div>\\r\\n  </nav>\\r\\n<!-- <nav class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\">\\r\\n    <div class=\\\"container\\\" style=\\\"margin-bottom: 0px\\\">\\r\\n \\r\\n        <div class=\\\"navbar-header\\\">\\r\\n            <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\"\\r\\n                    data-toggle=\\\"collapse\\\" data-target=\\\"#bs-example-navbar-collapse-1\\\"\\r\\n                    aria-expanded=\\\"false\\\">\\r\\n                <span class=\\\"sr-only\\\">Toggle navigation</span> <span\\r\\n                    class=\\\"icon-bar\\\"></span> <span class=\\\"icon-bar\\\"></span> <span\\r\\n                    class=\\\"icon-bar\\\"></span>\\r\\n            </button>\\r\\n\\r\\n            <a class=\\\"navbar-brand\\\" href=\\\"#\\\">ChessHeaven</a>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"collapse navbar-collapse\\\"\\r\\n             id=\\\"bs-example-navbar-collapse-1\\\">\\r\\n            <ul class=\\\"nav navbar-nav\\\">\\r\\n\\r\\n                <li>\\r\\n                    <a href=\\\"#/register\\\">Register</a>\\r\\n                </li>\\r\\n                <li ng-if=\\\"authenticated!==true\\\">\\r\\n                    <a href=\\\"#/loginpage\\\">Login</a>\\r\\n                </li>\\r\\n\\r\\n                <li ng-if=\\\"authenticated==true && userHasRole('ROLE_ADMIN')\\\"><a\\r\\n                        href=\\\"#/admin\\\">Admin Section</a></li>\\r\\n\\r\\n                <li class=\\\"dropdown\\\" ng-if=\\\"authenticated==true\\\">\\r\\n                    <a href=\\\"#\\\" class=\\\"dropdown-toggle\\\" data-toggle=\\\"dropdown\\\" role=\\\"button\\\" aria-haspopup=\\\"true\\\"\\r\\n                       aria-expanded=\\\"false\\\">Chess<span class=\\\"caret\\\"></span></a>\\r\\n                    <ul class=\\\"dropdown-menu\\\">\\r\\n                        <li><a href=\\\"#/playingHall\\\">Play game</a></li>\\r\\n                        <li><a href=\\\"#/lobby\\\">Lobby</a></li>\\r\\n                        <li><a routerLink=\\\"/analyzeGame\\\">Analyse game</a></li>\\r\\n                        <li role=\\\"separator\\\" class=\\\"divider\\\"></li>\\r\\n                        <li><a href=\\\"#\\\">Separated link</a></li>\\r\\n                        <li role=\\\"separator\\\" class=\\\"divider\\\"></li>\\r\\n                        <li><a href=\\\"#\\\">One more separated link</a></li>\\r\\n                    </ul>\\r\\n                </li>\\r\\n            </ul>\\r\\n            <ul class=\\\"nav navbar-nav navbar-right\\\">\\r\\n                <li ng-if=\\\"authenticated==true\\\">\\r\\n                    <a href=\\\"#/userProfile\\\">\\r\\n                        <span class=\\\"glyphicon glyphicon-user\\\"></span> {{user}}\\r\\n                    </a>\\r\\n                </li>\\r\\n\\r\\n                <li ng-if=\\\"authenticated==true\\\">\\r\\n                    <a ng-click=\\\"logout()\\\" style=\\\"cursor:pointer\\\">\\r\\n                        <span class=\\\"glyphicon glyphicon-log-out\\\"></span> Log out\\r\\n                    </a>\\r\\n                </li>\\r\\n            </ul>\\r\\n        </div>\\r\\n    \\r\\n    </div>\\r\\n\\r\\n</nav> -->\\r\\n\\r\\n<router-outlet></router-outlet>\\r\\n\\r\\n\"","export default \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"row marginBottom\\\">\\r\\n        <div class=\\\"col\\\">Players online:\\r\\n            {{countOfPlayersOnline}} <br>\\r\\n            Games in progress: {{gamesInProgress}}\\r\\n        </div>\\r\\n        <div class=\\\"col-md-10\\\">\\r\\n\\r\\n            <div class=\\\"row marginBottom\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div>\\r\\n                        <h4>Lobby</h4>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row marginBottom\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div class=\\\"row marginBottom\\\">\\r\\n                        <div class=\\\"col-1\\\" *ngIf=\\\"seekingOponent\\\">\\r\\n                            <div class=\\\"loader\\\" id=\\\"loader-1\\\" >\\r\\n                                \\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col\\\" *ngIf=\\\"seekingOponent\\\">\\r\\n\\r\\n                            <span>Looking for an oponent - please wait...</span>\\r\\n                           \\r\\n                        </div>\\r\\n                        \\r\\n                    </div>\\r\\n                    <div class=\\\"row marginBottom\\\">\\r\\n                        <div class=\\\"col-sm-5\\\" style=\\\"display:flex;justify-content: space-between;\\\">\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"seekOponent(1,0)\\\" id=\\\"seek1\\\">1+0\\r\\n                            </button>\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"seekOponent(3,0)\\\">3+0\\r\\n                            </button>\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"seekOponent(5,0)\\\">5+0\\r\\n                            </button>\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"seekOponent(3,1)\\\">3+1\\r\\n                            </button>\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"showSeekForm()\\\" id=\\\"seek2\\\">Other time\\r\\n                            </button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row marginBottom\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div *ngIf=\\\"gameTimeFormShown==true\\\">\\r\\n                        <form [formGroup]=\\\"gameTimeForm\\\" (ngSubmit)=\\\"seekOponent()\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"initialtime\\\">Initial Time</label>\\r\\n                                <input type=\\\"text\\\" formControlName=\\\"initialtime\\\" class=\\\"form-control\\\"\\r\\n                                    [ngClass]=\\\"{ 'is-invalid': gameTimeFormSubmitted && gameTimeFormFields.initialtime.errors }\\\" />\\r\\n                                <div *ngIf=\\\"gameTimeFormSubmitted && gameTimeFormFields.initialtime.errors\\\"\\r\\n                                    class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"gameTimeFormFields.initialtime.errors.required\\\">Initial time is\\r\\n                                        required\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"incrementpermove\\\">Increment per move</label>\\r\\n                                <input type=\\\"incrementpermove\\\" formControlName=\\\"incrementpermove\\\" class=\\\"form-control\\\"\\r\\n                                    [ngClass]=\\\"{ 'is-invalid': gameTimeFormSubmitted && gameTimeFormFields.incrementpermove.errors }\\\" />\\r\\n                                <div *ngIf=\\\"gameTimeFormSubmitted && gameTimeFormFields.incrementpermove.errors\\\"\\r\\n                                    class=\\\"invalid-feedback\\\">\\r\\n                                    <div *ngIf=\\\"gameTimeFormFields.incrementpermove.errors.required\\\">Increment per\\r\\n                                        move\\r\\n                                        is required</div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <!--      <div class=\\\"form-group\\\">\\r\\n                            <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\r\\n                                <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\r\\n                                Login\\r\\n                            </button>\\r\\n                        </div> -->\\r\\n                        </form>\\r\\n\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n\\r\\n            <div class=\\\"row marginBottom\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div *ngIf=\\\"playersOnline.length !== 0\\\">\\r\\n                        <h4>Players online</h4>\\r\\n                        <table class=\\\"table table-bordered\\\">\\r\\n                            <thead>\\r\\n                                <td>Player name</td>\\r\\n                                <td>Player elo</td>\\r\\n                                <td>Player status</td>\\r\\n                            </thead>\\r\\n                            <tbody>\\r\\n                                <tr *ngFor=\\\"let player of playersOnline\\\">\\r\\n                                    <td>{{player.name}}</td>\\r\\n                                    <td>{{player.elo}}</td>\\r\\n                                    <td>\\r\\n                                        <span *ngIf=\\\"player.isPlaying\\\" class=\\\"label label-info\\\">Playing </span><span\\r\\n                                            class=\\\"glyphicon glyphicon-eye-open\\\" *ngIf=\\\"player.isPlaying\\\"\\r\\n                                            (click)=\\\"observeGame(player.name)\\\">Observe game</span>\\r\\n                                        <span\\r\\n                                            *ngIf=\\\"((player.name !== user && player.isSeeking) || (player.name === user && seekingOponent)) && !player.isPlaying\\\"\\r\\n                                            class=\\\"label label-success\\\">Seeking</span>\\r\\n                                        <span\\r\\n                                            *ngIf=\\\"((player.name !== user && !player.isSeeking) || (player.name === user && !seekingOponent)) && !player.isPlaying\\\"\\r\\n                                            class=\\\"label label-success\\\">Idle</span>\\r\\n                                    </td>\\r\\n                                </tr>\\r\\n                            </tbody>\\r\\n                        </table>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row chatMessageDiv\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <h4>Lobby Chat</h4>\\r\\n                    <div class=\\\"chatWindow\\\" ng-scrollbars ng-scrollbars-config=\\\"config\\\">\\r\\n\\r\\n                        <div id=\\\"chatPost\\\" *ngFor=\\\"let message of messages.slice().reverse()\\\">\\r\\n                            <label class=\\\"chatPostAuthor\\\" for=\\\"message\\\">{{message.date | date:'H:mm' }}\\r\\n                                {{message.author}}: </label>\\r\\n                            <span id=\\\"message\\\">{{message.message}}</span>\\r\\n                        </div>\\r\\n\\r\\n\\r\\n                    </div>\\r\\n\\r\\n                    <div>\\r\\n                        <input type=\\\"text\\\" id=\\\"chatmessage\\\" [(ngModel)]=\\\"chatMessage.message\\\">\\r\\n                        <button (click)=\\\"sendChatMessage()\\\">Send</button>\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n            </div>\\r\\n        </div>\"","export default \"<div class=\\\"container\\\">\\n    <h2>Login</h2>\\n    <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\">\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"username\\\">Username</label>\\n            <input type=\\\"text\\\" formControlName=\\\"username\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.username.errors }\\\" />\\n            <div *ngIf=\\\"submitted && f.username.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.username.errors.required\\\">Username is required</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label for=\\\"password\\\">Password</label>\\n            <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\n            <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\n                <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">\\n                <span *ngIf=\\\"loading\\\" class=\\\"spinner-border spinner-border-sm mr-1\\\"></span>\\n                Login\\n            </button>\\n        </div>\\n    </form>\\n    </div>\\n    \"","export default \"<div class=\\\"container bordered\\\">\\r\\n    <div class=\\\"playerNamesRow\\\">\\r\\n        <div class=\\\"playersRow\\\">\\r\\n            <div class=\\\"players col-md-12 alert-success\\\" *ngIf=\\\"whitePlayerName\\\">\\r\\n                {{whitePlayerName}}({{whitePlayerElo}}) -\\r\\n                {{blackPlayerName}}({{blackPlayerElo}}) <span *ngIf=\\\"gameResult\\\">Game result: {{gameResult}}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-7\\\">\\r\\n            <!-- -->\\r\\n            <div class=\\\"row\\\"\\r\\n                *ngIf=\\\"showPawnPromotionDiv==true && (mode=== chessboardUsageModes.PLAYING || mode=== chessboardUsageModes.ANALYZING)\\\">\\r\\n                <div class=\\\"col promotionPieces\\\">\\r\\n                    Which piece do you want to promote the pawn to?\\r\\n                    <table class=\\\"table\\\">\\r\\n                        <tr>\\r\\n                            <td>\\r\\n                                <div style=\\\"position: relative\\\">\\r\\n                                    <img class=\\\"chessPiece\\\"\\r\\n                                        src=\\\"{{whitePlayer==true ? 'assets/images/pieces/WN.png' : 'assets/images/pieces/BN.png'}}\\\"\\r\\n                                        (click)=\\\"promotePiece('n')\\\" />\\r\\n                                </div>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                                <div style=\\\"position: relative\\\">\\r\\n                                    <img class=\\\"chessPiece\\\"\\r\\n                                        src=\\\"{{whitePlayer==true ? 'assets/images/pieces/WB.png' : 'assets/images/pieces/BB.png'}}\\\"\\r\\n                                        (click)=\\\"promotePiece('b')\\\" />\\r\\n                                </div>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                                <div style=\\\"position: relative\\\">\\r\\n                                    <img class=\\\"chessPiece\\\"\\r\\n                                        src=\\\"{{whitePlayer==true?'assets/images/pieces/WR.png':'assets/images/pieces/BR.png'}}\\\"\\r\\n                                        (click)=\\\"promotePiece('r')\\\" />\\r\\n                                </div>\\r\\n                            </td>\\r\\n                            <td>\\r\\n                                <div style=\\\"position: relative\\\">\\r\\n                                    <img class=\\\"chessPiece\\\"\\r\\n                                        src=\\\"{{whitePlayer==true?'assets/images/pieces/WQ.png':'assets/images/pieces/BQ.png'}}\\\"\\r\\n                                        (click)=\\\"promotePiece('q')\\\" />\\r\\n                                </div>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                    </table>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div id=\\\"newChessboardContainer\\\"></div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\" *ngIf=\\\"mode === chessboardUsageModes.ANALYZING\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div class=\\\"moveControlsWrapper\\\">\\r\\n                        <img src=\\\"assets/images/arrow-first-move.png\\\" (click)=\\\"goToFirstMove()\\\" />\\r\\n                        <img src=\\\"assets/images/arrow-previous-move.png\\\" (click)=\\\"goToPreviousMove()\\\" />\\r\\n                        <img src=\\\"assets/images/arrow-next-move.png\\\" (click)=\\\"goToNextMove()\\\" />\\r\\n                        <img src=\\\"assets/images/arrow-last-move.png\\\" (click)=\\\"goToLastMove()\\\" />\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-5 chessboardSidebarWrapper\\\">\\r\\n            <div class=\\\"row clockRow\\\" *ngIf=\\\"whitePlayerName && mode !== chessboardUsageModes.ANALYZING\\\">\\r\\n                <div class=\\\"col-md-6\\\">\\r\\n                    <table class=\\\"clockSideSection\\\">\\r\\n                        <tr>\\r\\n                            <td *ngIf=\\\"!whitePlayer\\\">{{whitePlayerName}} ({{whitePlayerElo}})\\r\\n                                <span>{{whitePlayerEloChange >= 0 ? \\\"+\\\"+whitePlayerEloChange : whitePlayerEloChange}}</span>\\r\\n                            </td>\\r\\n                            <td *ngIf=\\\"whitePlayer\\\">{{blackPlayerName}} ({{blackPlayerElo}})\\r\\n                                <span>{{blackPlayerEloChange >= 0 ? \\\"+\\\"+blackPlayerEloChange : blackPlayerEloChange}}</span>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td [ngClass]=\\\"{'clock':true, 'clockActive':whiteMove,  'clockNotActive':!whiteMove}\\\"\\r\\n                                *ngIf=\\\"!whitePlayer\\\">\\r\\n                                {{whiteClock}}\\r\\n                            </td>\\r\\n                            <td [ngClass]=\\\"{'clock':true, 'clockActive':!whiteMove, 'clockNotActive':whiteMove}\\\"\\r\\n                                *ngIf=\\\"whitePlayer\\\">{{blackClock}}\\r\\n                            </td>\\r\\n                        </tr>\\r\\n\\r\\n                    </table>\\r\\n                </div>\\r\\n                <div class=\\\"col-sm-6\\\">\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row notationRow\\\" *ngIf=\\\"annotatedMoves.length > 0\\\">\\r\\n                <div class=\\\"col \\\">\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col\\\">\\r\\n                            <div class=\\\"row\\\">\\r\\n                                <div class=\\\"col \\\">\\r\\n                                    <div class=\\\"row border\\\" style=\\\"margin-left:0px; margin-bottom:-2px; width: 100%\\\">\\r\\n                                        <div class=\\\"col\\\">\\r\\n                                            <div class=\\\"row notationTableHeader\\\">\\r\\n                                                <div class=\\\"col border border-dark \\\">Move no.</div>\\r\\n                                                <div class=\\\"col border border-dark border-left-0\\\">White move</div>\\r\\n                                                <div class=\\\"col border border-dark border-left-0\\\">Black move</div>\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"row notationTable\\\" \\r\\n                                        style=\\\"margin-left:0px\\\">\\r\\n\\r\\n                                        <div class=\\\"col\\\">\\r\\n                                            <div class=\\\"row border\\\" *ngFor=\\\"let annotatedMove of annotatedMoves\\\">\\r\\n                                                <div class=\\\"col\\\">\\r\\n                                                    <div class=\\\"row\\\">\\r\\n                                                        <div class=\\\"col\\\">{{annotatedMove.moveNumber}}</div>\\r\\n                                                        <div class=\\\"col\\\"\\r\\n                                                            id=\\\"{{'annotatedMoveWhite'+annotatedMove.moveNumber}}\\\"\\r\\n                                                            [ngClass]=\\\"{'annotatedMove':true,\\r\\n                                                     'highlighted':moveToHighlight.variationId === MAIN_LINE \\r\\n                                                                && moveToHighlight.moveNumber+1===annotatedMove.moveNumber \\r\\n                                                                && moveToHighlight.whiteMove === true}\\\"\\r\\n                                                            (click)=\\\"redrawChessboard(annotatedMove.chessboardAfterWhiteMove,MAIN_LINE)\\\">\\r\\n                                                            {{annotatedMove.whiteMove}}\\r\\n                                                        </div>\\r\\n                                                        <div class=\\\"col\\\"\\r\\n                                                            id=\\\"{{'annotatedMoveBlack'+annotatedMove.moveNumber}}\\\"\\r\\n                                                            [ngClass]=\\\"{'annotatedMove':true,\\r\\n                                                     'highlighted':moveToHighlight.variationId === MAIN_LINE && \\r\\n                                                                   moveToHighlight.moveNumber+1===annotatedMove.moveNumber && \\r\\n                                                                   moveToHighlight.whiteMove === false}\\\"\\r\\n                                                            (click)=\\\"redrawChessboard(annotatedMove.chessboardAfterBlackMove,MAIN_LINE)\\\">\\r\\n                                                            {{annotatedMove.blackMove}}\\r\\n                                                        </div>\\r\\n                                                    </div>\\r\\n\\r\\n                                                    <div class=\\\"row border border-dark\\\"\\r\\n                                                        *ngFor=\\\"let variation of annotatedMove.whiteMoveVariations\\\">\\r\\n                                                        <td colspan=\\\"3\\\">\\r\\n                                                            <variation-tree [moveToHighlight]=\\\"moveToHighlight\\\"\\r\\n                                                                [mainVariation]=\\\"variation\\\"\\r\\n                                                                (positionToRedraw)=\\\"setupVariation($event)\\\">\\r\\n                                                            </variation-tree>\\r\\n                                                        </td>\\r\\n                                                    </div>\\r\\n\\r\\n                                                    <div class=\\\"row border border-dark\\\"\\r\\n                                                        *ngFor=\\\"let variation of annotatedMove.blackMoveVariations\\\">\\r\\n                                                        <td colspan=\\\"3\\\">\\r\\n                                                            <variation-tree [moveToHighlight]=\\\"moveToHighlight\\\"\\r\\n                                                                [mainVariation]=\\\"variation\\\"\\r\\n                                                                (positionToRedraw)=\\\"setupVariation($event)\\\">\\r\\n                                                            </variation-tree>\\r\\n                                                        </td>\\r\\n                                                    </div>\\r\\n                                                </div>\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <span>{{gameResult}}</span>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div *ngIf=\\\"mode === chessboardUsageModes.PLAYING\\\" id=\\\"drawResignSection\\\">\\r\\n\\r\\n                        <button (click)=\\\"offerDraw()\\\" class=\\\"btn btn-primary\\\">Offer Draw</button>\\r\\n                        <button (click)=\\\"resignButtonPressed = true\\\" class=\\\"btn btn-primary\\\">Resign</button>\\r\\n                        <button (click)=\\\"activateAnalysisMode()\\\" class=\\\"btn btn-primary\\\"\\r\\n                            *ngIf=\\\"!playingGame\\\">Analyse</button>\\r\\n\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col\\\">\\r\\n                    <div *ngIf=\\\"drawOfferReceived && mode === chessboardUsageModes.PLAYING\\\" class=\\\"alert alert-info\\\">\\r\\n                        <div>\\r\\n                        <span>{{oponent}} offered you a draw. Do you want to accept?</span>\\r\\n                    </div>\\r\\n                        <button (click)=\\\"drawOfferReply(true)\\\">Yes</button>\\r\\n                        <button (click)=\\\"drawOfferReply(false)\\\">No</button>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"resignButtonPressed && mode === chessboardUsageModes.PLAYING\\\" class=\\\"alert alert-info\\\">\\r\\n                        <span>Do you really want to resign?</span>\\r\\n                        <button (click)=\\\"resign()\\\">Yes</button>\\r\\n                        <button (click)=\\\"resignButtonPressed = false\\\">No</button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row clockRow\\\">\\r\\n                <div class=\\\"col-md-12\\\">\\r\\n                    <table *ngIf=\\\"whitePlayerName && mode !== chessboardUsageModes.ANALYZING\\\">\\r\\n                        <tr>\\r\\n                            <td *ngIf=\\\"whitePlayer\\\">{{whitePlayerName}} ({{whitePlayerElo}})\\r\\n                                <span>{{whitePlayerEloChange >= 0 ? \\\"+\\\"+whitePlayerEloChange : whitePlayerEloChange}}</span>\\r\\n                            </td>\\r\\n                            <td *ngIf=\\\"!whitePlayer\\\">{{blackPlayerName}} ({{blackPlayerElo}})\\r\\n                                <span>{{blackPlayerEloChange >= 0 ? \\\"+\\\"+blackPlayerEloChange : blackPlayerEloChange}}</span>\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td [ngClass]=\\\"{'clock':true, 'clockActive':whiteMove, 'clockNotActive':!whiteMove}\\\"\\r\\n                                *ngIf=\\\"whitePlayer\\\">\\r\\n                                {{whiteClock}}\\r\\n                            </td>\\r\\n                            <td [ngClass]=\\\"{'clock':true, 'clockActive':!whiteMove, 'clockNotActive':whiteMove}\\\"\\r\\n                                *ngIf=\\\"!whitePlayer\\\">\\r\\n                                {{blackClock}}\\r\\n                            </td>\\r\\n                        </tr>\\r\\n                    </table>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","export default \"<div>\\n    (<span *ngFor=\\\"let moveOfVariation of mainVariation.moves; index as $index\\\" >\\n        {{moveOfVariation.moveNumber}}. <span *ngIf=\\\"mainVariation.moves[0].whiteMove === '' && $index === 0\\\">..</span>\\n      \\n        <a *ngIf=\\\"moveOfVariation.whiteMove\\\" id=\\\"{{'moveOfVariationNo'+mainVariation.variationId+'White'+moveOfVariation.moveNumber}}\\\" \\n        [ngClass] = \\\"{'highlighted': mainVariation.variationId === moveToHighlight.variationId && \\n                                     moveOfVariation.moveNumber === moveToHighlight.moveNumber + 1 &&\\n                                     true === moveToHighlight.whiteMove}\\\"\\n        (click)=\\\"redrawPosition(moveOfVariation.chessboardAfterWhiteMove, mainVariation.variationId )\\\">{{moveOfVariation.whiteMove}} </a>\\n          \\n        <a *ngIf=\\\"moveOfVariation.blackMove\\\" id=\\\"{{'moveOfVariationNo'+mainVariation.variationId+'Black'+moveOfVariation.moveNumber}}\\\" \\n        [ngClass] = \\\"{'highlighted': mainVariation.variationId === moveToHighlight.variationId && \\n                                     moveOfVariation.moveNumber === moveToHighlight.moveNumber + 1 &&\\n                                     false === moveToHighlight.whiteMove}\\\"\\n        (click)=\\\"redrawPosition(moveOfVariation.chessboardAfterBlackMove, mainVariation.variationId )\\\">{{moveOfVariation.blackMove}}</a>\\n     \\n        <span *ngFor=\\\"let subvariation of moveOfVariation.whiteMoveVariations\\\">\\n            <variation-tree [moveToHighlight]=\\\"moveToHighlight\\\" [mainVariation]=\\\"subvariation\\\" (positionToRedraw)=\\\"redrawPosition($event.fen, $event.variationId)\\\"></variation-tree>\\n        </span>\\n        <span *ngFor=\\\"let subvariation of moveOfVariation.blackMoveVariations\\\">\\n            <variation-tree [moveToHighlight]=\\\"moveToHighlight\\\" [mainVariation]=\\\"subvariation\\\" (positionToRedraw)=\\\"redrawPosition($event.fen,$event.variationId)\\\"></variation-tree>\\n        </span>\\n    </span>)\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'homepage',\r\n    templateUrl: 'homepage.html'\r\n})\r\n\r\nexport class HomePageComponent implements OnInit {\r\n\r\n    navbarCollapsed:boolean = true;\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n       \r\n     }\r\n}","export default \".bottomMargin{\\r\\n    margin-bottom: 10px;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZXdzL2xvYmJ5L2xvYmJ5LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxtQkFBbUI7QUFDdkIiLCJmaWxlIjoidmlld3MvbG9iYnkvbG9iYnkuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5ib3R0b21NYXJnaW57XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG59Il19 */\"","import { JwtAuthenticationService } from './../../js/services/jwtAuthenticationService';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { WebSocketService } from './../../js/services/websocketService';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router'\n\n\n@Component({\n  selector: 'app-lobby',\n  templateUrl: './lobby.component.html',\n  styleUrls: ['./lobby.component.css']\n})\nexport class LobbyComponent implements OnInit {\n\n  constructor(private router: Router, private websocketService:WebSocketService, \n    private authenticationService:JwtAuthenticationService,\n      private formBuilder: FormBuilder ) {\n   }\n\n  chatMessage = { action: \"chatMessageLobby\", author: null, message:\"\"};\n\n  gameTimeForm: FormGroup;\n  gameTimeFormSubmitted: boolean;\n  gameTimeFormShown : boolean;\n\n  time = 0;\n  increment = 0;\n  messages = [];\n  countOfPlayersOnline :number;\n  gamesInProgress = 0;\n  playersOnline = [];\n  seekingOponent = false;\n \n  user = {};\n\n  socket: WebSocket;\n  queryPlayersInterval:any;\n  seekOponentInterval:any;\n\n  ngOnInit(): void {\n\n    this.gameTimeForm = this.formBuilder.group({\n      time: ['', Validators.required],\n      increment: ['', Validators.required]\n    });\n    this.gameTimeFormSubmitted = false;\n    this.gameTimeFormShown = false;\n    this.socket = this.websocketService.initWebSockets();\n    this.socket.onmessage = (message) => {this.onMessage(message)};\n    this.socket.onclose = () => {\n      console.log(\"closing timer\");\n      this.cancelIntervals();\n    };\n    this.user = this.authenticationService.authenticatedUser;\n\n    this.queryPlayersInterval = setInterval(()=>{this.queryPlayersOnline()}, 10000);\n\n  };\n\n  // convenience getter for easy access to form fields\n  get gameTimeFormFields() { return this.gameTimeForm.controls; }\n\n  sendChatMessage() {\n    this.chatMessage.author = this.authenticationService.authenticatedUser;\n    this.socket.send(JSON.stringify(this.chatMessage));\n    this.chatMessage.message = \"\";\n  };\n\n  config = {\n\n    autoHideScrollbar: false,\n    setHeight: 300,\n    scrollInertia: 500,\n    axis: 'yx',\n    advanced: {\n      updateOnContentResize: true\n    },\n    scrollButtons: {\n      scrollAmount: 'auto', // scroll amount when button pressed\n      enable: true // enable scrolling buttons by default\n    },\n    theme: 'dark'\n  };\n\n  displayChatMessage(message) {\n    message.date = new Date();\n    this.messages.unshift(message);\n\n  };\n\n  seekOponent(time: string, increment: string) {\n\n    this.gameTimeFormSubmitted = true;\n\n    if(this.gameTimeFormShown && this.gameTimeFormSubmitted && this.gameTimeForm.invalid){\n      return;\n    }\n\n    var seekDetails = {\n\n      action: \"seekOponent\",\n      user: this.authenticationService.authenticatedUser,\n      time: parseInt(typeof time !== 'undefined' ? time\n        : this.gameTimeFormFields.initialtime.value),\n      increment: parseInt(typeof increment !== 'undefined' ? increment\n        : this.gameTimeFormFields.initialtimepermove.value)\n\n    };\n    this.seekOponentInterval = setInterval(() => this.socket.send(JSON.stringify(seekDetails)), 1000);\n\n    this.seekingOponent = true;\n    this.gameTimeFormSubmitted = false;\n    this.gameTimeFormShown = false;\n  };\n\n  showSeekForm = function () {\n    this.gameTimeFormShown = true;\n  };\n\n  queryPlayersOnline() {\n    console.log(\"Querying players online.\");\n    this.socket.send(JSON.stringify({ user: this.user, action: \"getPlayersOnline\" }));\n\n  }\n\n  observeGame(playername: string) {\n    this.cancelIntervals();\n    this.router.navigate(['/observeGame/' + playername])\n  };\n\n  cancelIntervals() {\n    clearInterval(this.seekOponentInterval);\n    clearInterval(this.queryPlayersInterval)\n  }\n\n  onMessage(event: any) {\n    //console.log(event);\n    var data = JSON.parse(event.data);\n    if (data.action === \"chatMessageLobby\") {\n      this.displayChatMessage(data);\n    }\n    if (data.action === \"getPlayersOnline\") {\n      console.log(data.players);\n      this.playersOnline = data.players;\n      this.countOfPlayersOnline = data.players.length;\n      this.gamesInProgress = data.gamesInProgress;\n    }\n    if (data.action === \"startGame\") {\n      console.log(data);\n      this.cancelIntervals();\n      this.router.navigate(['/playGame/' + data.gameId]);\n      console.log(\"Game started.\")\n    }\n    if (data.action === \"gameInfo\") {\n      console.log(\"Received game info:\" + data);\n    }\n  }\n \n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ2aWV3cy9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http'\nimport { Router, ActivatedRoute} from '@angular/router'\n\nimport {JwtAuthenticationService} from '../../js/services/jwtAuthenticationService'\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent implements OnInit {\n\n\tloginForm: FormGroup;\n\treturnUrl: string;\n\n  constructor(private router:Router, private route: ActivatedRoute,private http:HttpClient, private authenticationService:JwtAuthenticationService,  private formBuilder: FormBuilder) { \n\n  }\n\n  ngOnInit(): void {\n\tthis.loginForm = this.formBuilder.group({\n\t\tusername: ['', Validators.required],\n\t\tpassword: ['', Validators.required]\n\t});\n\n\tthis.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n  submitted = false;\n  loading = false;\n  \n  authenticationData={};\n\n\tredirectTo(path:string){\n\t\tthis.router.navigate([path]);\n\t};\n\n\t// convenience getter for easy access to form fields\n    get f() { return this.loginForm.controls; }\n\t  \n\t  \n\t  login() {\n\n\t\t  console.log(\"Starting the authentication.\")\n\t\t  this.submitted = true;\n\n\t\t  if (this.loginForm.invalid) {\n            return;\n        }\n\t\t  this.loading = true;\n\n\t      this.authenticationService.authenticate({username:this.f.username.value, password:this.f.password.value})\n           // .pipe(first())\n            .subscribe(\n                data => {\n                    this.router.navigate([this.returnUrl]);\n                },\n                error => {\n                   // this.alertService.error(error);\n                    this.loading = false;\n                });\n    }\n\t \n\t  \n\t\n\t\n\n}\n","import { JwtAuthenticationService } from './../../js/services/jwtAuthenticationService';\r\nimport { WebSocketService } from './../../js/services/websocketService';\r\nimport { AuthenticationService } from '../../js/services/authenticationService';\r\nimport { Component, OnInit, OnDestroy, AfterViewInit, HostListener } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { Chessboard, COLOR, MOVE_INPUT_MODE, INPUT_EVENT_TYPE } from \"../../node_modules/cm-chessboard/src/cm-chessboard/Chessboard.js\";\r\nimport { Chess } from '../../js/chessRules.js';\r\nimport * as $ from 'jquery';\r\n\r\n@Component({\r\n    selector: 'selector-name',\r\n    templateUrl: 'playingHall.html'\r\n})\r\n\r\nexport class PlayingHall implements OnInit, OnDestroy, AfterViewInit {\r\n\r\n    constructor(private $http: HttpClient, private route: ActivatedRoute,\r\n        private authenticationService: JwtAuthenticationService, private webSocketService: WebSocketService) {\r\n\r\n    }\r\n\r\n    moveToHighlight = {\r\n        variationId: null,\r\n        moveNumber: null,\r\n        whiteMove: true\r\n    }\r\n\r\n    chessboardUsageModes = {\r\n        PLAYING: \"P\",\r\n        OBSERVING: \"O\",\r\n        ANALYZING: \"A\"\r\n    }\r\n\r\n    root = this;\r\n    resignButtonPressed: boolean = false;\r\n    MAIN_LINE = -1\r\n    chessRules = require(\"../../js/chessRules.js\");\r\n    chess;\r\n    svgChessboard = null;\r\n    chessboard;\r\n    startPosition;\r\n    endPosition;\r\n    moveNumber;\r\n    socket;\r\n    user;\r\n    clockTimer;\r\n    enPassant;\r\n    element;\r\n    castling = null;\r\n    pawnPromotionMove = { from: null, to: null, promotion: null }\r\n    lastMove = { startPosition: null, endPosition: null };\r\n    positionOccurrencesMap = new Map();\r\n    observedPlayer: string;\r\n    variationId = 0;\r\n    mode: string = this.chessboardUsageModes.PLAYING;\r\n    squareSize: number = 55;\r\n    playingGame = null;\r\n    seekingOponent = null;\r\n    oponent = null;\r\n    whitePlayer = true;\r\n    time = 0;\r\n    increment = 0;\r\n    whiteMove = true;\r\n    whiteClock = \"00:00\";\r\n    blackClock = \"00:00\";\r\n    whiteTime: number;\r\n    blackTime: number;\r\n    myMove = null;\r\n    whitePlayerName = \"whitePlayer\";\r\n    whitePlayerElo = 1500;\r\n    blackPlayerName = \"blackPlayer\";\r\n    blackPlayerElo = 1500;\r\n    whitePlayerEloChange = 0;\r\n    blackPlayerEloChange = 0;\r\n    gameResult = null;\r\n    showPawnPromotionDiv = false;\r\n    seekFormShown = false;\r\n    annotatedMoves = []\r\n    scrollbarconfig = {\r\n        setHeight: 400,\r\n    };\r\n\r\n    chessboardProps = {\r\n        position: \"start\", // set as fen, \"start\" or \"empty\"\r\n        style: {\r\n            cssClass: \"default\",\r\n            showCoordinates: true, // show ranks and files\r\n            showBorder: false, // display a border around the board\r\n        },\r\n        responsive: true, // resizes the board on window resize, if true\r\n        animationDuration: 300, // pieces animation duration in milliseconds\r\n        moveInputMode: MOVE_INPUT_MODE.dragPiece,\r\n        sprite: {\r\n            url: \"./assets/images/chessboard-sprite.svg\", // pieces and markers are stored as svg in the sprite\r\n            grid: 40  // the sprite is tiled with one piece every 40px\r\n        }\r\n    }\r\n    currentVariation = null;\r\n    drawOfferReceived = false;\r\n\r\n    variations = new Map();\r\n    newGame: boolean;\r\n    gameId: string;\r\n\r\n\r\n    ngOnInit() {\r\n        this.route.params.subscribe(params => {\r\n            this.observedPlayer = params['observedPlayer'];\r\n            this.gameId = params['gameId'];\r\n        });\r\n\r\n        this.whitePlayer = true;\r\n        this.user = this.authenticationService.authenticatedUser;\r\n\r\n        this.initialiseWebSockets();\r\n        this.initialiseChessboard();\r\n        this.determineInitialModeOfUsage();\r\n        this.requestGameInfo();\r\n\r\n    };\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => {\r\n\r\n        })\r\n    }\r\n\r\n    @HostListener('document:keydown', ['$event'])\r\n    handleKeyboardEvent(event: KeyboardEvent) {   \r\n        if (this.mode === this.chessboardUsageModes.ANALYZING) {\r\n            const key = event.key;\r\n            switch (key) {\r\n                case \"Left\": // IE/Edge specific value\r\n                case \"ArrowLeft\":\r\n                    this.goToPreviousMove();\r\n                    break;\r\n                case \"Right\": // IE/Edge specific value\r\n                case \"ArrowRight\":\r\n                    this.goToNextMove();\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    setupVariation($event) {\r\n        this.redrawChessboard($event.fen, $event.variationId);\r\n    }\r\n\r\n    onActivate(componentReference) {\r\n        console.log(componentReference)\r\n        componentReference.anyFunction();\r\n        //Below will subscribe to the searchItem emitter\r\n        componentReference.searchItem.subscribe((data) => {\r\n            // Will receive the data from child here \r\n        })\r\n    }\r\n\r\n    initPage() {\r\n\r\n    };\r\n\r\n    convertSquareToCoordinates(square_SAN: string) {\r\n        if (typeof square_SAN !== 'undefined') {\r\n            const columns = 'abcdefgh';\r\n            const rowString = square_SAN.substr(1, 1);\r\n            const row = +rowString - 1;\r\n            const column = columns.indexOf(square_SAN.substr(0, 1));\r\n            const piece = this.chessboard.squares[this.findIndexOfSquare(column, row)];\r\n            return {\r\n                row,\r\n                column,\r\n                piece\r\n            }\r\n        } else return null;\r\n    };\r\n\r\n    pawnReachedPromotionSquare(startsquare: string, endsquare: string) {\r\n        const pieceOnStartSquare = this.svgChessboard.getPiece(startsquare);\r\n        const pieceOnEndSquare: string = this.svgChessboard.getPiece(endsquare);\r\n        if ((pieceOnStartSquare === \"wp\" && endsquare.indexOf(\"8\") !== -1) || (pieceOnStartSquare === \"bp\" && endsquare.indexOf(\"1\") !== -1)) {\r\n\r\n            if ((pieceOnStartSquare === \"wp\" && (pieceOnEndSquare.indexOf(\"b\") !== -1 || pieceOnEndSquare === null)) ||\r\n                (pieceOnStartSquare === \"bp\" && (pieceOnEndSquare.indexOf(\"w\") !== -1 || pieceOnEndSquare === null))) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public moveInputHandler = (event) => {\r\n\r\n        const startPosition = this.convertSquareToCoordinates(event.squareFrom);\r\n        const endPosition = this.convertSquareToCoordinates(event.squareTo);\r\n        let piece: string;\r\n\r\n        console.log(\"event\", event);\r\n\r\n        if (event.type === INPUT_EVENT_TYPE.moveStart) {\r\n            piece = this.svgChessboard.getPiece(event.square);\r\n        }\r\n\r\n        if (event.type === INPUT_EVENT_TYPE.moveDone) {\r\n            const move = { from: event.squareFrom, to: event.squareTo, promotion: null };\r\n\r\n            const validMove = this.chess.move(move);\r\n            if (validMove) {\r\n                const currentPositionAsFEN = this.chess.fen();\r\n                setTimeout(() => {\r\n                    this.processValidMove(validMove, currentPositionAsFEN, true);\r\n                });\r\n            } else {\r\n                if (this.pawnReachedPromotionSquare(event.squareFrom, event.squareTo)) {\r\n                    this.pawnPromotionMove = move;\r\n                    this.showPawnPromotionDiv = true;\r\n                }\r\n                console.warn(\"invalid move\", move)\r\n            }\r\n        } else {\r\n            return true\r\n        }\r\n    }\r\n\r\n    checkMateDelivered(moveNotation: string): boolean {\r\n        return moveNotation.indexOf(\"#\") !== -1;\r\n    }\r\n\r\n    processValidMove(validMove, currentPositionAsFEN: string, sendMoveToOponent: boolean) {\r\n\r\n        const moveNotation = validMove.san;\r\n        this.svgChessboard.setPosition(currentPositionAsFEN)\r\n        this.svgChessboard.disableMoveInput();\r\n\r\n        this.addAnnotation(moveNotation);\r\n        this.highlightLastMoveInNotation();\r\n        if (validMove.color === COLOR.white) {\r\n            if (this.mode === this.chessboardUsageModes.ANALYZING) {\r\n                this.svgChessboard.enableMoveInput(this.moveInputHandler, COLOR.black);\r\n            }\r\n        } else {\r\n            this.moveNumber = this.moveNumber + 1;\r\n            if (this.mode === this.chessboardUsageModes.ANALYZING) {\r\n                this.svgChessboard.enableMoveInput(this.moveInputHandler, COLOR.white);\r\n            }\r\n        }\r\n        if (this.mode === this.chessboardUsageModes.PLAYING) {\r\n            if (sendMoveToOponent) {\r\n                this.sendMove(currentPositionAsFEN, moveNotation);\r\n                this.pressClock(!this.whitePlayer)\r\n            }\r\n            if (this.chess.game_over()) {\r\n                const gameResult = this.getGameResult(validMove);\r\n                this.endGame(gameResult);\r\n            }\r\n\r\n        }\r\n        this.whiteMove = !this.whiteMove;\r\n    }\r\n\r\n    getGameResult(validMove) {\r\n        if (this.chess.in_stalemate()) {\r\n            return \"1/2 (stalemate)\";\r\n        } else if (this.chess.insufficient_material()) {\r\n            return \"1/2 (insufficient material)\";\r\n        } else if (this.chess.in_threefold_repetition()) {\r\n            return \"1/2 (threefold repetition)\";\r\n        } else if (this.chess.in_checkmate()) {\r\n            return validMove.color === COLOR.white ? \"1-0\" : \"0-1\";\r\n        } else {\r\n            return \"1/2 (50 move rule)\";\r\n        }\r\n    }\r\n\r\n    initialiseChessboard() {\r\n\r\n        if (!this.svgChessboard) {\r\n            this.svgChessboard = new Chessboard(document.getElementById(\"newChessboardContainer\"),\r\n                this.chessboardProps);\r\n            this.svgChessboard.enableMoveInput(this.moveInputHandler, COLOR.white);\r\n        }\r\n\r\n        this.chess = new this.chessRules();\r\n        this.chessboard = {};\r\n        this.chessboard.element = document.getElementsByName(\"chessboardTable\")[0];\r\n        this.chessboard.pieces = [];\r\n        this.chessboard.annotatedMoves = [];\r\n        this.squareSize = 0;\r\n        this.startPosition = {};\r\n        this.endPosition = {};\r\n\r\n        this.moveNumber = 0;\r\n        this.chessboard.coordinates = {};\r\n\r\n        let index = 0;\r\n        let pieceIndex = 0;\r\n        let squares = [];\r\n        let piece;\r\n        for (let x = 0; x <= 7; x++) {\r\n            for (let y = 0; y <= 7; y++) {\r\n                piece = \"\";\r\n                squares[index] = {};\r\n                squares[index].row = y;\r\n                squares[index].column = x;\r\n                if (y === 6) {\r\n                    piece = \"BP\" + x + y;\r\n                } else if (y === 1) {\r\n                    piece = \"WP\" + x + y;\r\n                } else if (y === 0) {\r\n                    if (x === 0 || x === 7) {\r\n                        piece = \"WR\" + x + y;\r\n                    } else if (x === 1 || x === 6) {\r\n                        piece = \"WN\" + x + y;\r\n                    } else if (x === 2 || x === 5) {\r\n                        piece = \"WB\" + x + y;\r\n                    } else if (x === 3) {\r\n                        piece = \"WQ\" + x + y;\r\n                    } else if (x === 4) {\r\n                        piece = \"WK\" + x + y;\r\n                    }\r\n                } else if (y === 7) {\r\n                    if (x === 0 || x === 7) {\r\n                        piece = \"BR\" + x + y;\r\n                    } else if (x === 1 || x === 6) {\r\n                        piece = \"BN\" + x + y;\r\n                    } else if (x === 2 || x === 5) {\r\n                        piece = \"BB\" + x + y;\r\n                    } else if (x === 3) {\r\n                        piece = \"BQ\" + x + y;\r\n                    } else if (x === 4) {\r\n                        piece = \"BK\" + x + y;\r\n                    }\r\n                }\r\n                if (piece !== \"\") {\r\n                    squares[index].piece = piece;\r\n                    this.chessboard.pieces[pieceIndex] = {};\r\n                    this.chessboard.pieces[pieceIndex].row = y;\r\n                    this.chessboard.pieces[pieceIndex].column = x;\r\n                    this.chessboard.pieces[pieceIndex].piece = piece;\r\n                    pieceIndex++;\r\n                } else {\r\n                    squares[index].piece = \"empty\";\r\n                }\r\n                index++;\r\n            }\r\n        }\r\n\r\n        this.chessboard.squares = squares;\r\n\r\n    };\r\n\r\n    determineInitialModeOfUsage() {\r\n        if (typeof this.observedPlayer !== 'undefined') {\r\n            this.mode = this.chessboardUsageModes.OBSERVING;\r\n        } else if (this.route.snapshot['_routerState'].url.indexOf(\"analyzeGame\") !== -1) {\r\n            this.mode = this.chessboardUsageModes.ANALYZING;\r\n        } else {\r\n            this.mode = this.chessboardUsageModes.PLAYING;\r\n        }\r\n    };\r\n\r\n\r\n    requestGameInfo() {\r\n        if (this.mode === this.chessboardUsageModes.PLAYING) {\r\n            let getGameInfoMessage = {\r\n                action: \"getGameInfo\",\r\n                user: this.user,\r\n                gameId: this.gameId,\r\n            };\r\n            console.log(\"Sending request game info message:\" + JSON.stringify(getGameInfoMessage));\r\n            this.socket.send(JSON.stringify(getGameInfoMessage));\r\n        } else if (this.mode === this.chessboardUsageModes.OBSERVING) {\r\n            this.$http.get('http://localhost:8082/observe/' + this.observedPlayer, \r\n            {headers:{'Authorization':'Bearer:'+this.authenticationService.getJwtToken}}).subscribe((game) => {\r\n                this.observeGame(game);\r\n            }, (data) => {\r\n                console.log(\"Retrieval of moves of the observed game failed:\" + data.error);\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    stopClocks() {\r\n        console.log(\"Stopping clock\");\r\n        clearTimeout(this.clockTimer);\r\n\r\n    };\r\n\r\n    ngOnDestroy() {\r\n        if (this.mode === this.chessboardUsageModes.OBSERVING) {\r\n            this.stopObservingGame();\r\n        }\r\n        this.stopClocks();\r\n    }\r\n\r\n    stopObservingGame() {\r\n        this.$http.get('//localhost:8082/observe/' + this.observedPlayer + \"/cancel\", {}).toPromise().then(() =>\r\n            console.log(\"Removing of observer successfull.\")\r\n            , (data) =>\r\n                console.log(\"Removing of observer failed:\" + data.error)\r\n        );\r\n    };\r\n\r\n\r\n\r\n    setMyMove(isItMyMove) {\r\n        this.myMove = isItMyMove;\r\n    };\r\n\r\n    getChessboardCoordinates(obj) {\r\n        let top;\r\n        top = 0;\r\n        if (obj.offsetParent) {\r\n            do {\r\n                top += obj.offsetTop;\r\n            } while (obj = obj.offsetParent);\r\n        }\r\n\r\n        this.chessboard.coordinates.left = this.chessboard.element\r\n            .getBoundingClientRect().left;\r\n        this.chessboard.coordinates.right = this.chessboard.element\r\n            .getBoundingClientRect().right;\r\n        this.chessboard.coordinates.bottom = this.chessboard.element\r\n            .getBoundingClientRect().bottom;\r\n        this.chessboard.coordinates.top = top;\r\n        // TODO squareSize =\r\n        // (chessboard.coordinates.right -\r\n        // chessboard.coordinates.left) / 8;\r\n        this.squareSize = 55;\r\n        // //console.log(\"Square size:\" + squareSize);\r\n        // //console.log(chessboard.coordinates);\r\n    };\r\n\r\n    activateAnalysisMode() {\r\n        this.mode = this.chessboardUsageModes.ANALYZING;\r\n    };\r\n\r\n    determineRowColumn(x, y,\r\n        whitePlayer) {\r\n\r\n        let coordinates = { x: 0, y: 0 };\r\n        coordinates.x = (x - this.chessboard.coordinates.left)\r\n            / this.squareSize;\r\n        coordinates.y = 8 - ((y - (this.chessboard.coordinates.top)) / this.squareSize);\r\n        let row = !whitePlayer ? 7 - Math\r\n            .floor(coordinates.y) : Math\r\n                .floor(coordinates.y);\r\n        let column = !whitePlayer ? 7 - Math\r\n            .floor(coordinates.x) : Math\r\n                .floor(coordinates.x);\r\n\r\n        return {\r\n            row: row,\r\n            column: column,\r\n            piece: this.chessboard.squares[this.findIndexOfSquare(\r\n                column, row)].piece\r\n        };\r\n\r\n    };\r\n\r\n\r\n    getInitialPositionOfPiece(piece) {\r\n        let coordinates = { row: null, column: null, piece: null, index: null };\r\n        for (let index = 0; index < this.chessboard.pieces.length; index++) {\r\n            if (this.chessboard.pieces[index].piece === piece) {\r\n                coordinates.row = this.chessboard.pieces[index].row;\r\n                coordinates.column = this.chessboard.pieces[index].column;\r\n                coordinates.piece = piece;\r\n                coordinates.index = index;\r\n                return coordinates;\r\n            }\r\n        }\r\n    };\r\n\r\n    goToNextMove() {\r\n        let move;\r\n        if (!this.currentVariation) {\r\n            move = this.chessboard.annotatedMoves[this.moveNumber];\r\n            if (!this.whiteMove && move.blackMove !== \"\") {\r\n                this.redrawChessboard(move.chessboardAfterBlackMove, this.MAIN_LINE);\r\n            } else if (this.whiteMove && this.chessboard.annotatedMoves.length > this.moveNumber) {\r\n                this.redrawChessboard(move.chessboardAfterWhiteMove, this.MAIN_LINE);\r\n            }\r\n        } else {\r\n            move = this.currentVariation.moves[this.moveNumber - this.currentVariation.moveNumber];\r\n            let variationId = this.currentVariation.variationId;\r\n            if (!this.whiteMove && move.blackMove !== \"\") {\r\n                this.redrawChessboard(move.chessboardAfterBlackMove, variationId);\r\n            } else if (this.whiteMove && this.chessboard.annotatedMoves.length > this.moveNumber) {\r\n                this.redrawChessboard(move.chessboardAfterWhiteMove, variationId);\r\n            }\r\n        }\r\n    }\r\n\r\n    goToPreviousMove() {\r\n        let move;\r\n        if (!this.currentVariation) {\r\n            move = this.chessboard.annotatedMoves[this.moveNumber - 1];\r\n            if (!this.whiteMove && this.moveNumber - 1 >= 0) {\r\n                this.redrawChessboard(move.chessboardAfterBlackMove, this.MAIN_LINE);\r\n            } else if (this.whiteMove) {\r\n                this.redrawChessboard(move.chessboardAfterWhiteMove, this.MAIN_LINE);\r\n            }\r\n        } else {\r\n            move = this.currentVariation.moves[this.moveNumber - this.currentVariation.this.moveNumber];\r\n            let variationId = this.currentVariation.variationId;\r\n            if (!this.whiteMove && this.moveNumber - 1 >= 0) {\r\n                this.redrawChessboard(move.chessboardAfterBlackMove, variationId);\r\n            } else if (this.whiteMove) {\r\n                this.redrawChessboard(move.chessboardAfterWhiteMove, variationId);\r\n            }\r\n        }\r\n    }\r\n\r\n    goToFirstMove() {\r\n        let move = this.chessboard.annotatedMoves[0];\r\n        this.redrawChessboard(move.chessboardAfterWhiteMove, this.MAIN_LINE);\r\n    }\r\n\r\n    goToLastMove() {\r\n        let lastMoveNumber = this.chessboard.annotatedMoves.length - 1;\r\n        let move = this.chessboard.annotatedMoves[lastMoveNumber];\r\n        if (move.blackMove !== \"\") {\r\n            this.redrawChessboard(move.chessboardAfterWhiteMove, this.MAIN_LINE);\r\n        } else {\r\n            this.redrawChessboard(move.chessboardAfterWhiteMove, this.MAIN_LINE);\r\n        }\r\n    }\r\n\r\n    isRookMoveLegal(startPosition, endPosition, kingInCheck) {\r\n        let isLegal = true;\r\n        if (endPosition.row === startPosition.row) {\r\n            for (let x = 1; x < Math\r\n                .abs(endPosition.column\r\n                    - startPosition.column); x++) {\r\n                let square = this.findSquare(endPosition.column > startPosition.column ? startPosition.column\r\n                    + x\r\n                    : startPosition.column\r\n                    - x, startPosition.row);\r\n                if ((!kingInCheck && !this.isSquareEmpty(square)) ||\r\n                    (kingInCheck && !this.isSquareEmpty(square) && !this.isPieceOnSquare(square, \"K\"))) {\r\n                    isLegal = false;\r\n                }\r\n            }\r\n\r\n        } else if (endPosition.column === startPosition.column) {\r\n            for (let x = 1; x < Math\r\n                .abs(endPosition.row\r\n                    - startPosition.row); x++) {\r\n                let square = this.findSquare(startPosition.column,\r\n                    endPosition.row > startPosition.row ? startPosition.row\r\n                        + x\r\n                        : startPosition.row - x);\r\n                if ((!kingInCheck && !this.isSquareEmpty(square)) ||\r\n                    (kingInCheck && !this.isSquareEmpty(square) && !this.isPieceOnSquare(square, \"K\"))) {\r\n                    isLegal = false;\r\n                }\r\n            }\r\n        } else {\r\n            isLegal = false;\r\n        }\r\n        // console.log(\"Rook move legal:\" + isLegal);\r\n        return isLegal;\r\n    }\r\n\r\n    isPawnMoveLegal(startPosition,\r\n        endPosition, whitePlayer, kingInCheck) {\r\n        if (Math.abs(startPosition.row\r\n            - endPosition.row) > 2\r\n            || Math.abs(startPosition.column\r\n                - endPosition.column) > 1) {\r\n            return false;\r\n        } else if ((this.whiteMove === true && endPosition.row < startPosition.row) || (this.whiteMove === false && endPosition.row > startPosition.row)) {\r\n            return false;\r\n        } else if (Math\r\n            .abs(!whitePlayer ? startPosition.row\r\n                - endPosition.row\r\n                : endPosition.row\r\n                - startPosition.row) === 1\r\n            && Math.abs(startPosition.column\r\n                - endPosition.column) === 1\r\n            && (endPosition.piece !== \"empty\" || (kingInCheck))) {\r\n            return true;\r\n        } else if (Math\r\n            .abs(!whitePlayer ? startPosition.row\r\n                - endPosition.row\r\n                : endPosition.row\r\n                - startPosition.row) === 1\r\n            && startPosition.column\r\n            - endPosition.column === 0 && (endPosition.piece === \"empty\")) {\r\n            return true;\r\n        } else if (Math\r\n            .abs(!whitePlayer ? startPosition.row\r\n                - endPosition.row\r\n                : endPosition.row\r\n                - startPosition.row) === 2\r\n            && startPosition.column\r\n            - endPosition.column === 0) {\r\n            let initialPositionOfPiece = this.\r\n                getInitialPositionOfPiece(startPosition.piece);\r\n            return startPosition.row === initialPositionOfPiece.row\r\n                && startPosition.column === initialPositionOfPiece.column;\r\n        } else if (!whitePlayer ? startPosition.row\r\n            - endPosition.row : endPosition.row\r\n            - startPosition.row === 1\r\n            && Math.abs(endPosition.column\r\n                - startPosition.column) === 1) {\r\n            return this.pieceTakenEnPassant(startPosition,\r\n                endPosition, whitePlayer);\r\n\r\n        }\r\n    }\r\n\r\n    pieceTakenEnPassant(startPosition,\r\n        endPosition, whitePlayer) {\r\n        // console.log(\"En passant  called.\");\r\n        console\r\n            .log(startPosition.piece.indexOf(\"P\") !== -1);\r\n        let squaresMovedForward;\r\n        if (this.myMove === true) {\r\n            squaresMovedForward = !whitePlayer ? startPosition.row\r\n                - endPosition.row\r\n                : endPosition.row\r\n                - startPosition.row;\r\n        } else {\r\n            squaresMovedForward = Math\r\n                .abs(startPosition.row\r\n                    - endPosition.row);\r\n        }\r\n        if (startPosition.piece.indexOf(\"P\") !== -1\r\n            && squaresMovedForward === 1\r\n            && Math.abs(endPosition.column\r\n                - startPosition.column) === 1) {\r\n            // console.log(lastMove);\r\n            if (this.lastMove.endPosition.piece\r\n                .indexOf(\"P\") !== -1\r\n                && Math\r\n                    .abs(this.lastMove.startPosition.row\r\n                        - this.lastMove.endPosition.row) === 2\r\n                && this.lastMove.endPosition.column === endPosition.column) {\r\n                // console.log(\"En passant.\");\r\n                this.enPassant = true;\r\n                return true;\r\n            } else\r\n                return false;\r\n\r\n        }\r\n    }\r\n\r\n    canRookMateBePrevented(chessboard,\r\n        kingPosition, checkingPiecePosition,\r\n        whiteMove) {\r\n        let matePreventionPossible = false;\r\n        if (kingPosition.row === checkingPiecePosition.row) {\r\n            for (let x = 1; x < Math\r\n                .abs(kingPosition.column\r\n                    - checkingPiecePosition.column); x++) {\r\n\r\n                if (this.canAnyOponentsPieceMoveToSquare(\r\n                    chessboard,\r\n                    kingPosition.row,\r\n                    kingPosition.column > checkingPiecePosition.column ? checkingPiecePosition.column\r\n                        + x\r\n                        : checkingPiecePosition.column\r\n                        - x, whiteMove, null, null) === true) {\r\n\r\n                    matePreventionPossible = true;\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        } else if (kingPosition.column === checkingPiecePosition.column) {\r\n            for (let x = 1; x < Math\r\n                .abs(kingPosition.row\r\n                    - checkingPiecePosition.row); x++) {\r\n\r\n                if (this.canAnyOponentsPieceMoveToSquare(\r\n                    chessboard,\r\n                    kingPosition.row > checkingPiecePosition.row ? checkingPiecePosition.row\r\n                        + x\r\n                        : checkingPiecePosition.row\r\n                        - x,\r\n                    kingPosition.column, whiteMove, null, null) === true) {\r\n\r\n                    matePreventionPossible = true;\r\n                    break;\r\n                }\r\n\r\n            }\r\n        }\r\n        return matePreventionPossible;\r\n\r\n    }\r\n\r\n    canBishopMateBePrevented(chessboard,\r\n        kingPosition, checkingPiecePosition,\r\n        whiteMove) {\r\n        console.log(\"Can bishop mate be prevented?\");\r\n        let matePreventionPossible = false;\r\n        if (kingPosition.row > checkingPiecePosition.row\r\n            && kingPosition.column > checkingPiecePosition.column) {\r\n            for (let x = 1; x < kingPosition.row\r\n                - checkingPiecePosition.row; x++) {\r\n                if (this.canAnyOponentsPieceMoveToSquare(\r\n                    chessboard,\r\n                    checkingPiecePosition.row + x,\r\n                    checkingPiecePosition.column\r\n                    + x, whiteMove, null, null) === true) {\r\n                    console.log(\"Yes - option 1\");\r\n                    matePreventionPossible = true;\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        } else if (kingPosition.row > checkingPiecePosition.row\r\n            && kingPosition.column < checkingPiecePosition.column) {\r\n            for (let x = 1; x < this.endPosition.row\r\n                - checkingPiecePosition.row; x++) {\r\n                if (this.canAnyOponentsPieceMoveToSquare(\r\n                    chessboard, kingPosition.row\r\n                - x,\r\n                    kingPosition.column + x,\r\n                    whiteMove, null, null) === true) {\r\n                    console.log(\"Yes - option 2\");\r\n                    matePreventionPossible = true;\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        } else if (kingPosition.row < checkingPiecePosition.row\r\n            && kingPosition.column > checkingPiecePosition.column) {\r\n            for (let x = 1; x < this.startPosition.row\r\n                - this.endPosition.row; x++) {\r\n                if (this.canAnyOponentsPieceMoveToSquare(\r\n                    chessboard, kingPosition.row\r\n                + x,\r\n                    kingPosition.column - x,\r\n                    whiteMove, null, null) === true) {\r\n                    console.log(\"Yes - option 3\");\r\n                    matePreventionPossible = true;\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        } else if (kingPosition.row < checkingPiecePosition.row\r\n            && kingPosition.column < checkingPiecePosition.column) {\r\n            for (let x = 1; x < checkingPiecePosition.row\r\n                - this.endPosition.row; x++) {\r\n                if (this.canAnyOponentsPieceMoveToSquare(\r\n                    chessboard, kingPosition.row\r\n                + x,\r\n                    kingPosition.column + x,\r\n                    whiteMove, null, null) === true) {\r\n                    console.log(\"Yes - option 4\");\r\n                    matePreventionPossible = true;\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        return matePreventionPossible;\r\n    }\r\n\r\n    canMateBePrevented(chessboard,\r\n        kingPosition, checkingPiecePosition,\r\n        whiteMove) {\r\n        let matePreventionPossible = false;\r\n\r\n        if (this.canAnyOponentsPieceMoveToSquare(\r\n            chessboard,\r\n            checkingPiecePosition.row,\r\n            checkingPiecePosition.column,\r\n            whiteMove, true)) {\r\n\r\n            matePreventionPossible = true;\r\n        } else {\r\n\r\n            switch (checkingPiecePosition.piece\r\n                .substr(1, 1)) {\r\n                /*\tcase \"P\":\r\n                        if (this.canAnyOponentsPieceMoveToSquare(\r\n                                chessboard,\r\n                                checkingPiecePosition.row,\r\n                                checkingPiecePosition.column,\r\n                                whiteMove)) {\r\n\r\n                            matePreventionPossible = true;\r\n                        }\r\n                        break;\r\n\r\n                    case \"N\":\r\n                        if (this.canAnyOponentsPieceMoveToSquare(\r\n                                chessboard,\r\n                                checkingPiecePosition.row,\r\n                                checkingPiecePosition.column,\r\n                                whiteMove)) {\r\n\r\n                            matePreventionPossible = true;\r\n                        }\r\n                        break;*/\r\n\r\n                case \"B\":\r\n                    matePreventionPossible = this.canBishopMateBePrevented(\r\n                        chessboard, kingPosition,\r\n                        checkingPiecePosition, whiteMove);\r\n                    break;\r\n\r\n                case \"R\":\r\n                    matePreventionPossible = this.canRookMateBePrevented(\r\n                        chessboard, kingPosition,\r\n                        checkingPiecePosition, whiteMove);\r\n                    break;\r\n\r\n                case \"Q\":\r\n                    if (this.canBishopMateBePrevented(chessboard,\r\n                        kingPosition,\r\n                        checkingPiecePosition, whiteMove) === true\r\n                        || this.canRookMateBePrevented(\r\n                            chessboard, kingPosition,\r\n                            checkingPiecePosition,\r\n                            whiteMove) === true) {\r\n                        matePreventionPossible = true;\r\n                    }\r\n                    break;\r\n\r\n            }\r\n        }\r\n        return matePreventionPossible;\r\n    }\r\n\r\n    isKingMoveLegal(startPosition,\r\n        endPosition, whitePlayer, isKingInCheck) {\r\n        if (Math.abs(endPosition.row\r\n            - startPosition.row) <= 1\r\n            && Math.abs(endPosition.column\r\n                - startPosition.column) <= 1\r\n        ) {\r\n            if (startPosition.piece.indexOf('W') !== -1 ? this.isWhitePieceOnSquare(endPosition) : this.isBlackPieceOnSquare(endPosition)) {\r\n                //same coloured piece as the king is on the target square, king move is illegal\r\n                return false;\r\n            } else {\r\n                return !this.canAnyOponentsPieceMoveToSquare(this.chessboard, endPosition.row, endPosition.column, startPosition.piece.indexOf('W') !== -1, true, isKingInCheck);\r\n            }\r\n\r\n\r\n        } else if (endPosition.row === startPosition.row\r\n            && Math.abs(endPosition.column\r\n                - startPosition.column) === 2\r\n            && endPosition.column === 6) {\r\n            if (whitePlayer === true\r\n                && this.isSquareEmpty(this.findSquare(5, 0))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 0, 5,\r\n                    this.whiteMove, null, null)\r\n                && this.isSquareEmpty(this.findSquare(6, 0))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 0, 6,\r\n                    this.whiteMove, null, null) && this.hasKingAlreadyMoved(\"white\") === false) {\r\n                console.log(\"White Short castle\");\r\n                this.castling = \"0-0\";\r\n                return true;\r\n            }\r\n\r\n            if (whitePlayer === false\r\n                && endPosition.column === 6\r\n                && this.isSquareEmpty(this.findSquare(5, 7))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 7, 5,\r\n                    this.whiteMove, null, null)\r\n                && this.isSquareEmpty(this.findSquare(6, 7))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 7, 6,\r\n                    this.whiteMove, null) && this.hasKingAlreadyMoved(\"black\") === false) {\r\n                console.log(\"Black Short castle\");\r\n                this.castling = \"0-0\";\r\n                return true;\r\n            }\r\n\r\n\r\n        } else if (endPosition.row === startPosition.row\r\n            && Math.abs(endPosition.column\r\n                - startPosition.column) === 2\r\n            && (endPosition.column === 2)) {\r\n            if (whitePlayer === true\r\n                && this.isSquareEmpty(this.findSquare(2, 0))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 0, 2,\r\n                    this.whiteMove, true)\r\n                && this.isSquareEmpty(this.findSquare(3, 0))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 0, 3,\r\n                    this.whiteMove, true) && this.hasKingAlreadyMoved(\"white\") === false) {\r\n                console.log(\"White Long castle\");\r\n                this.castling = \"0-0-0\";\r\n                return true;\r\n            }\r\n\r\n            if (whitePlayer === false\r\n                && this.isSquareEmpty(this.findSquare(2, 7))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 7, 2,\r\n                    this.whiteMove, true)\r\n                && this.isSquareEmpty(this.findSquare(3, 7))\r\n                && !this.canAnyOponentsPieceMoveToSquare(\r\n                    this.chessboard, 7, 3,\r\n                    this.whiteMove, true) && this.hasKingAlreadyMoved(\"black\") === false) {\r\n\r\n                console.log(\"Black Long castle\");\r\n                this.castling = \"0-0-0\";\r\n                return true;\r\n            }\r\n        } else {\r\n            console.log(\"King else condition.\");\r\n            console.log(startPosition);\r\n            console.log(endPosition);\r\n            console.log(whitePlayer);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    isBishopMoveLegal(startPosition,\r\n        endPosition, kingInCheck) {\r\n        let isLegal = true;\r\n        if (Math.abs(endPosition.row\r\n            - startPosition.row) === Math\r\n                .abs(endPosition.column\r\n                    - startPosition.column)\r\n\r\n        ) {\r\n            if ((endPosition.row > startPosition.row\r\n                && endPosition.column > startPosition.column) ||\r\n                (endPosition.row < startPosition.row\r\n                    && endPosition.column < startPosition.column)) {\r\n                for (let x = 1; x < endPosition.row\r\n                    - startPosition.row; x++) {\r\n                    let square = this.findSquare(startPosition.column + x,\r\n                        startPosition.row + x);\r\n                    if ((!kingInCheck && !this.isSquareEmpty(square)) ||\r\n                        (kingInCheck && !this.isSquareEmpty(square) && !this.isPieceOnSquare(square, \"K\"))) {\r\n                        // console.log(\"Case1\");\r\n                        isLegal = false;\r\n                        break;\r\n                    }\r\n\r\n\r\n                }\r\n\r\n            } else if (endPosition.row > startPosition.row\r\n                && endPosition.column < startPosition.column) {\r\n                for (let x = 1; x < endPosition.row\r\n                    - startPosition.row; x++) {\r\n                    let square = this.findSquare(\r\n                        endPosition.column + x,\r\n                        endPosition.row - x);\r\n\r\n                    if ((!kingInCheck && !this.isSquareEmpty(square)) ||\r\n                        (kingInCheck && !this.isSquareEmpty(square) && !this.isPieceOnSquare(square, \"K\"))) {\r\n\r\n                        console\r\n                            .log(square.piece);\r\n\r\n                        isLegal = false;\r\n                        break;\r\n                    }\r\n\r\n                }\r\n\r\n            } else if (endPosition.row < startPosition.row\r\n                && endPosition.column > startPosition.column) {\r\n                for (let x = 1; x < startPosition.row\r\n                    - endPosition.row; x++) {\r\n                    let square = this.findSquare(\r\n                        endPosition.column - x,\r\n                        endPosition.row + x);\r\n                    if ((!kingInCheck && !this.isSquareEmpty(square)) ||\r\n                        (kingInCheck && !this.isSquareEmpty(square) && !this.isPieceOnSquare(square, \"K\"))) {\r\n                        // console.log(\"Case3\");\r\n                        isLegal = false;\r\n                        break;\r\n                    }\r\n\r\n\r\n                }\r\n\r\n            }\r\n\r\n            /*     else if (endPosition.row < startPosition.row\r\n                     && endPosition.column < startPosition.column) {\r\n                     for (let x = 1; x < startPosition.row\r\n                     - endPosition.row; x++) {\r\n                         let square = this.findSquare(\r\n                             endPosition.column + x,\r\n                             endPosition.row + x)\r\n                         if ((!kingInCheck && !this.isSquareEmpty(square)) ||\r\n                             (kingInCheck && !this.isSquareEmpty(square) && !isPieceOnSquare(square, \"K\"))) {\r\n\r\n                             // console.log(\"Case4\");\r\n                             isLegal = false;\r\n                             break;\r\n                         }\r\n\r\n\r\n                     }\r\n\r\n                 }*/\r\n\r\n        } else {\r\n            // console.log(\"Case 5\");\r\n            isLegal = false;\r\n        }\r\n        // console.log(\"Bishop move legal:\" + isLegal);\r\n        return isLegal;\r\n    }\r\n\r\n\r\n    checkLegalityOfMove(\r\n        startPosition, endPosition, whitePlayer, isKingInCheck) {\r\n\r\n        if (typeof endPosition === 'undefined' || startPosition.piece === \"empty\" ||\r\n            (endPosition.row === startPosition.row && endPosition.column === startPosition.column) ||\r\n            (this.isWhitePieceOnSquare(startPosition) && this.isWhitePieceOnSquare(endPosition)) ||\r\n            (this.isBlackPieceOnSquare(startPosition) && this.isBlackPieceOnSquare(endPosition))\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        switch (startPosition.piece.substr(1, 1)) {\r\n            case \"N\":\r\n\r\n                if (((Math.abs(startPosition.row\r\n                    - endPosition.row) === 2 && Math\r\n                        .abs(startPosition.column\r\n                            - endPosition.column) === 1) || (Math\r\n                                .abs(startPosition.row\r\n                                    - endPosition.row) === 1 && Math\r\n                                        .abs(startPosition.column\r\n                                            - endPosition.column) === 2))\r\n                    && ((this.whiteMove ? this.isBlackPieceOnSquare(endPosition) : this.isWhitePieceOnSquare(endPosition))\r\n                        || this.isSquareEmpty(endPosition) || isKingInCheck)) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n\r\n            case \"P\":\r\n                return this.isPawnMoveLegal(startPosition,\r\n                    endPosition, whitePlayer, isKingInCheck);\r\n            case \"K\":\r\n\r\n                return this.isKingMoveLegal(startPosition,\r\n                    endPosition, this.mode === this.chessboardUsageModes.ANALYZING ? this.whiteMove : whitePlayer, null);\r\n            case \"B\":\r\n                return this.isBishopMoveLegal(startPosition,\r\n                    endPosition, isKingInCheck);\r\n            case \"R\":\r\n                return this.isRookMoveLegal(startPosition,\r\n                    endPosition, isKingInCheck);\r\n            case \"Q\":\r\n                return this.isBishopMoveLegal(startPosition,\r\n                    endPosition, isKingInCheck)\r\n                    || this.isRookMoveLegal(startPosition,\r\n                        endPosition, isKingInCheck);\r\n            default:\r\n                return true;\r\n        }\r\n\r\n    };\r\n\r\n    isSquareEmpty(square) {\r\n        return square.piece === \"empty\";\r\n    }\r\n\r\n    isBlackPieceOnSquare(square) {\r\n        return square.piece.indexOf(\"W\") === -1 && !this.isSquareEmpty(square);\r\n    }\r\n\r\n    isWhitePieceOnSquare(square) {\r\n        return square.piece.indexOf(\"W\") !== -1 && !this.isSquareEmpty(square);\r\n    }\r\n\r\n    isPieceOnSquare(square, piece) {\r\n        return square.piece.indexOf(piece) !== -1;\r\n    }\r\n\r\n    canAnyOponentsPieceMoveToSquare(\r\n        chessboard, row, column, whiteMove, ignoreKings, isKingInCheck = false) {\r\n        let pieceFound = false;\r\n        let targetSquare = this.findSquare(column, row);\r\n        let colour = whiteMove ? \"black\" : \"white\";\r\n        console.log(\"Can any \" + colour + \" piece move to square \" + this.getSquareAsString(targetSquare) + \"?\");\r\n\r\n        for (let i = 0; i < chessboard.squares.length; i++) {\r\n            let initialSquare = chessboard.squares[i];\r\n            if (ignoreKings === true && initialSquare.piece.indexOf('K') !== -1) {\r\n                continue;\r\n            }\r\n            if (!this.isSquareEmpty(initialSquare)) {\r\n                if ((whiteMove === true && this.isBlackPieceOnSquare(\r\n                    initialSquare))\r\n                    || (whiteMove === false && this.isWhitePieceOnSquare(\r\n                        initialSquare))) {\r\n\r\n\r\n                    if (this\r\n                        .checkLegalityOfMove(\r\n                            initialSquare,\r\n                            targetSquare,\r\n                            this.whitePlayer, isKingInCheck) === true) {\r\n\r\n                        console\r\n                            .log(\"Following piece can move to target square \" + this.getSquareAsString(targetSquare) + \": \"\r\n                                + initialSquare.piece\r\n                                + \".\");\r\n                        pieceFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return pieceFound;\r\n\r\n    }\r\n\r\n    isKingMated(chessboard, kingPosition,\r\n        checkingPiecePosition) {\r\n\r\n        let x = [1, 1, 1, -1, -1, -1, 0, 0];\r\n        let y = [0, 1, -1, 0, 1, -1, 1, -1];\r\n        let numberOfLegalSquareForKingMove = 8;\r\n\r\n        for (let i = 0; i < x.length; i++) {\r\n\r\n            let targetSquareIndex = this.findIndexOfSquare(\r\n                kingPosition.column + x[i],\r\n                kingPosition.row + y[i]);\r\n            let targetSquare = chessboard.squares[targetSquareIndex];\r\n            if (typeof targetSquare !== 'undefined' && this.isKingMoveLegal(kingPosition, targetSquare, this.whitePlayer, true) === false) {\r\n                console.log(\"Retracting square:\"\r\n                    + this.getSquareAsString(targetSquare));\r\n                numberOfLegalSquareForKingMove--;\r\n            } else if (typeof targetSquare === 'undefined') {\r\n                console.log(\"Retracting invalid square:\"\r\n                    + (kingPosition.column + x[i]) + \" \" + (kingPosition.row + y[i]));\r\n                numberOfLegalSquareForKingMove--;\r\n            } else {\r\n                console\r\n                    .log(\"Valid square for king move:\"\r\n                        + this.getSquareAsString(targetSquare));\r\n            }\r\n\r\n        }\r\n        if (numberOfLegalSquareForKingMove > 0) {\r\n            // console.log(\"King not mated:\"\r\n            // + numberOfLegalSquareForKingMove);\r\n            return false;\r\n        } else {\r\n            console.log(\"King has no squares.\");\r\n            if (this.canMateBePrevented(chessboard,\r\n                kingPosition,\r\n                checkingPiecePosition, this.whiteMove) === true) {\r\n                console.log(\"Mate can be prevented.\");\r\n                return false;\r\n            }\r\n            // console.log(\"King is mated.\");\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    isKingInCheckOrAndMate(chessboard,\r\n        whiteMove, startPosition, endPosition) {\r\n        let kingPosition = { row: null, column: null, piece: null };\r\n        let kingInCheckOrAndMate = { check: false, mate: false };\r\n\r\n        chessboard.squares\r\n            .forEach((square) => {\r\n                if (endPosition.piece.indexOf(\"W\") !== -1 ? square.piece\r\n                    .indexOf(\"BK\") !== -1\r\n                    : square.piece\r\n                        .indexOf(\"WK\") !== -1) {\r\n                    kingPosition.row = square.row;\r\n                    kingPosition.column = square.column;\r\n                    kingPosition.piece = square.piece;\r\n                }\r\n\r\n            });\r\n\r\n        if (this.checkLegalityOfMove(\r\n            endPosition,\r\n            kingPosition,\r\n            whiteMove, false) === true) {\r\n            console.log(\"Checking piece \" + endPosition.piece);\r\n            kingInCheckOrAndMate.check = true;\r\n            kingInCheckOrAndMate.mate = this.isKingMated(\r\n                chessboard,\r\n                kingPosition,\r\n                endPosition);\r\n        } else {\r\n            chessboard.squares\r\n                .forEach((square) => {\r\n                    if (whiteMove === false ? this.isBlackPieceOnSquare(square)\r\n                        : this.isWhitePieceOnSquare(square)) {\r\n                        if (this.checkLegalityOfMove(\r\n                            square,\r\n                            kingPosition,\r\n                            whiteMove, false) === true) {\r\n                            console.log(\"Checking piece \" + square.piece);\r\n                            kingInCheckOrAndMate.check = true;\r\n                            kingInCheckOrAndMate.mate = this.isKingMated(\r\n                                chessboard,\r\n                                kingPosition,\r\n                                endPosition);\r\n                        }\r\n                    }\r\n\r\n\r\n                });\r\n        }\r\n        return kingInCheckOrAndMate;\r\n\r\n    }\r\n\r\n    /*   highlightLastMoveInNotation(whiteMoveToHighlight:boolean, moveNumber:number, variationId:number){\r\n          let elementId:string;\r\n  \r\n          if (whiteMoveToHighlight) {\r\n              if (variationId === this.MAIN_LINE) {\r\n                  elementId = \"annotatedMoveWhite\" + moveNumber;\r\n              } else {\r\n                  elementId = 'moveOfVariationNo' + variationId + \"White\" + moveNumber;\r\n              }\r\n          } else {\r\n              //decreasing as in the FEN after black move the moveNumber is increased\r\n              moveNumber = moveNumber - 1;\r\n              if (variationId === this.MAIN_LINE) {\r\n                  elementId = \"annotatedMoveBlack\" + moveNumber;\r\n              } else {\r\n                  elementId = 'moveOfVariationNo' + variationId + \"Black\" + moveNumber;\r\n              }\r\n          }\r\n  \r\n           $('td[id ^= \"annotatedMove\"]').css('font-weight', 'normal');\r\n          $('a[id ^= \"moveOfVariation\"]').css('font-weight', 'normal');\r\n          $(\"#\" + elementId).css('font-weight', 'bold'); \r\n  \r\n      } */\r\n\r\n\r\n    redrawChessboard(fen: string, variationId: number) {\r\n        //redrawChessboard  (currentSquares, elementId, whiteMove, moveNo, variationId, redrawPreviousMove) {\r\n\r\n        const fenParts: string[] = fen.split(\" \");\r\n        let lastMoveNumber: number = parseInt(fenParts[5]);\r\n        const whiteMoveToRedraw = fenParts[1] === COLOR.black ? true : false;\r\n        let elementId: string;\r\n\r\n        if (variationId === this.MAIN_LINE) {\r\n            this.currentVariation = null;\r\n        } else {\r\n            this.currentVariation = this.variations.get(variationId);;\r\n        }\r\n\r\n        this.whiteMove = whiteMoveToRedraw;\r\n        this.moveNumber = whiteMoveToRedraw ? lastMoveNumber - 1 : lastMoveNumber - 2;\r\n\r\n        this.highlightLastMoveInNotation();\r\n\r\n        this.whiteMove = !this.whiteMove;\r\n        if (!whiteMoveToRedraw) {\r\n            this.moveNumber = this.moveNumber + 1;\r\n        }\r\n\r\n        this.chess.load(fen);\r\n        this.svgChessboard.setPosition(fen);\r\n\r\n        if (this.mode === this.chessboardUsageModes.ANALYZING) {\r\n            const color = this.whiteMove ? COLOR.white : COLOR.black;\r\n            this.svgChessboard.enableMoveInput(this.moveInputHandler, color);\r\n            this.chessboard.squares = JSON.parse(JSON.stringify(fen));\r\n        }\r\n\r\n    };\r\n\r\n    drawLastMove(startPosition,\r\n        endPosition) {\r\n        console.log(\"Drawing move\");\r\n        console.log(startPosition, endPosition);\r\n        let chessboardsize = document.getElementById(\"chessboardOverlay\").offsetWidth;\r\n        let squaresize = Math.floor(chessboardsize / 8);\r\n\r\n        this.createLine(\r\n            this.whitePlayer ?\r\n                (startPosition.column + 1) * squaresize - squaresize / 2 :\r\n                (8 - startPosition.column) * squaresize - squaresize / 2,\r\n            this.whitePlayer ?\r\n                (8 - startPosition.row) * squaresize - squaresize / 2 :\r\n                (startPosition.row) * squaresize + squaresize / 2,\r\n            this.whitePlayer ?\r\n                (endPosition.column + 1) * squaresize - squaresize / 2 :\r\n                (8 - endPosition.column) * squaresize - squaresize / 2,\r\n            this.whitePlayer ?\r\n                (8 - endPosition.row) * squaresize - (!this.whiteMove ? 0.5 * squaresize : squaresize / 2) :\r\n                (endPosition.row) * squaresize + (!this.whiteMove ? 0.5 * squaresize : squaresize / 2)\r\n        );\r\n\r\n        this.eraseAllHighlightedSquares();\r\n        this.highlightSquare(startPosition, squaresize, squaresize);\r\n        this.highlightSquare(endPosition, squaresize, squaresize);\r\n\r\n    };\r\n\r\n    eraseAllHighlightedSquares() {\r\n        $(\".rect\").remove();\r\n    }\r\n\r\n    highlightSquare(square, width, height) {\r\n        let y = this.whitePlayer ? (7 - square.row) * width : (square.row) * width;\r\n        let x = this.whitePlayer ? (square.column) * width : (7 - square.column) * width;\r\n        let svgNS = \"http://www.w3.org/2000/svg\";\r\n        let rectangular = document.createElementNS(svgNS, \"rect\");\r\n        rectangular.setAttributeNS(null, 'class', 'rect');\r\n        rectangular.setAttributeNS(null, 'x', x.toString());\r\n        rectangular.setAttributeNS(null, 'y', y.toString());\r\n        rectangular.setAttributeNS(null, 'width', width.toString());\r\n        rectangular.setAttributeNS(null, 'height', height.toString());\r\n        rectangular.setAttributeNS(null, 'style', 'fill:none;stroke:yellow;stroke-width:2');\r\n\r\n        document.getElementById(\"svgId\").appendChild(rectangular);\r\n\r\n        return rectangular\r\n\r\n    }\r\n\r\n    createLineElement(x1, y1, x2, y2) {\r\n        let svgNS = \"http://www.w3.org/2000/svg\";\r\n        let line = document.createElementNS(svgNS, \"path\");\r\n        line.setAttributeNS(null, \"id\", \"arrow\");\r\n        line.setAttributeNS(null, \"stroke-width\", '4');\r\n        line.setAttributeNS(null, \"marker-end\", \"url(#head)\");\r\n        line.setAttributeNS(null, \"fill\", \"none\");\r\n        line.setAttributeNS(null, \"stroke\", \"blue\");\r\n\r\n        line.setAttributeNS(null, \"opacity\", \"0.2\");\r\n        line.setAttributeNS(null, \"d\", 'M' + Math.floor(x1) + \" \" + Math.floor(y1) + \" \" + Math.floor(x2) + \" \" + Math.floor(y2));\r\n\r\n        return line;\r\n    }\r\n\r\n    createLine(x1, y1, x2, y2) {\r\n        $(\"#arrow\").remove();\r\n\r\n        let line = this.createLineElement(x1, y1, x2, y2);\r\n        document.getElementById(\"svgId\").appendChild(line);\r\n\r\n\r\n    }\r\n\r\n    movePieceToCoordinates(piece, row, column) {\r\n\r\n        let top = ((((this\r\n            .getInitialPositionOfPiece(piece).row) - row) * this.squareSize) + (0.13 * this.squareSize));\r\n        let left = (((column - (this\r\n            .getInitialPositionOfPiece(piece)).column) * this.squareSize) + (0.13 * this.squareSize));\r\n\r\n        $(\"#\" + piece).css({\r\n\r\n            top: this.whitePlayer ? top + 'px' : (top\r\n                * (-1) + (0.26 * this.squareSize))\r\n                + 'px',\r\n            left: this.whitePlayer ? left + 'px' : (left\r\n                * (-1) + (0.26 * this.squareSize))\r\n                + 'px',\r\n\r\n        });\r\n\r\n    };\r\n\r\n    movePieceOnBoard(element, startPosition,\r\n        endPosition, whitePlayer) {\r\n        let top = ((((this.\r\n            getInitialPositionOfPiece(startPosition.piece).row) - endPosition.row) * this.squareSize) + (0.13 * this.squareSize));\r\n        let left = (((endPosition.column - (this\r\n            .getInitialPositionOfPiece(startPosition.piece)).column) * this.squareSize) + (0.13 * this.squareSize));\r\n\r\n        element.css({\r\n            top: whitePlayer ? top + 'px' : (top\r\n                * (-1) + (0.26 * this.squareSize))\r\n                + 'px',\r\n            left: whitePlayer ? left + 'px' : (left\r\n                * (-1) + (0.26 * this.squareSize))\r\n                + 'px',\r\n        });\r\n    }\r\n\r\n    updateChessboardAfterMove(startPiece,\r\n        element, startSquare, endSquare,\r\n        ownMove, whitePlayer, promotedPiece) {\r\n\r\n        console.log(\"Position before start updatechessboard:\");\r\n        if (this.chessboard.annotatedMoves.length > 0 && typeof this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove !== 'undefined') {\r\n            this.printSquares(this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove);\r\n        }\r\n        if (this.chessboard.annotatedMoves.length > 0 && typeof this.chessboard.annotatedMoves[0].chessboardAfterBlackMove !== 'undefined' && this.chessboard.annotatedMoves[0].chessboardAfterBlackMove.length !== 0) {\r\n            this.printSquares(this.chessboard.annotatedMoves[0].chessboardAfterBlackMove);\r\n        }\r\n\r\n        let capture = false;\r\n        this.movePieceOnBoard(element, startSquare,\r\n            endSquare, whitePlayer);\r\n\r\n\r\n        console.log(\"Position vefore en passant:\");\r\n        if (this.chessboard.annotatedMoves.length > 0 && typeof this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove !== 'undefined') {\r\n            this.printSquares(this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove);\r\n        }\r\n        if (this.chessboard.annotatedMoves.length > 0 && typeof this.chessboard.annotatedMoves[0].chessboardAfterBlackMove !== 'undefined' && this.chessboard.annotatedMoves[0].chessboardAfterBlackMove.length !== 0) {\r\n            this.printSquares(this.chessboard.annotatedMoves[0].chessboardAfterBlackMove);\r\n        }\r\n\r\n        if (!this.isSquareEmpty(endSquare)\r\n            || this.pieceTakenEnPassant(startSquare,\r\n                endSquare, whitePlayer) === true) {\r\n            capture = true;\r\n\r\n            if (this.enPassant === true) {\r\n\r\n                let enPassantPawnTakenRow = this.myMove ?\r\n                    whitePlayer ? endSquare.row - 1 : endSquare.row + 1\r\n                    : !whitePlayer ? endSquare.row - 1 : endSquare.row + 1;\r\n                let enPassantPawnSquare = this.findSquare(endSquare.column, enPassantPawnTakenRow);\r\n                $(\"#\" + enPassantPawnSquare.piece).hide();\r\n                enPassantPawnSquare.piece = \"empty\";\r\n                this.enPassant = false;\r\n            } else {\r\n                $(\"#\" + endSquare.piece).hide();\r\n            }\r\n        }\r\n\r\n\r\n\r\n        if (typeof promotedPiece !== 'undefined') {\r\n            let promotedPieceFullName = promotedPiece + endSquare.column + endSquare.row;\r\n\r\n            $(element).prop('id', promotedPieceFullName);\r\n            $(element).css('top', \"8px\");\r\n            $(element).css('left', \"10px\");\r\n            $(element).attr('src', 'http://localhost:8082/images/pieces/' + promotedPiece + '.png');\r\n            $(element).detach().appendTo('#squareDiv' + endSquare.column + endSquare.row);\r\n\r\n            /*let indexOfNewPiece =chessboard.pieces.length;\r\n            chessboard.pieces[indexOfNewPiece] = {};\r\n            chessboard.pieces[indexOfNewPiece].row = endSquare.row;\r\n            chessboard.pieces[indexOfNewPiece].column = endSquare.column;\r\n            chessboard.pieces[indexOfNewPiece].piece = promotedPieceFullName;*/\r\n\r\n\r\n\r\n            let indexOfPiece = this.getInitialPositionOfPiece(startPiece).index;\r\n            this.chessboard.pieces[indexOfPiece].column = endSquare.column;\r\n            this.chessboard.pieces[indexOfPiece].row = endSquare.row;\r\n            this.chessboard.pieces[indexOfPiece].piece = promotedPieceFullName;\r\n\r\n            endSquare.piece = promotedPieceFullName;\r\n            this.findSquare(endSquare.column, endSquare.row).piece = promotedPieceFullName;\r\n            startSquare.piece = \"empty\";\r\n            this.findSquare(startSquare.column, startSquare.row).piece = \"empty\"\r\n        } else {\r\n\r\n            endSquare.piece = startPiece;\r\n            this.findSquare(endSquare.column, endSquare.row).piece = startPiece;\r\n            startSquare.piece = \"empty\";\r\n            this.findSquare(startSquare.column, startSquare.row).piece = \"empty\";\r\n\r\n        }\r\n\r\n\r\n\r\n        if (this.hasThreeFoldRepetitionOccurred()) {\r\n            this.endGame(\"1/2 - 1/2 (three fold repetition)\");\r\n            if (whitePlayer) {\r\n                this.sendGameResult();\r\n            }\r\n        }\r\n        let kingInCheckOrAndMate = this.isKingInCheckOrAndMate(\r\n            this.chessboard, this.whiteMove,\r\n            startSquare, endSquare);\r\n\r\n\r\n\r\n        this.drawLastMove(startSquare, endSquare);\r\n\r\n\r\n        if (this.castling === \"0-0\" || this.castling === \"0-0-0\") {\r\n            this.moveRookIfPlayerCastled();\r\n        }\r\n\r\n\r\n        /*   let annotatedMove = this.addAnnotation(\r\n              startSquare,\r\n              endSquare,\r\n              capture,\r\n              typeof promotedPiece !== 'undefined', this.castling,\r\n              kingInCheckOrAndMate.check,\r\n              kingInCheckOrAndMate.mate);\r\n  \r\n          if (ownMove && this.mode === this.chessboardUsageModes.PLAYING) {\r\n              this.sendMove(\r\n                  typeof promotedPiece !== 'undefined' ? startPiece\r\n                      : endSquare.piece,\r\n                  startSquare, endSquare, null,\r\n                  promotedPiece, annotatedMove);\r\n          } */\r\n\r\n        if (kingInCheckOrAndMate.mate === true) {\r\n            this.endGame(this.whiteMove === true ? \"1-0\" : \"0-1\");\r\n            this.sendGameResult();\r\n        }\r\n\r\n        this.castling = \"\";\r\n        this.whiteMove = !this.whiteMove;\r\n\r\n\r\n    };\r\n\r\n\r\n    moveRookIfPlayerCastled() {\r\n        let targetSquare;\r\n        let piece;\r\n        let initialSquare;\r\n        let initialSquareCoordinates;\r\n\r\n        if (this.castling === \"0-0\") {\r\n\r\n            if (this.whiteMove) {\r\n                piece = \"WR70\";\r\n                targetSquare = this.findSquare(5, 0);\r\n                initialSquareCoordinates = this\r\n                    .getInitialPositionOfPiece(\"WR70\");\r\n                initialSquare = this.findSquare(initialSquareCoordinates.column, initialSquareCoordinates.row);\r\n            } else {\r\n                targetSquare = this.findSquare(5, 7);\r\n                piece = \"BR77\";\r\n                initialSquareCoordinates = this\r\n                    .getInitialPositionOfPiece(piece);\r\n                initialSquare = this.findSquare(initialSquareCoordinates.column, initialSquareCoordinates.row);\r\n            }\r\n        } else if (this.castling === \"0-0-0\") {\r\n            if (this.whiteMove) {\r\n                console.log(\"White on move.\");\r\n                targetSquare = this.findSquare(3, 0);\r\n                piece = \"WR00\";\r\n                initialSquareCoordinates = this\r\n                    .getInitialPositionOfPiece(piece);\r\n                initialSquare = this.findSquare(initialSquareCoordinates.column, initialSquareCoordinates.row);\r\n\r\n            } else {\r\n                console.log(\"Black on move.\");\r\n                targetSquare = this.findSquare(3, 7);\r\n                piece = \"BR07\";\r\n                initialSquareCoordinates = this\r\n                    .getInitialPositionOfPiece(piece);\r\n                initialSquare = this.findSquare(initialSquareCoordinates.column, initialSquareCoordinates.row);\r\n\r\n            }\r\n        }\r\n\r\n        this.movePieceOnBoard(\r\n            $(\"#\" + piece),\r\n            initialSquareCoordinates,\r\n            targetSquare, this.whitePlayer);\r\n\r\n        targetSquare.piece = piece;\r\n        this.findSquare(targetSquare.column, targetSquare.row).piece = piece;\r\n        initialSquare.piece = \"empty\";\r\n        this.findSquare(initialSquare.column, initialSquare.row).piece = \"empty\";\r\n        this.printCurrentChessboard();\r\n    }\r\n\r\n    hasThreeFoldRepetitionOccurred() {\r\n\r\n        let threefoldrepetitionOccurred = false;\r\n        let chessboardAsString = this.printCurrentChessboard();\r\n        let numberOfOccurrences = 0;\r\n        if (this.positionOccurrencesMap.has(chessboardAsString)) {\r\n            numberOfOccurrences = this.positionOccurrencesMap.get(chessboardAsString) + 1;\r\n        }\r\n        this.positionOccurrencesMap.set(chessboardAsString, numberOfOccurrences);\r\n        if (numberOfOccurrences === 3) {\r\n            threefoldrepetitionOccurred = true;\r\n        }\r\n        return threefoldrepetitionOccurred;\r\n\r\n    }\r\n\r\n    hasKingAlreadyMoved(color) {\r\n        let hasKingAlreadyMoved = false;\r\n        this.chessboard.annotatedMoves\r\n            .forEach((move) => {\r\n                if (color === \"white\" && (move.whiteMove.indexOf(\"K\") !== -1 || move.whiteMove.indexOf(\"0\") !== -1)) {\r\n                    hasKingAlreadyMoved = true;\r\n                } else if (color === \"black\" && (move.blackMove.indexOf(\"K\") !== -1 || move.blackMove.indexOf(\"0\") !== -1)) {\r\n                    hasKingAlreadyMoved = true;\r\n                }\r\n            });\r\n        return hasKingAlreadyMoved;\r\n    }\r\n\r\n    rookMovedDueToCastling(piece) {\r\n        let rookMovedDueToCastling = false;\r\n        this.chessboard.annotatedMoves\r\n            .forEach((move) => {\r\n                if (piece === 'WR70' && move.whiteMove.indexOf(\"0-0\") !== -1) {\r\n                    rookMovedDueToCastling = true;\r\n                } else if (piece === 'WR00' && move.whiteMove.indexOf(\"0-0-0\") !== -1) {\r\n                    rookMovedDueToCastling = true;\r\n                } else if (piece === 'BR07' && move.blackMove.indexOf(\"0-0-0\") !== -1) {\r\n                    rookMovedDueToCastling = true;\r\n                } else if (piece === 'BR77' && move.blackMove.indexOf(\"0-0\") !== -1) {\r\n                    rookMovedDueToCastling = true;\r\n                }\r\n\r\n\r\n            });\r\n        return rookMovedDueToCastling;\r\n    };\r\n\r\n    printSquares(squares) {\r\n        let chessboardAsString = \"\";\r\n        for (let rowIndex = 7; rowIndex >= 0; rowIndex--) {\r\n            for (let columnIndex = 0; columnIndex <= 7; columnIndex++) {\r\n                let squareIndex;\r\n                for (let index = 0; index < squares.length; index++) {\r\n                    if (squares[index].column === columnIndex\r\n                        && squares[index].row === rowIndex) {\r\n\r\n                        squareIndex = index;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                let piece = squares[squareIndex].piece;\r\n                if (piece === 'empty') {\r\n                    piece = '-';\r\n                } else {\r\n                    if (piece.indexOf(\"W\") !== -1) {\r\n                        piece = piece.toLowerCase();\r\n                    }\r\n                    piece = piece.substring(1, 2);\r\n\r\n                }\r\n                chessboardAsString += piece;\r\n                if (columnIndex !== 0 && columnIndex % 7 === 0) {\r\n                    chessboardAsString += \"\\n\";\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        console.log(chessboardAsString);\r\n        return chessboardAsString;\r\n    }\r\n\r\n    printCurrentChessboard() {\r\n        let chessboardAsString = \"\";\r\n        for (let rowIndex = 7; rowIndex >= 0; rowIndex--) {\r\n            for (let columnIndex = 0; columnIndex <= 7; columnIndex++) {\r\n\r\n                let piece = this.findSquare(columnIndex, rowIndex).piece;\r\n                if (piece === 'empty') {\r\n                    piece = '-';\r\n                } else {\r\n                    if (piece.indexOf(\"W\") !== -1) {\r\n                        piece = piece.toLowerCase();\r\n                    }\r\n                    piece = piece.substring(1, 2);\r\n\r\n                }\r\n                chessboardAsString += piece;\r\n                if (columnIndex !== 0 && columnIndex % 7 === 0) {\r\n                    chessboardAsString += \"\\n\";\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        console.log(chessboardAsString);\r\n        return chessboardAsString;\r\n    }\r\n\r\n    /* addAnnotation(startSquare,\r\n                          endSquare, capture, promotion,\r\n                          castling, check, mate) { */\r\n\r\n    addAnnotation(moveNotation) {\r\n\r\n        /* if (castling === \"0-0\" || castling === \"0-0-0\") {\r\n            moveNotation = castling;\r\n        } else {\r\n            let pieceSymbol = (this.isPieceOnSquare(endSquare, \"P\") || promotion === true) ?\r\n                capture ? this.getSquareAsString(startSquare).substring(0, 1) : \"\"\r\n                : endSquare.piece.substr(1, 1);\r\n            let captureSymbol = capture ? \"x\" : \"\";\r\n            let promotionSymbol = promotion === true ? '=' + endSquare.piece.substr(1, 1) : \"\";\r\n            let checkSymbol = check ? \"+\" : \"\";\r\n            let mateSymbol = mate === true ? \"#\" : \"\";\r\n\r\n            let endSquareAsString = this.getSquareAsString(endSquare);\r\n            moveNotation = pieceSymbol\r\n                + captureSymbol + endSquareAsString\r\n                + promotionSymbol + checkSymbol\r\n                + mateSymbol;\r\n        } */\r\n\r\n        //let whiteMove = endSquare.piece.indexOf(\"W\") !== -1;\r\n        let whiteMove = this.whiteMove;\r\n        let movecomplete;\r\n        let currentchessboard = JSON.parse(JSON.stringify(this.chessboard.squares));\r\n\r\n        if (this.whiteMove) {\r\n            let newMove = { whiteMove: null, blackMove: null, whiteMoveStartSquare: null, whiteMoveEndSquare: null, blackMoveStartSquare: null, blackMoveEndSquare: null, whiteMoveVariations: [], blackMoveVariations: [], moveNumber: null, chessboardAfterWhiteMove: null, chessboardAfterBlackMove: null };\r\n            newMove = this.addNewAnnotatedMove(moveNotation, currentchessboard, whiteMove);\r\n\r\n            if (this.chessboard.annotatedMoves.length > this.moveNumber || this.currentVariation) {\r\n\r\n                if (!this.currentVariation) {\r\n                    //adding white move to main line\r\n                    let variations = this.chessboard.annotatedMoves[this.moveNumber].whiteMoveVariations;\r\n                    let numberOfVariations = variations.length;\r\n                    let newVariationNeedsToBeCreated = true;\r\n                    for (let i = 0; i < numberOfVariations; i++) {\r\n                        if (variations[i].moves[0].whiteMove === newMove.whiteMove) {\r\n                            this.currentVariation = variations[i];\r\n                            newVariationNeedsToBeCreated = false;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (newVariationNeedsToBeCreated) {\r\n                        this.chessboard.annotatedMoves[this.moveNumber].whiteMoveVariations[numberOfVariations] = { moves: [] };\r\n                        this.chessboard.annotatedMoves[this.moveNumber].whiteMoveVariations[numberOfVariations].moves[0] = newMove;\r\n                        this.chessboard.annotatedMoves[this.moveNumber].whiteMoveVariations[numberOfVariations].variationId = this.variationId;\r\n                        this.currentVariation = {\r\n                            \"variationId\": this.variationId,\r\n                            \"moveNumber\": this.moveNumber,\r\n                            \"whiteMove\": whiteMove,\r\n                            \"variationIndex\": numberOfVariations,\r\n                            \"moves\": this.chessboard.annotatedMoves[this.moveNumber].whiteMoveVariations[numberOfVariations].moves\r\n                        };\r\n                        this.variations.set(this.variationId, this.currentVariation);\r\n                        this.variationId++;\r\n                        /*   console.log(\"Position end of create variation:\");\r\n                          if(this.chessboard.annotatedMoves.length > 0 && typeof this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove !== 'undefined' ){\r\n                              this.printSquares(this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove);}\r\n                          if(this.chessboard.annotatedMoves.length > 0 && typeof this.chessboard.annotatedMoves[0].chessboardAfterBlackMove !== 'undefined' && this.chessboard.annotatedMoves[0].chessboardAfterBlackMove.length!==0){\r\n                              this.printSquares(this.chessboard.annotatedMoves[0].chessboardAfterBlackMove);} */\r\n                    }\r\n\r\n                } else {\r\n                    //adding white move to an existing variation\r\n                    let variation = this.variations.get(this.currentVariation.variationId);\r\n                    let moveNumberInVariation = this.moveNumber - variation.moveNumber;\r\n                    if (variation.moves.length > moveNumberInVariation) {\r\n                        let newVariationNeedsToBeCreated = true;\r\n                        let variations = variation.moves[moveNumberInVariation].whiteMoveVariations;\r\n                        let numberOfVariations = variations.length;\r\n\r\n                        for (let i = 0; i < numberOfVariations; i++) {\r\n                            if (variations[i].moves[0].whiteMove === newMove.whiteMove) {\r\n                                this.currentVariation = variations[i];\r\n                                newVariationNeedsToBeCreated = false;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if (newVariationNeedsToBeCreated) {\r\n                            /*   console.log(\"Creating new variation: \" + this.variationId + \" with the white starting move \" + newMove.whiteMove);\r\n                              console.log(this.printSquares(newMove.chessboardAfterWhiteMove)); */\r\n\r\n                            variation.moves[moveNumberInVariation].whiteMoveVariations[numberOfVariations] = { moves: [] };\r\n                            //newMove.moveNumber = this.moveNumber + 1;\r\n                            variation.moves[moveNumberInVariation].whiteMoveVariations[numberOfVariations].moves[0] = newMove;\r\n                            variation.moves[moveNumberInVariation].whiteMoveVariations[numberOfVariations].variationId = this.variationId;\r\n                            this.currentVariation = {\r\n                                \"variationId\": this.variationId,\r\n                                \"parentVariationId\": variation.variationId,\r\n                                \"moveNumber\": this.moveNumber,\r\n                                \"whiteMove\": whiteMove,\r\n                                \"variationIndex\": numberOfVariations,\r\n                                \"moves\": variation.moves[moveNumberInVariation].whiteMoveVariations[numberOfVariations].moves\r\n                            };\r\n                            this.variations.set(this.currentVariation.variationId, this.currentVariation);\r\n                            this.variationId++;\r\n                        }\r\n\r\n                    } else {\r\n                        //adding white move to existing variation\r\n                        //newMove.moveNumber = variation.moves.length + 1;\r\n                        variation.moves[variation.moves.length] = newMove;\r\n                    }\r\n                }\r\n            } else {\r\n\r\n                this.chessboard.annotatedMoves[this.moveNumber] = newMove;\r\n\r\n            }\r\n\r\n            movecomplete = false;\r\n        } else {\r\n\r\n            //annotating black move\r\n            if (this.currentVariation || this.chessboard.annotatedMoves[this.moveNumber].blackMove !== \"\") {\r\n                if (!this.currentVariation) {\r\n\r\n                    let variations = this.chessboard.annotatedMoves[this.moveNumber].blackMoveVariations;\r\n                    let numberOfVariations = variations.length;\r\n                    let newVariationNeedsToBeCreated = true;\r\n\r\n                    if (numberOfVariations === 0 && this.chessboard.annotatedMoves[this.moveNumber].blackMove === moveNotation) {\r\n                        newVariationNeedsToBeCreated = false;\r\n                    } else {\r\n                        for (let i = 0; i < numberOfVariations; i++) {\r\n                            if (variations[i].moves[0].blackMove === moveNotation) {\r\n                                newVariationNeedsToBeCreated = false;\r\n                                this.currentVariation = variations[i];\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (newVariationNeedsToBeCreated) {\r\n                        /*   console.log(\"Chessboard in the mainline start:\");\r\n                          console.log( this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove));\r\n                          console.log( this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterBlackMove)); */\r\n                        //new variation with a black starting move created\r\n                        this.chessboard.annotatedMoves[this.moveNumber].blackMoveVariations[numberOfVariations] = { moves: [] };\r\n                        let newMove = this.addNewAnnotatedMove(moveNotation, currentchessboard, whiteMove);\r\n                        this.chessboard.annotatedMoves[this.moveNumber].blackMoveVariations[numberOfVariations].moves[0] = newMove;\r\n                        this.chessboard.annotatedMoves[this.moveNumber].blackMoveVariations[numberOfVariations].variationId = this.variationId;\r\n                        this.currentVariation = {\r\n                            \"variationId\": this.variationId,\r\n                            \"moveNumber\": this.moveNumber,\r\n                            \"whiteMove\": this.whiteMove,\r\n                            \"variationIndex\": numberOfVariations,\r\n                            \"moves\": this.chessboard.annotatedMoves[this.moveNumber].blackMoveVariations[numberOfVariations].moves\r\n                        };\r\n                        this.variations.set(this.currentVariation.variationId, this.currentVariation);\r\n                        this.variationId++;\r\n\r\n                        /*        console.log(\"Creating new variation: \"+ this.variationId + \" with the black starting move \"+newMove.blackMove);\r\n                               console.log( this.printSquares(newMove.chessboardAfterBlackMove));\r\n                               console.log(\"Chessboard in the mainline end:\");\r\n       \r\n                               console.log( this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove));\r\n                               console.log( this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterBlackMove)); */\r\n                    }\r\n                } else {\r\n                    //adding black move to an existing variation\r\n                    let variation = this.variations.get(this.currentVariation.variationId);\r\n                    let newVariationNeedsToBeCreated = true;\r\n                    let moveNumberInVariation = this.moveNumber - variation.moveNumber;\r\n\r\n                    if (variation.moves[moveNumberInVariation].blackMove !== \"\") {\r\n\r\n                        let variations = variation.moves[moveNumberInVariation].blackMoveVariations;\r\n                        let numberOfVariations = variations.length;\r\n\r\n                        for (let i = 0; i < numberOfVariations; i++) {\r\n                            if (variations[i].moves[0].blackMove === moveNotation) {\r\n                                newVariationNeedsToBeCreated = false;\r\n                                this.currentVariation = variations[i];\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        //adding variation starting with a black move\r\n                        if (newVariationNeedsToBeCreated) {\r\n                            variation.moves[moveNumberInVariation].blackMoveVariations[numberOfVariations] = { moves: [] };\r\n                            variation.moves[moveNumberInVariation].blackMoveVariations[numberOfVariations].moves[0] = this.addNewAnnotatedMove(moveNotation, currentchessboard, whiteMove);\r\n                            variation.moves[moveNumberInVariation].blackMoveVariations[numberOfVariations].variationId = this.variationId;\r\n                            this.currentVariation = {\r\n                                \"variationId\": this.variationId,\r\n                                \"parentVariationId\": variation.variationId,\r\n                                \"moveNumber\": this.moveNumber,\r\n                                \"whiteMove\": whiteMove,\r\n                                \"variationIndex\": numberOfVariations,\r\n                                \"moves\": variation.moves[moveNumberInVariation].blackMoveVariations[numberOfVariations].moves\r\n                            };\r\n                            this.variations.set(this.currentVariation.variationId, this.currentVariation);\r\n                            this.variationId++;\r\n                        }\r\n                    } else {\r\n                        /*  console.log(\"Position before adding black move to existing variation:\");\r\n                         if( this.chessboard.annotatedMoves.length > 0 && typeof  this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove !== 'undefined' ){\r\n                             this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove);}\r\n                         if( this.chessboard.annotatedMoves.length > 0 && typeof  this.chessboard.annotatedMoves[0].chessboardAfterBlackMove !== 'undefined' &&  this.chessboard.annotatedMoves[0].chessboardAfterBlackMove.length!==0){\r\n                             this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterBlackMove);} */\r\n\r\n                        variation.moves[variation.moves.length - 1].blackMove = moveNotation;\r\n                        /*    variation.moves[variation.moves.length - 1].blackMoveStartSquare = startSquare;\r\n                           variation.moves[variation.moves.length - 1].blackMoveEndSquare = endSquare; */\r\n                        variation.moves[variation.moves.length - 1].chessboardAfterBlackMove = this.chess.fen();\r\n                        //variation.moves[variation.moves.length - 1].chessboardAfterBlackMove = currentchessboard;\r\n\r\n                        /*    console.log(\"Position after adding black move to existing variation:\");\r\n                           if( this.chessboard.annotatedMoves.length > 0 && typeof  this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove !== 'undefined' ){\r\n                               this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove);}\r\n                           if( this.chessboard.annotatedMoves.length > 0 && typeof  this.chessboard.annotatedMoves[0].chessboardAfterBlackMove !== 'undefined' &&  this.chessboard.annotatedMoves[0].chessboardAfterBlackMove.length!==0){\r\n                               this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterBlackMove);} */\r\n                    }\r\n                }\r\n\r\n            } else {\r\n\r\n                this.chessboard.annotatedMoves[this.moveNumber].blackMove = moveNotation;\r\n                /*     this.chessboard.annotatedMoves[this.moveNumber].blackMoveStartSquare = startSquare;\r\n                    this.chessboard.annotatedMoves[this.moveNumber].blackMoveEndSquare = endSquare; */\r\n                this.chessboard.annotatedMoves[this.moveNumber].chessboardAfterBlackMove = this.chess.fen();\r\n                // this.chessboard.annotatedMoves[ this.moveNumber].chessboardAfterBlackMove = currentchessboard;\r\n\r\n                /* console.log(\"Position after new mainline black move:\");\r\n                this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterWhiteMove);\r\n                this.printSquares( this.chessboard.annotatedMoves[0].chessboardAfterBlackMove); */\r\n            }\r\n            movecomplete = true;\r\n        }\r\n\r\n\r\n\r\n\r\n        this.annotatedMoves = this.chessboard.annotatedMoves;\r\n\r\n        //updateScrollbar('scrollTo', 440);\r\n\r\n        return moveNotation;\r\n    }\r\n\r\n    private highlightLastMoveInNotation() {\r\n        this.moveToHighlight.variationId = this.currentVariation ? this.currentVariation.variationId : this.MAIN_LINE;\r\n        this.moveToHighlight.moveNumber = this.moveNumber;\r\n        this.moveToHighlight.whiteMove = this.whiteMove;\r\n    }\r\n\r\n    addNewAnnotatedMove(moveNotation, currentchessboard, whiteMove) {\r\n        let newAnnotatedMove = { whiteMove: null, blackMove: null, whiteMoveStartSquare: null, whiteMoveEndSquare: null, blackMoveStartSquare: null, blackMoveEndSquare: null, whiteMoveVariations: [], blackMoveVariations: [], moveNumber: null, chessboardAfterWhiteMove: null, chessboardAfterBlackMove: null };\r\n        newAnnotatedMove.whiteMove = whiteMove ? moveNotation : \"\";\r\n        newAnnotatedMove.blackMove = whiteMove ? \"\" : moveNotation;\r\n        /*  newAnnotatedMove.whiteMoveStartSquare = whiteMove ? startSquare : \"\";\r\n         newAnnotatedMove.whiteMoveEndSquare = whiteMove ? endSquare : \"\";\r\n         newAnnotatedMove.blackMoveStartSquare = whiteMove ? \"\" : startSquare;\r\n         newAnnotatedMove.blackMoveEndSquare = whiteMove ? \"\" : endSquare; */\r\n        newAnnotatedMove.whiteMoveVariations = [];\r\n        newAnnotatedMove.blackMoveVariations = [];\r\n        newAnnotatedMove.moveNumber = this.moveNumber + 1;\r\n        // newAnnotatedMove.chessboardAfterWhiteMove = whiteMove ? currentchessboard : [];\r\n        // newAnnotatedMove.chessboardAfterBlackMove = whiteMove ? [] : currentchessboard;\r\n        newAnnotatedMove.chessboardAfterWhiteMove = whiteMove ? this.chess.fen() : \"\";\r\n        newAnnotatedMove.chessboardAfterBlackMove = whiteMove ? \"\" : this.chess.fen();\r\n        return newAnnotatedMove;\r\n    }\r\n\r\n    getSquareAsString(square) {\r\n        return String\r\n            .fromCharCode(97 + square.column)\r\n            + (square.row + 1);\r\n    }\r\n\r\n    findIndexOfSquare(x, y) {\r\n        for (let index = 0; index < this.chessboard.squares.length; index++) {\r\n            if (this.chessboard.squares[index].column === x\r\n                && this.chessboard.squares[index].row === y) {\r\n\r\n                return index;\r\n            }\r\n        }\r\n    }\r\n\r\n    findSquare(x, y) {\r\n        return this.chessboard.squares[this.findIndexOfSquare(x, y)];\r\n    }\r\n\r\n    updatePlayerElos(gameResultWhite, gameResultBlack) {\r\n        // //console.log(elowhite, eloblack,\r\n        // gameResultWhite, gameResultBlack);\r\n        let expectedOutcomeWhite = 1 / (1 + Math.pow(\r\n            10, (this.blackPlayerElo - this.whitePlayerElo) / 400));\r\n        let expectedOutcomeBlack = 1 / (1 + Math.pow(\r\n            10, (this.whitePlayerElo - this.blackPlayerElo) / 400));\r\n        let newRatingWhite = Math\r\n            .round(this.whitePlayerElo\r\n                + 15\r\n                * (gameResultWhite - expectedOutcomeWhite));\r\n        let newRatingBlack = Math\r\n            .round(this.blackPlayerElo\r\n                + 15\r\n                * (gameResultBlack - expectedOutcomeBlack));\r\n\r\n        this.whitePlayerEloChange = newRatingWhite - this.whitePlayerElo;\r\n        this.blackPlayerEloChange = newRatingBlack - this.blackPlayerElo;\r\n        this.whitePlayerElo = newRatingWhite;\r\n        this.blackPlayerElo = newRatingBlack;\r\n\r\n\r\n        /*return {\r\n            \"newRatingWhite\": newRatingWhite,\r\n            \"newRatingBlack\": newRatingBlack\r\n        };*/\r\n\r\n    };\r\n\r\n\r\n\r\n    initialiseWebSockets() {\r\n        this.socket = this.webSocketService.initWebSockets();\r\n        const onOpen = function () {\r\n            console.log(\"opening session and requesting game info\");\r\n\r\n        }\r\n        const onError = function (event) {\r\n            // //console.log(\"Error occured:\" + event);\r\n\r\n        }\r\n\r\n        const onMessage = (message) => {\r\n\r\n            let data = JSON.parse(message.data);\r\n            if (data.action === \"move\") {\r\n                this.executeReceivedMove(data);\r\n            } else if (data.action === \"startGame\") {\r\n                this.startGame(data);\r\n            } else if (data.action === \"offerDraw\") {\r\n                this.displayDrawOffer();\r\n            } else if (data.action === \"drawOfferReply\") {\r\n                if (data.acceptDraw === true) {\r\n                    this.endGame(\"1/2 - 1/2\");\r\n                } else {\r\n\r\n                }\r\n            } else if (data.action === \"resign\") {\r\n                this.endGame(this.whitePlayer ? \"1-0\" : \"0-1\");\r\n            } else if (data.action === \"gameInfo\") {\r\n                this.startGame(data);\r\n            } else if (data.action === \"gameResult\") {\r\n                this.endGame(data.gameResult);\r\n            }\r\n        }\r\n\r\n        this.socket.onmessage = (message) => onMessage(message);\r\n        this.socket.onerror = onError;\r\n        this.socket.onopen = onOpen;\r\n    };\r\n\r\n    displayDrawOffer() {\r\n        this.drawOfferReceived = true;\r\n    };\r\n\r\n    executeReceivedMove(move) {\r\n        console.log(move);\r\n\r\n        this.lastMove = move;\r\n        this.whiteTime = move.whiteTime;\r\n        this.blackTime = move.blackTime;\r\n\r\n        this.myMove = true;\r\n        this.castling = \"\";\r\n\r\n        const validMove = this.chess.move(move.annotatedMove);\r\n        this.processValidMove(validMove, move.chessboardAfterMove, false);\r\n        this.pressClock(!move.whiteMove);\r\n        this.svgChessboard.enableMoveInput(this.moveInputHandler, this.whitePlayer ? COLOR.white : COLOR.black);\r\n    };\r\n    generateClockTimeFromSeconds(seconds) {\r\n        let clockSeconds = seconds % 60;\r\n        let clockSecondsString: string;\r\n        if (clockSeconds < 10) {\r\n            clockSecondsString = \"0\" + +clockSeconds\r\n        } else {\r\n            clockSecondsString = clockSeconds.toString();\r\n        }\r\n        let clockMinutes = Math.floor(seconds / 60);\r\n        return clockMinutes + \":\" + clockSecondsString\r\n    };\r\n\r\n    onTimeout(whitePlayer) {\r\n        if (whitePlayer) {\r\n            if (this.whiteTime > 0\r\n                // && playingGame === true\r\n            ) {\r\n                this.whiteTime -= 1;\r\n                this.whiteClock = this.generateClockTimeFromSeconds(this.whiteTime);\r\n                console.log(\"Decreasing white time.\")\r\n            } else {\r\n                if (whitePlayer === whitePlayer) {\r\n                    this.endGame(\"0-1 (Black won on time)\");\r\n                    this.sendGameResult();\r\n                }\r\n                return;\r\n            }\r\n        } else {\r\n            if (this.blackTime > 0\r\n                //&& playingGame === true\r\n            ) {\r\n                this.blackTime -= 1;\r\n                this.blackClock = this.generateClockTimeFromSeconds(this.blackTime);\r\n            } else {\r\n                if (whitePlayer === whitePlayer) {\r\n                    this.endGame(\"1-0 (White won on time)\");\r\n                    this.sendGameResult();\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        if (this.playingGame || this.mode === this.chessboardUsageModes.OBSERVING) {\r\n            this.clockTimer = setTimeout(() =>\r\n                this.onTimeout(whitePlayer)\r\n                , 1000);\r\n        }\r\n\r\n    };\r\n\r\n    startClock(whitePlayer) {\r\n        console.log(\"Starting clock for whitePlayer:\"\r\n            + whitePlayer);\r\n        this.clockTimer = setTimeout(() => this\r\n            .onTimeout(whitePlayer), 1000);\r\n\r\n    };\r\n\r\n    pressClock(whitePlayer) {\r\n        console.log(\"Pressing clock\");\r\n        clearTimeout(this.clockTimer);\r\n        this.startClock(whitePlayer);\r\n    };\r\n\r\n\r\n    startGame(data) {\r\n        console.log(\"starting game\");\r\n        $(\".chessPiece\").show();\r\n        this.eraseAllHighlightedSquares();\r\n        this.moveNumber = 0;\r\n        this.seekingOponent = false;\r\n        this.playingGame = true;\r\n        this.whiteMove = true;\r\n        this.gameResult = \"\";\r\n        this.whiteTime = data.time * 60;\r\n        this.blackTime = data.time * 60;\r\n        this.drawOfferReceived = false;\r\n        this.whitePlayerElo = data.whitePlayer.elo;\r\n        this.blackPlayerElo = data.blackPlayer.elo;\r\n        this.whitePlayerName = data.whitePlayer.username;\r\n        this.blackPlayerName = data.blackPlayer.username;\r\n        this.whiteClock = this.generateClockTimeFromSeconds(this.whiteTime);\r\n        this.blackClock = this.generateClockTimeFromSeconds(this.blackTime);\r\n\r\n        // $apply( () {\r\n        this.initialiseChessboard();\r\n        if (this.mode === this.chessboardUsageModes.OBSERVING) {\r\n            this.annotatedMoves = data.annotatedMoves;\r\n        }\r\n        this.newGame = true;\r\n\r\n        if (data.blackPlayer.username === this.user) {\r\n            this.oponent = data.whitePlayer.username;\r\n            this.whitePlayer = false;\r\n            this.myMove = false;\r\n            this.svgChessboard.setOrientation(COLOR.black);\r\n            this.svgChessboard.disableMoveInput();\r\n        } else {\r\n            this.oponent = data.blackPlayer.username;\r\n            this.whitePlayer = true;\r\n            this.myMove = true;\r\n            this.svgChessboard.setOrientation(COLOR.white);\r\n        }\r\n    };\r\n\r\n    displayPromotionPicker(elem,\r\n        startPos, endPos) {\r\n        this.startPosition = startPos;\r\n        this.endPosition = endPos;\r\n        this.element = elem;\r\n        this.showPawnPromotionDiv = true;\r\n\r\n    };\r\n\r\n    promotePiece(piece) {\r\n\r\n        /*  this.updateChessboardAfterMove(this.startPosition.piece, this.element,\r\n             this.startPosition, this.endPosition, true,\r\n             this.whitePlayer, piece);\r\n         this.lastMove.startPosition = this.startPosition;\r\n         this.lastMove.endPosition = this.endPosition; */\r\n\r\n        this.pawnPromotionMove.promotion = piece\r\n        const validMove = this.chess.move(this.pawnPromotionMove);\r\n        if (validMove) {\r\n            const currentPositionAsFEN = this.chess.fen();\r\n            this.processValidMove(validMove, currentPositionAsFEN, true);\r\n            /*      this.pressClock(!this.whitePlayer);\r\n                 this.setMyMove(false); */\r\n        }\r\n        this.showPawnPromotionDiv = false;\r\n\r\n    };\r\n\r\n    endGame(gameResult) {\r\n        $(\"#arrow\").remove();\r\n        let gameResultWhite: number;\r\n        let gameResultBlack: number;\r\n        if (gameResult === \"1-0\" || gameResult === \"1-0 (White won on time)\") {\r\n            gameResultWhite = 1;\r\n            gameResultBlack = 0;\r\n        } else if (gameResult === \"0-1\" || gameResult === \"0-1 (Black won on time)\") {\r\n            gameResultWhite = 0;\r\n            gameResultBlack = 1;\r\n        } else if (gameResult === \"1/2 - 1/2\") {\r\n            gameResultWhite = 0.5;\r\n            gameResultBlack = 0.5;\r\n        }\r\n        this.stopClocks();\r\n        this.playingGame = false;\r\n\r\n        let newElos = this.updatePlayerElos(\r\n            gameResultWhite,\r\n            gameResultBlack);\r\n\r\n\r\n        this.gameResult = gameResult;\r\n\r\n        /* this.openPostGameModal(\r\n            this.whitePlayerName,\r\n            this.blackPlayerName,\r\n            gameResult, this.whitePlayer, this.mode); */\r\n\r\n        return newElos;\r\n\r\n    };\r\n\r\n    postGameModalController(this,\r\n        $modalInstance, whitePlayerName,\r\n        blackPlayerName, gameResult, whitePlayer, mode) {\r\n\r\n        whitePlayerName = whitePlayerName;\r\n        blackPlayerName = blackPlayerName;\r\n        gameResult = gameResult;\r\n        whitePlayer = whitePlayer;\r\n        this.resultMessage = function () {\r\n            if (mode === this.chessboardUsageModes.PLAYING && ((gameResult === \"1-0\"\r\n                && whitePlayer === true) || (gameResult === \"0-1\"\r\n                    && whitePlayer === false))) {\r\n                return \"Congratulation you won the game.\";\r\n            } else if (mode === this.chessboardUsageModes.PLAYING && ((gameResult === \"1-0 (White won on time)\"\r\n                && whitePlayer === true) || (gameResult === \"0-1 (Black won on time)\"\r\n                    && whitePlayer === false))) {\r\n                return \"Congratulation you won the game on time.\";\r\n            } else if (mode === this.chessboardUsageModes.PLAYING && ((gameResult === \"1-0 (White won on time)\"\r\n                && whitePlayer === false) || (gameResult === \"0-1 (Black won on time)\"\r\n                    && whitePlayer === true))) {\r\n                return \"You lost the game on time.\";\r\n            } else if (mode === this.chessboardUsageModes.PLAYING && ((gameResult === \"1-0\"\r\n                && whitePlayer === false) || (gameResult === \"0-1\"\r\n                    && whitePlayer === true))) {\r\n                return \"You lost the game.\";\r\n            } else if (gameResult === \"1-0\" &&\r\n                mode === this.chessboardUsageModes.OBSERVING) {\r\n                return whitePlayerName + \" won the game.\";\r\n            } else if (gameResult === \"0-1\"\r\n                && mode === this.chessboardUsageModes.OBSERVING) {\r\n                return blackPlayerName + \" won the game.\";\r\n            } else if (gameResult === \"1-0 (White won on time)\" &&\r\n                mode === this.chessboardUsageModes.OBSERVING) {\r\n                return whitePlayerName + \" won the game on time.\";\r\n            } else if (gameResult === \"0-1 (Black won on time)\"\r\n                && mode === this.chessboardUsageModes.OBSERVING) {\r\n                return blackPlayerName + \" won the game on time.\";\r\n            } else if (gameResult === \"1/2 - 1/2\") {\r\n                return \"Game ended in a draw.\"\r\n            } else {\r\n                console.log(gameResult, whitePlayer);\r\n                return \"Else called.\"\r\n            }\r\n\r\n        };\r\n\r\n        this.close = function () {\r\n            console.log(\"Closing dialog window;\");\r\n            $modalInstance.close();\r\n        };\r\n\r\n        this.offerRematch = function () {\r\n\r\n        };\r\n    };\r\n\r\n    /*     this.postGameModalController['$inject'] = ['this',\r\n            '$modalInstance', 'whitePlayerName',\r\n            'blackPlayerName', 'gameResult',\r\n            'whitePlayer', 'mode']; */\r\n\r\n    openPostGameModal(\r\n        whitePlayerName, blackPlayerName,\r\n        gameResult, whitePlayer, mode) {\r\n\r\n        /* $modal\r\n           .open({\r\n               templateUrl: 'views/playingHall/postGameModal.html',\r\n               controller: this.postGameModalController,\r\n               scope: $new(true),\r\n               resolve: {\r\n                   whitePlayerName:  () => {\r\n                       return whitePlayerName\r\n                   },\r\n                   blackPlayerName:  ()=>  {\r\n                       return blackPlayerName\r\n                   },\r\n                   gameResult:  () => {\r\n                       return gameResult\r\n                   },\r\n                   whitePlayer:  () => {\r\n                       return whitePlayer\r\n                   },\r\n                   mode:  () =>{\r\n                       return mode\r\n                   }\r\n               }\r\n           }); */\r\n    };\r\n\r\n    offerDraw() {\r\n        let drawOffer = {\r\n            action: \"offerDraw\",\r\n            oponent: this.oponent\r\n        };\r\n        this.socket.send(JSON.stringify(drawOffer));\r\n    };\r\n\r\n    drawOfferReply(acceptDraw) {\r\n        let drawOffer = {\r\n            action: \"drawOfferReply\",\r\n            player: this.user.username,\r\n            oponent: this.oponent,\r\n            acceptDraw: acceptDraw\r\n        };\r\n\r\n        if (acceptDraw) {\r\n            this.endGame(\"1/2 - 1/2\");\r\n            this.sendGameResult();\r\n\r\n        } else {\r\n            this.socket.send(JSON.stringify(drawOffer));\r\n        }\r\n    };\r\n\r\n    sendGameResult() {\r\n        let gameResult = {\r\n            action: \"gameResult\",\r\n            oponent: this.oponent,\r\n            gameId: this.gameId,\r\n            gameResult: this.gameResult,\r\n            whitePlayerElo: this.whitePlayerElo,\r\n            blackPlayerElo: this.blackPlayerElo\r\n        };\r\n\r\n        this.socket.send(JSON.stringify(gameResult));\r\n    };\r\n    resign() {\r\n        let gameResult = !this.whitePlayer ? \"1-0\" : \"0-1\";\r\n        this.endGame(gameResult);\r\n        this.sendGameResult();\r\n    };\r\n\r\n    observeGame(game) {\r\n\r\n        this.whitePlayerName = game.whitePlayer.username;\r\n        this.blackPlayerName = game.blackPlayer.username;\r\n        this.whitePlayerElo = game.whitePlayer.elo;\r\n        this.blackPlayerElo = game.blackPlayer.elo;\r\n        this.annotatedMoves = Object.keys(game.annotatedMoves).map(key => game.annotatedMoves[key]);\r\n\r\n        let lastMove = this.annotatedMoves[this.annotatedMoves.length - 1];\r\n        this.whiteTime = lastMove.whiteTime;\r\n        this.blackTime = lastMove.blackTime;\r\n        this.whiteClock = this.generateClockTimeFromSeconds(this.whiteTime);\r\n        this.blackClock = this.generateClockTimeFromSeconds(this.blackTime);\r\n\r\n        if (lastMove.blackMove) {\r\n            this.redrawChessboard(JSON.parse(lastMove.chessboardAfterBlackMove), null);\r\n            this.startClock(true)\r\n        } else {\r\n            this.redrawChessboard(JSON.parse(lastMove.chessboardAfterWhiteMove), null);\r\n            this.startClock(false);\r\n        }\r\n        console.log(game);\r\n    };\r\n\r\n\r\n\r\n    sendMove(fen: string, annotatedMove: string) {\r\n\r\n        let moveAction = {\r\n            action: \"move\",\r\n            oponent: this.oponent,\r\n            chessboardAfterMove: fen,\r\n            gameId: this.gameId,\r\n            annotatedMove: annotatedMove,\r\n            whiteMove: this.whiteMove,\r\n            whiteTime: this.whiteTime,\r\n            blackTime: this.blackTime\r\n        };\r\n        console.log(\"sending move to server:\");\r\n        console.log(JSON.stringify(moveAction));\r\n        this.socket.send(JSON.stringify(moveAction));\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n\r\n}\r\n","export default \".highlighted{\\r\\n    color:red;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZXdzL3BsYXlpbmdIYWxsL3N1YmNvbXBvbmVudHMvbW92ZVZhcmlhdGlvblRyZWUvbW92ZS12YXJpYXRpb24tdHJlZS9tb3ZlLXZhcmlhdGlvbi10cmVlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxTQUFTO0FBQ2IiLCJmaWxlIjoidmlld3MvcGxheWluZ0hhbGwvc3ViY29tcG9uZW50cy9tb3ZlVmFyaWF0aW9uVHJlZS9tb3ZlLXZhcmlhdGlvbi10cmVlL21vdmUtdmFyaWF0aW9uLXRyZWUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5oaWdobGlnaHRlZHtcclxuICAgIGNvbG9yOnJlZDtcclxufSJdfQ== */\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n\n@Component({\n  selector: 'variation-tree',\n  templateUrl: './move-variation-tree.component.html',\n  styleUrls: ['./move-variation-tree.component.css']\n})\nexport class MoveVariationTreeComponent implements OnInit {\n\n  @Input() mainVariation: any;\n  @Input() moveToHighlight:any;\n\n  @Output() positionToRedraw: EventEmitter<any> = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  redrawPosition(fen:string, variationId:number){\n    const data = {fen,variationId}\n    this.positionToRedraw.emit(data);\n  }\n\n\n}\n"],"sourceRoot":"webpack:///"}